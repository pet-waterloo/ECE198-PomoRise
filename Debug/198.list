
198.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003980  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c0  08003b20  08003b20  00013b20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003be0  08003be0  000200c0  2**0
                  CONTENTS
  4 .ARM          00000008  08003be0  08003be0  00013be0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003be8  08003be8  000200c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003be8  08003be8  00013be8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003bec  08003bec  00013bec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000c0  20000000  08003bf0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000258  200000c0  08003cb0  000200c0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000318  08003cb0  00020318  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200f0  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000c60b  00000000  00000000  00020133  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001f94  00000000  00000000  0002c73e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000d70  00000000  00000000  0002e6d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000a74  00000000  00000000  0002f448  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00016e69  00000000  00000000  0002febc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00010200  00000000  00000000  00046d25  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008d9ce  00000000  00000000  00056f25  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003d5c  00000000  00000000  000e48f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  000e8650  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200000c0 	.word	0x200000c0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08003b08 	.word	0x08003b08

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200000c4 	.word	0x200000c4
 80001dc:	08003b08 	.word	0x08003b08

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002a4:	f000 b970 	b.w	8000588 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9e08      	ldr	r6, [sp, #32]
 80002c6:	460d      	mov	r5, r1
 80002c8:	4604      	mov	r4, r0
 80002ca:	460f      	mov	r7, r1
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d14a      	bne.n	8000366 <__udivmoddi4+0xa6>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4694      	mov	ip, r2
 80002d4:	d965      	bls.n	80003a2 <__udivmoddi4+0xe2>
 80002d6:	fab2 f382 	clz	r3, r2
 80002da:	b143      	cbz	r3, 80002ee <__udivmoddi4+0x2e>
 80002dc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002e0:	f1c3 0220 	rsb	r2, r3, #32
 80002e4:	409f      	lsls	r7, r3
 80002e6:	fa20 f202 	lsr.w	r2, r0, r2
 80002ea:	4317      	orrs	r7, r2
 80002ec:	409c      	lsls	r4, r3
 80002ee:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002f2:	fa1f f58c 	uxth.w	r5, ip
 80002f6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002fa:	0c22      	lsrs	r2, r4, #16
 80002fc:	fb0e 7711 	mls	r7, lr, r1, r7
 8000300:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000304:	fb01 f005 	mul.w	r0, r1, r5
 8000308:	4290      	cmp	r0, r2
 800030a:	d90a      	bls.n	8000322 <__udivmoddi4+0x62>
 800030c:	eb1c 0202 	adds.w	r2, ip, r2
 8000310:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000314:	f080 811c 	bcs.w	8000550 <__udivmoddi4+0x290>
 8000318:	4290      	cmp	r0, r2
 800031a:	f240 8119 	bls.w	8000550 <__udivmoddi4+0x290>
 800031e:	3902      	subs	r1, #2
 8000320:	4462      	add	r2, ip
 8000322:	1a12      	subs	r2, r2, r0
 8000324:	b2a4      	uxth	r4, r4
 8000326:	fbb2 f0fe 	udiv	r0, r2, lr
 800032a:	fb0e 2210 	mls	r2, lr, r0, r2
 800032e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000332:	fb00 f505 	mul.w	r5, r0, r5
 8000336:	42a5      	cmp	r5, r4
 8000338:	d90a      	bls.n	8000350 <__udivmoddi4+0x90>
 800033a:	eb1c 0404 	adds.w	r4, ip, r4
 800033e:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000342:	f080 8107 	bcs.w	8000554 <__udivmoddi4+0x294>
 8000346:	42a5      	cmp	r5, r4
 8000348:	f240 8104 	bls.w	8000554 <__udivmoddi4+0x294>
 800034c:	4464      	add	r4, ip
 800034e:	3802      	subs	r0, #2
 8000350:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000354:	1b64      	subs	r4, r4, r5
 8000356:	2100      	movs	r1, #0
 8000358:	b11e      	cbz	r6, 8000362 <__udivmoddi4+0xa2>
 800035a:	40dc      	lsrs	r4, r3
 800035c:	2300      	movs	r3, #0
 800035e:	e9c6 4300 	strd	r4, r3, [r6]
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0xbc>
 800036a:	2e00      	cmp	r6, #0
 800036c:	f000 80ed 	beq.w	800054a <__udivmoddi4+0x28a>
 8000370:	2100      	movs	r1, #0
 8000372:	e9c6 0500 	strd	r0, r5, [r6]
 8000376:	4608      	mov	r0, r1
 8000378:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037c:	fab3 f183 	clz	r1, r3
 8000380:	2900      	cmp	r1, #0
 8000382:	d149      	bne.n	8000418 <__udivmoddi4+0x158>
 8000384:	42ab      	cmp	r3, r5
 8000386:	d302      	bcc.n	800038e <__udivmoddi4+0xce>
 8000388:	4282      	cmp	r2, r0
 800038a:	f200 80f8 	bhi.w	800057e <__udivmoddi4+0x2be>
 800038e:	1a84      	subs	r4, r0, r2
 8000390:	eb65 0203 	sbc.w	r2, r5, r3
 8000394:	2001      	movs	r0, #1
 8000396:	4617      	mov	r7, r2
 8000398:	2e00      	cmp	r6, #0
 800039a:	d0e2      	beq.n	8000362 <__udivmoddi4+0xa2>
 800039c:	e9c6 4700 	strd	r4, r7, [r6]
 80003a0:	e7df      	b.n	8000362 <__udivmoddi4+0xa2>
 80003a2:	b902      	cbnz	r2, 80003a6 <__udivmoddi4+0xe6>
 80003a4:	deff      	udf	#255	; 0xff
 80003a6:	fab2 f382 	clz	r3, r2
 80003aa:	2b00      	cmp	r3, #0
 80003ac:	f040 8090 	bne.w	80004d0 <__udivmoddi4+0x210>
 80003b0:	1a8a      	subs	r2, r1, r2
 80003b2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003b6:	fa1f fe8c 	uxth.w	lr, ip
 80003ba:	2101      	movs	r1, #1
 80003bc:	fbb2 f5f7 	udiv	r5, r2, r7
 80003c0:	fb07 2015 	mls	r0, r7, r5, r2
 80003c4:	0c22      	lsrs	r2, r4, #16
 80003c6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ca:	fb0e f005 	mul.w	r0, lr, r5
 80003ce:	4290      	cmp	r0, r2
 80003d0:	d908      	bls.n	80003e4 <__udivmoddi4+0x124>
 80003d2:	eb1c 0202 	adds.w	r2, ip, r2
 80003d6:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x122>
 80003dc:	4290      	cmp	r0, r2
 80003de:	f200 80cb 	bhi.w	8000578 <__udivmoddi4+0x2b8>
 80003e2:	4645      	mov	r5, r8
 80003e4:	1a12      	subs	r2, r2, r0
 80003e6:	b2a4      	uxth	r4, r4
 80003e8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003ec:	fb07 2210 	mls	r2, r7, r0, r2
 80003f0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003f4:	fb0e fe00 	mul.w	lr, lr, r0
 80003f8:	45a6      	cmp	lr, r4
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x14e>
 80003fc:	eb1c 0404 	adds.w	r4, ip, r4
 8000400:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000404:	d202      	bcs.n	800040c <__udivmoddi4+0x14c>
 8000406:	45a6      	cmp	lr, r4
 8000408:	f200 80bb 	bhi.w	8000582 <__udivmoddi4+0x2c2>
 800040c:	4610      	mov	r0, r2
 800040e:	eba4 040e 	sub.w	r4, r4, lr
 8000412:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000416:	e79f      	b.n	8000358 <__udivmoddi4+0x98>
 8000418:	f1c1 0720 	rsb	r7, r1, #32
 800041c:	408b      	lsls	r3, r1
 800041e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000422:	ea4c 0c03 	orr.w	ip, ip, r3
 8000426:	fa05 f401 	lsl.w	r4, r5, r1
 800042a:	fa20 f307 	lsr.w	r3, r0, r7
 800042e:	40fd      	lsrs	r5, r7
 8000430:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000434:	4323      	orrs	r3, r4
 8000436:	fbb5 f8f9 	udiv	r8, r5, r9
 800043a:	fa1f fe8c 	uxth.w	lr, ip
 800043e:	fb09 5518 	mls	r5, r9, r8, r5
 8000442:	0c1c      	lsrs	r4, r3, #16
 8000444:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000448:	fb08 f50e 	mul.w	r5, r8, lr
 800044c:	42a5      	cmp	r5, r4
 800044e:	fa02 f201 	lsl.w	r2, r2, r1
 8000452:	fa00 f001 	lsl.w	r0, r0, r1
 8000456:	d90b      	bls.n	8000470 <__udivmoddi4+0x1b0>
 8000458:	eb1c 0404 	adds.w	r4, ip, r4
 800045c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000460:	f080 8088 	bcs.w	8000574 <__udivmoddi4+0x2b4>
 8000464:	42a5      	cmp	r5, r4
 8000466:	f240 8085 	bls.w	8000574 <__udivmoddi4+0x2b4>
 800046a:	f1a8 0802 	sub.w	r8, r8, #2
 800046e:	4464      	add	r4, ip
 8000470:	1b64      	subs	r4, r4, r5
 8000472:	b29d      	uxth	r5, r3
 8000474:	fbb4 f3f9 	udiv	r3, r4, r9
 8000478:	fb09 4413 	mls	r4, r9, r3, r4
 800047c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000480:	fb03 fe0e 	mul.w	lr, r3, lr
 8000484:	45a6      	cmp	lr, r4
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x1da>
 8000488:	eb1c 0404 	adds.w	r4, ip, r4
 800048c:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000490:	d26c      	bcs.n	800056c <__udivmoddi4+0x2ac>
 8000492:	45a6      	cmp	lr, r4
 8000494:	d96a      	bls.n	800056c <__udivmoddi4+0x2ac>
 8000496:	3b02      	subs	r3, #2
 8000498:	4464      	add	r4, ip
 800049a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800049e:	fba3 9502 	umull	r9, r5, r3, r2
 80004a2:	eba4 040e 	sub.w	r4, r4, lr
 80004a6:	42ac      	cmp	r4, r5
 80004a8:	46c8      	mov	r8, r9
 80004aa:	46ae      	mov	lr, r5
 80004ac:	d356      	bcc.n	800055c <__udivmoddi4+0x29c>
 80004ae:	d053      	beq.n	8000558 <__udivmoddi4+0x298>
 80004b0:	b156      	cbz	r6, 80004c8 <__udivmoddi4+0x208>
 80004b2:	ebb0 0208 	subs.w	r2, r0, r8
 80004b6:	eb64 040e 	sbc.w	r4, r4, lr
 80004ba:	fa04 f707 	lsl.w	r7, r4, r7
 80004be:	40ca      	lsrs	r2, r1
 80004c0:	40cc      	lsrs	r4, r1
 80004c2:	4317      	orrs	r7, r2
 80004c4:	e9c6 7400 	strd	r7, r4, [r6]
 80004c8:	4618      	mov	r0, r3
 80004ca:	2100      	movs	r1, #0
 80004cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004d0:	f1c3 0120 	rsb	r1, r3, #32
 80004d4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004d8:	fa20 f201 	lsr.w	r2, r0, r1
 80004dc:	fa25 f101 	lsr.w	r1, r5, r1
 80004e0:	409d      	lsls	r5, r3
 80004e2:	432a      	orrs	r2, r5
 80004e4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e8:	fa1f fe8c 	uxth.w	lr, ip
 80004ec:	fbb1 f0f7 	udiv	r0, r1, r7
 80004f0:	fb07 1510 	mls	r5, r7, r0, r1
 80004f4:	0c11      	lsrs	r1, r2, #16
 80004f6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004fa:	fb00 f50e 	mul.w	r5, r0, lr
 80004fe:	428d      	cmp	r5, r1
 8000500:	fa04 f403 	lsl.w	r4, r4, r3
 8000504:	d908      	bls.n	8000518 <__udivmoddi4+0x258>
 8000506:	eb1c 0101 	adds.w	r1, ip, r1
 800050a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800050e:	d22f      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000510:	428d      	cmp	r5, r1
 8000512:	d92d      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000514:	3802      	subs	r0, #2
 8000516:	4461      	add	r1, ip
 8000518:	1b49      	subs	r1, r1, r5
 800051a:	b292      	uxth	r2, r2
 800051c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000520:	fb07 1115 	mls	r1, r7, r5, r1
 8000524:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000528:	fb05 f10e 	mul.w	r1, r5, lr
 800052c:	4291      	cmp	r1, r2
 800052e:	d908      	bls.n	8000542 <__udivmoddi4+0x282>
 8000530:	eb1c 0202 	adds.w	r2, ip, r2
 8000534:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000538:	d216      	bcs.n	8000568 <__udivmoddi4+0x2a8>
 800053a:	4291      	cmp	r1, r2
 800053c:	d914      	bls.n	8000568 <__udivmoddi4+0x2a8>
 800053e:	3d02      	subs	r5, #2
 8000540:	4462      	add	r2, ip
 8000542:	1a52      	subs	r2, r2, r1
 8000544:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000548:	e738      	b.n	80003bc <__udivmoddi4+0xfc>
 800054a:	4631      	mov	r1, r6
 800054c:	4630      	mov	r0, r6
 800054e:	e708      	b.n	8000362 <__udivmoddi4+0xa2>
 8000550:	4639      	mov	r1, r7
 8000552:	e6e6      	b.n	8000322 <__udivmoddi4+0x62>
 8000554:	4610      	mov	r0, r2
 8000556:	e6fb      	b.n	8000350 <__udivmoddi4+0x90>
 8000558:	4548      	cmp	r0, r9
 800055a:	d2a9      	bcs.n	80004b0 <__udivmoddi4+0x1f0>
 800055c:	ebb9 0802 	subs.w	r8, r9, r2
 8000560:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000564:	3b01      	subs	r3, #1
 8000566:	e7a3      	b.n	80004b0 <__udivmoddi4+0x1f0>
 8000568:	4645      	mov	r5, r8
 800056a:	e7ea      	b.n	8000542 <__udivmoddi4+0x282>
 800056c:	462b      	mov	r3, r5
 800056e:	e794      	b.n	800049a <__udivmoddi4+0x1da>
 8000570:	4640      	mov	r0, r8
 8000572:	e7d1      	b.n	8000518 <__udivmoddi4+0x258>
 8000574:	46d0      	mov	r8, sl
 8000576:	e77b      	b.n	8000470 <__udivmoddi4+0x1b0>
 8000578:	3d02      	subs	r5, #2
 800057a:	4462      	add	r2, ip
 800057c:	e732      	b.n	80003e4 <__udivmoddi4+0x124>
 800057e:	4608      	mov	r0, r1
 8000580:	e70a      	b.n	8000398 <__udivmoddi4+0xd8>
 8000582:	4464      	add	r4, ip
 8000584:	3802      	subs	r0, #2
 8000586:	e742      	b.n	800040e <__udivmoddi4+0x14e>

08000588 <__aeabi_idiv0>:
 8000588:	4770      	bx	lr
 800058a:	bf00      	nop

0800058c <MX_GPIO_Init>:
        * EVENT_OUT
        * EXTI
     PA3   ------> USART2_RX
*/
void MX_GPIO_Init(void)
{
 800058c:	b580      	push	{r7, lr}
 800058e:	b08a      	sub	sp, #40	; 0x28
 8000590:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000592:	f107 0314 	add.w	r3, r7, #20
 8000596:	2200      	movs	r2, #0
 8000598:	601a      	str	r2, [r3, #0]
 800059a:	605a      	str	r2, [r3, #4]
 800059c:	609a      	str	r2, [r3, #8]
 800059e:	60da      	str	r2, [r3, #12]
 80005a0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005a2:	2300      	movs	r3, #0
 80005a4:	613b      	str	r3, [r7, #16]
 80005a6:	4b55      	ldr	r3, [pc, #340]	; (80006fc <MX_GPIO_Init+0x170>)
 80005a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005aa:	4a54      	ldr	r2, [pc, #336]	; (80006fc <MX_GPIO_Init+0x170>)
 80005ac:	f043 0304 	orr.w	r3, r3, #4
 80005b0:	6313      	str	r3, [r2, #48]	; 0x30
 80005b2:	4b52      	ldr	r3, [pc, #328]	; (80006fc <MX_GPIO_Init+0x170>)
 80005b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005b6:	f003 0304 	and.w	r3, r3, #4
 80005ba:	613b      	str	r3, [r7, #16]
 80005bc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80005be:	2300      	movs	r3, #0
 80005c0:	60fb      	str	r3, [r7, #12]
 80005c2:	4b4e      	ldr	r3, [pc, #312]	; (80006fc <MX_GPIO_Init+0x170>)
 80005c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005c6:	4a4d      	ldr	r2, [pc, #308]	; (80006fc <MX_GPIO_Init+0x170>)
 80005c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80005cc:	6313      	str	r3, [r2, #48]	; 0x30
 80005ce:	4b4b      	ldr	r3, [pc, #300]	; (80006fc <MX_GPIO_Init+0x170>)
 80005d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80005d6:	60fb      	str	r3, [r7, #12]
 80005d8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005da:	2300      	movs	r3, #0
 80005dc:	60bb      	str	r3, [r7, #8]
 80005de:	4b47      	ldr	r3, [pc, #284]	; (80006fc <MX_GPIO_Init+0x170>)
 80005e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005e2:	4a46      	ldr	r2, [pc, #280]	; (80006fc <MX_GPIO_Init+0x170>)
 80005e4:	f043 0301 	orr.w	r3, r3, #1
 80005e8:	6313      	str	r3, [r2, #48]	; 0x30
 80005ea:	4b44      	ldr	r3, [pc, #272]	; (80006fc <MX_GPIO_Init+0x170>)
 80005ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ee:	f003 0301 	and.w	r3, r3, #1
 80005f2:	60bb      	str	r3, [r7, #8]
 80005f4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005f6:	2300      	movs	r3, #0
 80005f8:	607b      	str	r3, [r7, #4]
 80005fa:	4b40      	ldr	r3, [pc, #256]	; (80006fc <MX_GPIO_Init+0x170>)
 80005fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005fe:	4a3f      	ldr	r2, [pc, #252]	; (80006fc <MX_GPIO_Init+0x170>)
 8000600:	f043 0302 	orr.w	r3, r3, #2
 8000604:	6313      	str	r3, [r2, #48]	; 0x30
 8000606:	4b3d      	ldr	r3, [pc, #244]	; (80006fc <MX_GPIO_Init+0x170>)
 8000608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800060a:	f003 0302 	and.w	r3, r3, #2
 800060e:	607b      	str	r3, [r7, #4]
 8000610:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|GPIO_PIN_5|GPIO_Outpue___lcd_Pin|GPIO_Out___lcd_Pin, GPIO_PIN_RESET);
 8000612:	2200      	movs	r2, #0
 8000614:	21f0      	movs	r1, #240	; 0xf0
 8000616:	483a      	ldr	r0, [pc, #232]	; (8000700 <MX_GPIO_Init+0x174>)
 8000618:	f001 fb92 	bl	8001d40 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIO_Output___lcd_GPIO_Port, GPIO_Output___lcd_Pin, GPIO_PIN_RESET);
 800061c:	2200      	movs	r2, #0
 800061e:	2180      	movs	r1, #128	; 0x80
 8000620:	4838      	ldr	r0, [pc, #224]	; (8000704 <MX_GPIO_Init+0x178>)
 8000622:	f001 fb8d 	bl	8001d40 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_Output___lcdB4_Pin|GPIO_Output___lcdB5_Pin|GPIO_Output___lcdB6_Pin, GPIO_PIN_RESET);
 8000626:	2200      	movs	r2, #0
 8000628:	2170      	movs	r1, #112	; 0x70
 800062a:	4837      	ldr	r0, [pc, #220]	; (8000708 <MX_GPIO_Init+0x17c>)
 800062c:	f001 fb88 	bl	8001d40 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000630:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000634:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000636:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800063a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800063c:	2300      	movs	r3, #0
 800063e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000640:	f107 0314 	add.w	r3, r7, #20
 8000644:	4619      	mov	r1, r3
 8000646:	482f      	ldr	r0, [pc, #188]	; (8000704 <MX_GPIO_Init+0x178>)
 8000648:	f001 f9de 	bl	8001a08 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USART_RX_Pin;
 800064c:	2308      	movs	r3, #8
 800064e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000650:	2302      	movs	r3, #2
 8000652:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000654:	2300      	movs	r3, #0
 8000656:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000658:	2300      	movs	r3, #0
 800065a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800065c:	2307      	movs	r3, #7
 800065e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USART_RX_GPIO_Port, &GPIO_InitStruct);
 8000660:	f107 0314 	add.w	r3, r7, #20
 8000664:	4619      	mov	r1, r3
 8000666:	4826      	ldr	r0, [pc, #152]	; (8000700 <MX_GPIO_Init+0x174>)
 8000668:	f001 f9ce 	bl	8001a08 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA5 PAPin PAPin */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_Outpue___lcd_Pin|GPIO_Out___lcd_Pin;
 800066c:	23f0      	movs	r3, #240	; 0xf0
 800066e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000670:	2301      	movs	r3, #1
 8000672:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000674:	2300      	movs	r3, #0
 8000676:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000678:	2300      	movs	r3, #0
 800067a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800067c:	f107 0314 	add.w	r3, r7, #20
 8000680:	4619      	mov	r1, r3
 8000682:	481f      	ldr	r0, [pc, #124]	; (8000700 <MX_GPIO_Init+0x174>)
 8000684:	f001 f9c0 	bl	8001a08 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = input___button_3_Pin|input___button_2_Pin;
 8000688:	f44f 6381 	mov.w	r3, #1032	; 0x408
 800068c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800068e:	2300      	movs	r3, #0
 8000690:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000692:	2300      	movs	r3, #0
 8000694:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000696:	f107 0314 	add.w	r3, r7, #20
 800069a:	4619      	mov	r1, r3
 800069c:	481a      	ldr	r0, [pc, #104]	; (8000708 <MX_GPIO_Init+0x17c>)
 800069e:	f001 f9b3 	bl	8001a08 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = GPIO_Output___lcd_Pin;
 80006a2:	2380      	movs	r3, #128	; 0x80
 80006a4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006a6:	2301      	movs	r3, #1
 80006a8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006aa:	2300      	movs	r3, #0
 80006ac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006ae:	2300      	movs	r3, #0
 80006b0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIO_Output___lcd_GPIO_Port, &GPIO_InitStruct);
 80006b2:	f107 0314 	add.w	r3, r7, #20
 80006b6:	4619      	mov	r1, r3
 80006b8:	4812      	ldr	r0, [pc, #72]	; (8000704 <MX_GPIO_Init+0x178>)
 80006ba:	f001 f9a5 	bl	8001a08 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = input___button_4_Pin|input___button_1_Pin;
 80006be:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 80006c2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006c4:	2300      	movs	r3, #0
 80006c6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006c8:	2300      	movs	r3, #0
 80006ca:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006cc:	f107 0314 	add.w	r3, r7, #20
 80006d0:	4619      	mov	r1, r3
 80006d2:	480b      	ldr	r0, [pc, #44]	; (8000700 <MX_GPIO_Init+0x174>)
 80006d4:	f001 f998 	bl	8001a08 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = GPIO_Output___lcdB4_Pin|GPIO_Output___lcdB5_Pin|GPIO_Output___lcdB6_Pin;
 80006d8:	2370      	movs	r3, #112	; 0x70
 80006da:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006dc:	2301      	movs	r3, #1
 80006de:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006e0:	2300      	movs	r3, #0
 80006e2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006e4:	2300      	movs	r3, #0
 80006e6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006e8:	f107 0314 	add.w	r3, r7, #20
 80006ec:	4619      	mov	r1, r3
 80006ee:	4806      	ldr	r0, [pc, #24]	; (8000708 <MX_GPIO_Init+0x17c>)
 80006f0:	f001 f98a 	bl	8001a08 <HAL_GPIO_Init>

}
 80006f4:	bf00      	nop
 80006f6:	3728      	adds	r7, #40	; 0x28
 80006f8:	46bd      	mov	sp, r7
 80006fa:	bd80      	pop	{r7, pc}
 80006fc:	40023800 	.word	0x40023800
 8000700:	40020000 	.word	0x40020000
 8000704:	40020800 	.word	0x40020800
 8000708:	40020400 	.word	0x40020400

0800070c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000710:	4b12      	ldr	r3, [pc, #72]	; (800075c <MX_I2C1_Init+0x50>)
 8000712:	4a13      	ldr	r2, [pc, #76]	; (8000760 <MX_I2C1_Init+0x54>)
 8000714:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000716:	4b11      	ldr	r3, [pc, #68]	; (800075c <MX_I2C1_Init+0x50>)
 8000718:	4a12      	ldr	r2, [pc, #72]	; (8000764 <MX_I2C1_Init+0x58>)
 800071a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800071c:	4b0f      	ldr	r3, [pc, #60]	; (800075c <MX_I2C1_Init+0x50>)
 800071e:	2200      	movs	r2, #0
 8000720:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000722:	4b0e      	ldr	r3, [pc, #56]	; (800075c <MX_I2C1_Init+0x50>)
 8000724:	2200      	movs	r2, #0
 8000726:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000728:	4b0c      	ldr	r3, [pc, #48]	; (800075c <MX_I2C1_Init+0x50>)
 800072a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800072e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000730:	4b0a      	ldr	r3, [pc, #40]	; (800075c <MX_I2C1_Init+0x50>)
 8000732:	2200      	movs	r2, #0
 8000734:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000736:	4b09      	ldr	r3, [pc, #36]	; (800075c <MX_I2C1_Init+0x50>)
 8000738:	2200      	movs	r2, #0
 800073a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800073c:	4b07      	ldr	r3, [pc, #28]	; (800075c <MX_I2C1_Init+0x50>)
 800073e:	2200      	movs	r2, #0
 8000740:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000742:	4b06      	ldr	r3, [pc, #24]	; (800075c <MX_I2C1_Init+0x50>)
 8000744:	2200      	movs	r2, #0
 8000746:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000748:	4804      	ldr	r0, [pc, #16]	; (800075c <MX_I2C1_Init+0x50>)
 800074a:	f001 fb13 	bl	8001d74 <HAL_I2C_Init>
 800074e:	4603      	mov	r3, r0
 8000750:	2b00      	cmp	r3, #0
 8000752:	d001      	beq.n	8000758 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000754:	f000 fe62 	bl	800141c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000758:	bf00      	nop
 800075a:	bd80      	pop	{r7, pc}
 800075c:	200000dc 	.word	0x200000dc
 8000760:	40005400 	.word	0x40005400
 8000764:	000186a0 	.word	0x000186a0

08000768 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	b08a      	sub	sp, #40	; 0x28
 800076c:	af00      	add	r7, sp, #0
 800076e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000770:	f107 0314 	add.w	r3, r7, #20
 8000774:	2200      	movs	r2, #0
 8000776:	601a      	str	r2, [r3, #0]
 8000778:	605a      	str	r2, [r3, #4]
 800077a:	609a      	str	r2, [r3, #8]
 800077c:	60da      	str	r2, [r3, #12]
 800077e:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	681b      	ldr	r3, [r3, #0]
 8000784:	4a19      	ldr	r2, [pc, #100]	; (80007ec <HAL_I2C_MspInit+0x84>)
 8000786:	4293      	cmp	r3, r2
 8000788:	d12c      	bne.n	80007e4 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800078a:	2300      	movs	r3, #0
 800078c:	613b      	str	r3, [r7, #16]
 800078e:	4b18      	ldr	r3, [pc, #96]	; (80007f0 <HAL_I2C_MspInit+0x88>)
 8000790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000792:	4a17      	ldr	r2, [pc, #92]	; (80007f0 <HAL_I2C_MspInit+0x88>)
 8000794:	f043 0302 	orr.w	r3, r3, #2
 8000798:	6313      	str	r3, [r2, #48]	; 0x30
 800079a:	4b15      	ldr	r3, [pc, #84]	; (80007f0 <HAL_I2C_MspInit+0x88>)
 800079c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800079e:	f003 0302 	and.w	r3, r3, #2
 80007a2:	613b      	str	r3, [r7, #16]
 80007a4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 80007a6:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80007aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80007ac:	2312      	movs	r3, #18
 80007ae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007b0:	2300      	movs	r3, #0
 80007b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007b4:	2303      	movs	r3, #3
 80007b6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80007b8:	2304      	movs	r3, #4
 80007ba:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007bc:	f107 0314 	add.w	r3, r7, #20
 80007c0:	4619      	mov	r1, r3
 80007c2:	480c      	ldr	r0, [pc, #48]	; (80007f4 <HAL_I2C_MspInit+0x8c>)
 80007c4:	f001 f920 	bl	8001a08 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80007c8:	2300      	movs	r3, #0
 80007ca:	60fb      	str	r3, [r7, #12]
 80007cc:	4b08      	ldr	r3, [pc, #32]	; (80007f0 <HAL_I2C_MspInit+0x88>)
 80007ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007d0:	4a07      	ldr	r2, [pc, #28]	; (80007f0 <HAL_I2C_MspInit+0x88>)
 80007d2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80007d6:	6413      	str	r3, [r2, #64]	; 0x40
 80007d8:	4b05      	ldr	r3, [pc, #20]	; (80007f0 <HAL_I2C_MspInit+0x88>)
 80007da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007dc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80007e0:	60fb      	str	r3, [r7, #12]
 80007e2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80007e4:	bf00      	nop
 80007e6:	3728      	adds	r7, #40	; 0x28
 80007e8:	46bd      	mov	sp, r7
 80007ea:	bd80      	pop	{r7, pc}
 80007ec:	40005400 	.word	0x40005400
 80007f0:	40023800 	.word	0x40023800
 80007f4:	40020400 	.word	0x40020400

080007f8 <Lcd_create>:
 */
Lcd_HandleTypeDef Lcd_create(
		Lcd_PortType port[], Lcd_PinType pin[],
		Lcd_PortType rs_port, Lcd_PinType rs_pin,
		Lcd_PortType en_port, Lcd_PinType en_pin, Lcd_ModeTypeDef mode)
{
 80007f8:	b5b0      	push	{r4, r5, r7, lr}
 80007fa:	b08a      	sub	sp, #40	; 0x28
 80007fc:	af00      	add	r7, sp, #0
 80007fe:	60f8      	str	r0, [r7, #12]
 8000800:	60b9      	str	r1, [r7, #8]
 8000802:	607a      	str	r2, [r7, #4]
 8000804:	603b      	str	r3, [r7, #0]
	Lcd_HandleTypeDef lcd;

	lcd.mode = mode;
 8000806:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 800080a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	lcd.en_pin = en_pin;
 800080e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8000812:	84bb      	strh	r3, [r7, #36]	; 0x24
	lcd.en_port = en_port;
 8000814:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000816:	623b      	str	r3, [r7, #32]

	lcd.rs_pin = rs_pin;
 8000818:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800081a:	83bb      	strh	r3, [r7, #28]
	lcd.rs_port = rs_port;
 800081c:	683b      	ldr	r3, [r7, #0]
 800081e:	61bb      	str	r3, [r7, #24]

	lcd.data_pin = pin;
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	617b      	str	r3, [r7, #20]
	lcd.data_port = port;
 8000824:	68bb      	ldr	r3, [r7, #8]
 8000826:	613b      	str	r3, [r7, #16]

	Lcd_init(&lcd);
 8000828:	f107 0310 	add.w	r3, r7, #16
 800082c:	4618      	mov	r0, r3
 800082e:	f000 f80e 	bl	800084e <Lcd_init>

	return lcd;
 8000832:	68fb      	ldr	r3, [r7, #12]
 8000834:	461d      	mov	r5, r3
 8000836:	f107 0410 	add.w	r4, r7, #16
 800083a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800083c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800083e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000842:	e885 0003 	stmia.w	r5, {r0, r1}
}
 8000846:	68f8      	ldr	r0, [r7, #12]
 8000848:	3728      	adds	r7, #40	; 0x28
 800084a:	46bd      	mov	sp, r7
 800084c:	bdb0      	pop	{r4, r5, r7, pc}

0800084e <Lcd_init>:

/**
 * Initialize 16x2-lcd without cursor
 */
void Lcd_init(Lcd_HandleTypeDef * lcd)
{
 800084e:	b580      	push	{r7, lr}
 8000850:	b082      	sub	sp, #8
 8000852:	af00      	add	r7, sp, #0
 8000854:	6078      	str	r0, [r7, #4]
	if(lcd->mode == LCD_4_BIT_MODE)
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	7d9b      	ldrb	r3, [r3, #22]
 800085a:	2b00      	cmp	r3, #0
 800085c:	d10c      	bne.n	8000878 <Lcd_init+0x2a>
	{
			lcd_write_command(lcd, 0x33);
 800085e:	2133      	movs	r1, #51	; 0x33
 8000860:	6878      	ldr	r0, [r7, #4]
 8000862:	f000 f87b 	bl	800095c <lcd_write_command>
			lcd_write_command(lcd, 0x32);
 8000866:	2132      	movs	r1, #50	; 0x32
 8000868:	6878      	ldr	r0, [r7, #4]
 800086a:	f000 f877 	bl	800095c <lcd_write_command>
			lcd_write_command(lcd, FUNCTION_SET | OPT_N);				// 4-bit mode
 800086e:	2128      	movs	r1, #40	; 0x28
 8000870:	6878      	ldr	r0, [r7, #4]
 8000872:	f000 f873 	bl	800095c <lcd_write_command>
 8000876:	e003      	b.n	8000880 <Lcd_init+0x32>
	}
	else
		lcd_write_command(lcd, FUNCTION_SET | OPT_DL | OPT_N);
 8000878:	2138      	movs	r1, #56	; 0x38
 800087a:	6878      	ldr	r0, [r7, #4]
 800087c:	f000 f86e 	bl	800095c <lcd_write_command>


	lcd_write_command(lcd, CLEAR_DISPLAY);						// Clear screen
 8000880:	2101      	movs	r1, #1
 8000882:	6878      	ldr	r0, [r7, #4]
 8000884:	f000 f86a 	bl	800095c <lcd_write_command>
	lcd_write_command(lcd, DISPLAY_ON_OFF_CONTROL | OPT_D);		// Lcd-on, cursor-off, no-blink
 8000888:	210c      	movs	r1, #12
 800088a:	6878      	ldr	r0, [r7, #4]
 800088c:	f000 f866 	bl	800095c <lcd_write_command>
	lcd_write_command(lcd, ENTRY_MODE_SET | OPT_INC);			// Increment cursor
 8000890:	2106      	movs	r1, #6
 8000892:	6878      	ldr	r0, [r7, #4]
 8000894:	f000 f862 	bl	800095c <lcd_write_command>
}
 8000898:	bf00      	nop
 800089a:	3708      	adds	r7, #8
 800089c:	46bd      	mov	sp, r7
 800089e:	bd80      	pop	{r7, pc}

080008a0 <Lcd_int>:

/**
 * Write a number on the current position
 */
void Lcd_int(Lcd_HandleTypeDef * lcd, int number)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b086      	sub	sp, #24
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	6078      	str	r0, [r7, #4]
 80008a8:	6039      	str	r1, [r7, #0]
	char buffer[11];
	sprintf(buffer, "%d", number);
 80008aa:	f107 030c 	add.w	r3, r7, #12
 80008ae:	683a      	ldr	r2, [r7, #0]
 80008b0:	4906      	ldr	r1, [pc, #24]	; (80008cc <Lcd_int+0x2c>)
 80008b2:	4618      	mov	r0, r3
 80008b4:	f002 fc84 	bl	80031c0 <siprintf>

	Lcd_string(lcd, buffer);
 80008b8:	f107 030c 	add.w	r3, r7, #12
 80008bc:	4619      	mov	r1, r3
 80008be:	6878      	ldr	r0, [r7, #4]
 80008c0:	f000 f806 	bl	80008d0 <Lcd_string>
}
 80008c4:	bf00      	nop
 80008c6:	3718      	adds	r7, #24
 80008c8:	46bd      	mov	sp, r7
 80008ca:	bd80      	pop	{r7, pc}
 80008cc:	08003b20 	.word	0x08003b20

080008d0 <Lcd_string>:

/**
 * Write a string on the current position
 */
void Lcd_string(Lcd_HandleTypeDef * lcd, char * string)
{
 80008d0:	b590      	push	{r4, r7, lr}
 80008d2:	b085      	sub	sp, #20
 80008d4:	af00      	add	r7, sp, #0
 80008d6:	6078      	str	r0, [r7, #4]
 80008d8:	6039      	str	r1, [r7, #0]
	for(uint8_t i = 0; i < strlen(string); i++)
 80008da:	2300      	movs	r3, #0
 80008dc:	73fb      	strb	r3, [r7, #15]
 80008de:	e00a      	b.n	80008f6 <Lcd_string+0x26>
	{
		lcd_write_data(lcd, string[i]);
 80008e0:	7bfb      	ldrb	r3, [r7, #15]
 80008e2:	683a      	ldr	r2, [r7, #0]
 80008e4:	4413      	add	r3, r2
 80008e6:	781b      	ldrb	r3, [r3, #0]
 80008e8:	4619      	mov	r1, r3
 80008ea:	6878      	ldr	r0, [r7, #4]
 80008ec:	f000 f864 	bl	80009b8 <lcd_write_data>
	for(uint8_t i = 0; i < strlen(string); i++)
 80008f0:	7bfb      	ldrb	r3, [r7, #15]
 80008f2:	3301      	adds	r3, #1
 80008f4:	73fb      	strb	r3, [r7, #15]
 80008f6:	7bfc      	ldrb	r4, [r7, #15]
 80008f8:	6838      	ldr	r0, [r7, #0]
 80008fa:	f7ff fc71 	bl	80001e0 <strlen>
 80008fe:	4603      	mov	r3, r0
 8000900:	429c      	cmp	r4, r3
 8000902:	d3ed      	bcc.n	80008e0 <Lcd_string+0x10>
	}
}
 8000904:	bf00      	nop
 8000906:	bf00      	nop
 8000908:	3714      	adds	r7, #20
 800090a:	46bd      	mov	sp, r7
 800090c:	bd90      	pop	{r4, r7, pc}
	...

08000910 <Lcd_cursor>:

/**
 * Set the cursor position
 */
void Lcd_cursor(Lcd_HandleTypeDef * lcd, uint8_t row, uint8_t col)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	b082      	sub	sp, #8
 8000914:	af00      	add	r7, sp, #0
 8000916:	6078      	str	r0, [r7, #4]
 8000918:	460b      	mov	r3, r1
 800091a:	70fb      	strb	r3, [r7, #3]
 800091c:	4613      	mov	r3, r2
 800091e:	70bb      	strb	r3, [r7, #2]
	#ifdef LCD20xN
	lcd_write_command(lcd, SET_DDRAM_ADDR + ROW_20[row] + col);
	#endif

	#ifdef LCD16xN
	lcd_write_command(lcd, SET_DDRAM_ADDR + ROW_16[row] + col);
 8000920:	78fb      	ldrb	r3, [r7, #3]
 8000922:	4a07      	ldr	r2, [pc, #28]	; (8000940 <Lcd_cursor+0x30>)
 8000924:	5cd2      	ldrb	r2, [r2, r3]
 8000926:	78bb      	ldrb	r3, [r7, #2]
 8000928:	4413      	add	r3, r2
 800092a:	b2db      	uxtb	r3, r3
 800092c:	3b80      	subs	r3, #128	; 0x80
 800092e:	b2db      	uxtb	r3, r3
 8000930:	4619      	mov	r1, r3
 8000932:	6878      	ldr	r0, [r7, #4]
 8000934:	f000 f812 	bl	800095c <lcd_write_command>
	#endif
}
 8000938:	bf00      	nop
 800093a:	3708      	adds	r7, #8
 800093c:	46bd      	mov	sp, r7
 800093e:	bd80      	pop	{r7, pc}
 8000940:	08003b90 	.word	0x08003b90

08000944 <Lcd_clear>:

/**
 * Clear the screen
 */
void Lcd_clear(Lcd_HandleTypeDef * lcd) {
 8000944:	b580      	push	{r7, lr}
 8000946:	b082      	sub	sp, #8
 8000948:	af00      	add	r7, sp, #0
 800094a:	6078      	str	r0, [r7, #4]
	lcd_write_command(lcd, CLEAR_DISPLAY);
 800094c:	2101      	movs	r1, #1
 800094e:	6878      	ldr	r0, [r7, #4]
 8000950:	f000 f804 	bl	800095c <lcd_write_command>
}
 8000954:	bf00      	nop
 8000956:	3708      	adds	r7, #8
 8000958:	46bd      	mov	sp, r7
 800095a:	bd80      	pop	{r7, pc}

0800095c <lcd_write_command>:

/**
 * Write a byte to the command register
 */
void lcd_write_command(Lcd_HandleTypeDef * lcd, uint8_t command)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	b082      	sub	sp, #8
 8000960:	af00      	add	r7, sp, #0
 8000962:	6078      	str	r0, [r7, #4]
 8000964:	460b      	mov	r3, r1
 8000966:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(lcd->rs_port, lcd->rs_pin, LCD_COMMAND_REG);		// Write to command register
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	6898      	ldr	r0, [r3, #8]
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	899b      	ldrh	r3, [r3, #12]
 8000970:	2200      	movs	r2, #0
 8000972:	4619      	mov	r1, r3
 8000974:	f001 f9e4 	bl	8001d40 <HAL_GPIO_WritePin>

	if(lcd->mode == LCD_4_BIT_MODE)
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	7d9b      	ldrb	r3, [r3, #22]
 800097c:	2b00      	cmp	r3, #0
 800097e:	d111      	bne.n	80009a4 <lcd_write_command+0x48>
	{
		lcd_write(lcd, (command >> 4), LCD_NIB);
 8000980:	78fb      	ldrb	r3, [r7, #3]
 8000982:	091b      	lsrs	r3, r3, #4
 8000984:	b2db      	uxtb	r3, r3
 8000986:	2204      	movs	r2, #4
 8000988:	4619      	mov	r1, r3
 800098a:	6878      	ldr	r0, [r7, #4]
 800098c:	f000 f842 	bl	8000a14 <lcd_write>
		lcd_write(lcd, command & 0x0F, LCD_NIB);
 8000990:	78fb      	ldrb	r3, [r7, #3]
 8000992:	f003 030f 	and.w	r3, r3, #15
 8000996:	b2db      	uxtb	r3, r3
 8000998:	2204      	movs	r2, #4
 800099a:	4619      	mov	r1, r3
 800099c:	6878      	ldr	r0, [r7, #4]
 800099e:	f000 f839 	bl	8000a14 <lcd_write>
	else
	{
		lcd_write(lcd, command, LCD_BYTE);
	}

}
 80009a2:	e005      	b.n	80009b0 <lcd_write_command+0x54>
		lcd_write(lcd, command, LCD_BYTE);
 80009a4:	78fb      	ldrb	r3, [r7, #3]
 80009a6:	2208      	movs	r2, #8
 80009a8:	4619      	mov	r1, r3
 80009aa:	6878      	ldr	r0, [r7, #4]
 80009ac:	f000 f832 	bl	8000a14 <lcd_write>
}
 80009b0:	bf00      	nop
 80009b2:	3708      	adds	r7, #8
 80009b4:	46bd      	mov	sp, r7
 80009b6:	bd80      	pop	{r7, pc}

080009b8 <lcd_write_data>:

/**
 * Write a byte to the data register
 */
void lcd_write_data(Lcd_HandleTypeDef * lcd, uint8_t data)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b082      	sub	sp, #8
 80009bc:	af00      	add	r7, sp, #0
 80009be:	6078      	str	r0, [r7, #4]
 80009c0:	460b      	mov	r3, r1
 80009c2:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(lcd->rs_port, lcd->rs_pin, LCD_DATA_REG);			// Write to data register
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	6898      	ldr	r0, [r3, #8]
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	899b      	ldrh	r3, [r3, #12]
 80009cc:	2201      	movs	r2, #1
 80009ce:	4619      	mov	r1, r3
 80009d0:	f001 f9b6 	bl	8001d40 <HAL_GPIO_WritePin>

	if(lcd->mode == LCD_4_BIT_MODE)
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	7d9b      	ldrb	r3, [r3, #22]
 80009d8:	2b00      	cmp	r3, #0
 80009da:	d111      	bne.n	8000a00 <lcd_write_data+0x48>
	{
		lcd_write(lcd, data >> 4, LCD_NIB);
 80009dc:	78fb      	ldrb	r3, [r7, #3]
 80009de:	091b      	lsrs	r3, r3, #4
 80009e0:	b2db      	uxtb	r3, r3
 80009e2:	2204      	movs	r2, #4
 80009e4:	4619      	mov	r1, r3
 80009e6:	6878      	ldr	r0, [r7, #4]
 80009e8:	f000 f814 	bl	8000a14 <lcd_write>
		lcd_write(lcd, data & 0x0F, LCD_NIB);
 80009ec:	78fb      	ldrb	r3, [r7, #3]
 80009ee:	f003 030f 	and.w	r3, r3, #15
 80009f2:	b2db      	uxtb	r3, r3
 80009f4:	2204      	movs	r2, #4
 80009f6:	4619      	mov	r1, r3
 80009f8:	6878      	ldr	r0, [r7, #4]
 80009fa:	f000 f80b 	bl	8000a14 <lcd_write>
	else
	{
		lcd_write(lcd, data, LCD_BYTE);
	}

}
 80009fe:	e005      	b.n	8000a0c <lcd_write_data+0x54>
		lcd_write(lcd, data, LCD_BYTE);
 8000a00:	78fb      	ldrb	r3, [r7, #3]
 8000a02:	2208      	movs	r2, #8
 8000a04:	4619      	mov	r1, r3
 8000a06:	6878      	ldr	r0, [r7, #4]
 8000a08:	f000 f804 	bl	8000a14 <lcd_write>
}
 8000a0c:	bf00      	nop
 8000a0e:	3708      	adds	r7, #8
 8000a10:	46bd      	mov	sp, r7
 8000a12:	bd80      	pop	{r7, pc}

08000a14 <lcd_write>:

/**
 * Set len bits on the bus and toggle the enable line
 */
void lcd_write(Lcd_HandleTypeDef * lcd, uint8_t data, uint8_t len)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b084      	sub	sp, #16
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	6078      	str	r0, [r7, #4]
 8000a1c:	460b      	mov	r3, r1
 8000a1e:	70fb      	strb	r3, [r7, #3]
 8000a20:	4613      	mov	r3, r2
 8000a22:	70bb      	strb	r3, [r7, #2]
	for(uint8_t i = 0; i < len; i++)
 8000a24:	2300      	movs	r3, #0
 8000a26:	73fb      	strb	r3, [r7, #15]
 8000a28:	e019      	b.n	8000a5e <lcd_write+0x4a>
	{
		HAL_GPIO_WritePin(lcd->data_port[i], lcd->data_pin[i], (data >> i) & 0x01);
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	681a      	ldr	r2, [r3, #0]
 8000a2e:	7bfb      	ldrb	r3, [r7, #15]
 8000a30:	009b      	lsls	r3, r3, #2
 8000a32:	4413      	add	r3, r2
 8000a34:	6818      	ldr	r0, [r3, #0]
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	685a      	ldr	r2, [r3, #4]
 8000a3a:	7bfb      	ldrb	r3, [r7, #15]
 8000a3c:	005b      	lsls	r3, r3, #1
 8000a3e:	4413      	add	r3, r2
 8000a40:	8819      	ldrh	r1, [r3, #0]
 8000a42:	78fa      	ldrb	r2, [r7, #3]
 8000a44:	7bfb      	ldrb	r3, [r7, #15]
 8000a46:	fa42 f303 	asr.w	r3, r2, r3
 8000a4a:	b2db      	uxtb	r3, r3
 8000a4c:	f003 0301 	and.w	r3, r3, #1
 8000a50:	b2db      	uxtb	r3, r3
 8000a52:	461a      	mov	r2, r3
 8000a54:	f001 f974 	bl	8001d40 <HAL_GPIO_WritePin>
	for(uint8_t i = 0; i < len; i++)
 8000a58:	7bfb      	ldrb	r3, [r7, #15]
 8000a5a:	3301      	adds	r3, #1
 8000a5c:	73fb      	strb	r3, [r7, #15]
 8000a5e:	7bfa      	ldrb	r2, [r7, #15]
 8000a60:	78bb      	ldrb	r3, [r7, #2]
 8000a62:	429a      	cmp	r2, r3
 8000a64:	d3e1      	bcc.n	8000a2a <lcd_write+0x16>
	}

	HAL_GPIO_WritePin(lcd->en_port, lcd->en_pin, 1);
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	6918      	ldr	r0, [r3, #16]
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	8a9b      	ldrh	r3, [r3, #20]
 8000a6e:	2201      	movs	r2, #1
 8000a70:	4619      	mov	r1, r3
 8000a72:	f001 f965 	bl	8001d40 <HAL_GPIO_WritePin>
	DELAY(1);
 8000a76:	2001      	movs	r0, #1
 8000a78:	f000 febc 	bl	80017f4 <HAL_Delay>
	HAL_GPIO_WritePin(lcd->en_port, lcd->en_pin, 0); 		// Data receive on falling edge
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	6918      	ldr	r0, [r3, #16]
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	8a9b      	ldrh	r3, [r3, #20]
 8000a84:	2200      	movs	r2, #0
 8000a86:	4619      	mov	r1, r3
 8000a88:	f001 f95a 	bl	8001d40 <HAL_GPIO_WritePin>
}
 8000a8c:	bf00      	nop
 8000a8e:	3710      	adds	r7, #16
 8000a90:	46bd      	mov	sp, r7
 8000a92:	bd80      	pop	{r7, pc}

08000a94 <set_speaker_state>:

// ---
void set_speaker_state(bool);


void set_speaker_state(bool state){
 8000a94:	b480      	push	{r7}
 8000a96:	b083      	sub	sp, #12
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	4603      	mov	r3, r0
 8000a9c:	71fb      	strb	r3, [r7, #7]
	SPEAKER_ACTIVE = state;
 8000a9e:	4a0d      	ldr	r2, [pc, #52]	; (8000ad4 <set_speaker_state+0x40>)
 8000aa0:	79fb      	ldrb	r3, [r7, #7]
 8000aa2:	7013      	strb	r3, [r2, #0]
	SPEAKER_ACTIVE_START_TIME = CURRENT_TIME;
 8000aa4:	4b0c      	ldr	r3, [pc, #48]	; (8000ad8 <set_speaker_state+0x44>)
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	461a      	mov	r2, r3
 8000aaa:	4b0c      	ldr	r3, [pc, #48]	; (8000adc <set_speaker_state+0x48>)
 8000aac:	601a      	str	r2, [r3, #0]
	// check if active
	if(state){
 8000aae:	79fb      	ldrb	r3, [r7, #7]
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	d005      	beq.n	8000ac0 <set_speaker_state+0x2c>
		htim2.Instance->CCR1 = SPEAKER_HERTZ;
 8000ab4:	4b0a      	ldr	r3, [pc, #40]	; (8000ae0 <set_speaker_state+0x4c>)
 8000ab6:	681a      	ldr	r2, [r3, #0]
 8000ab8:	4b0a      	ldr	r3, [pc, #40]	; (8000ae4 <set_speaker_state+0x50>)
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	635a      	str	r2, [r3, #52]	; 0x34
	}else{
		htim2.Instance->CCR1 = 0;
	}
}
 8000abe:	e003      	b.n	8000ac8 <set_speaker_state+0x34>
		htim2.Instance->CCR1 = 0;
 8000ac0:	4b08      	ldr	r3, [pc, #32]	; (8000ae4 <set_speaker_state+0x50>)
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000ac8:	bf00      	nop
 8000aca:	370c      	adds	r7, #12
 8000acc:	46bd      	mov	sp, r7
 8000ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad2:	4770      	bx	lr
 8000ad4:	20000158 	.word	0x20000158
 8000ad8:	20000134 	.word	0x20000134
 8000adc:	2000015c 	.word	0x2000015c
 8000ae0:	20000060 	.word	0x20000060
 8000ae4:	20000184 	.word	0x20000184

08000ae8 <set_alarm>:
	HAS_TIMER = true;
	int a = data[0], b = data[1], c = data[2];
	set_alarm(a, b, c);
}

void set_alarm(int ss, int mm, int hh){
 8000ae8:	b480      	push	{r7}
 8000aea:	b085      	sub	sp, #20
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	60f8      	str	r0, [r7, #12]
 8000af0:	60b9      	str	r1, [r7, #8]
 8000af2:	607a      	str	r2, [r7, #4]
	HAS_TIMER = true;
 8000af4:	4b38      	ldr	r3, [pc, #224]	; (8000bd8 <set_alarm+0xf0>)
 8000af6:	2201      	movs	r2, #1
 8000af8:	701a      	strb	r2, [r3, #0]
	ALARM[SEC] = ss;
 8000afa:	2100      	movs	r1, #0
 8000afc:	4a37      	ldr	r2, [pc, #220]	; (8000bdc <set_alarm+0xf4>)
 8000afe:	68fb      	ldr	r3, [r7, #12]
 8000b00:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	ALARM[MIN] = mm;
 8000b04:	2101      	movs	r1, #1
 8000b06:	4a35      	ldr	r2, [pc, #212]	; (8000bdc <set_alarm+0xf4>)
 8000b08:	68bb      	ldr	r3, [r7, #8]
 8000b0a:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	ALARM[HRR] = hh;
 8000b0e:	2102      	movs	r1, #2
 8000b10:	4a32      	ldr	r2, [pc, #200]	; (8000bdc <set_alarm+0xf4>)
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	// set the rest to be next day and current year / month
	// if next day is greater than month limit, and if next month is greater than year limit
	// move to next year, first day
	if(CLOCK[DAY] + 1 > D_MONTHS[CLOCK[MON]]){
 8000b18:	2203      	movs	r2, #3
 8000b1a:	4b31      	ldr	r3, [pc, #196]	; (8000be0 <set_alarm+0xf8>)
 8000b1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000b20:	3301      	adds	r3, #1
 8000b22:	4619      	mov	r1, r3
 8000b24:	2204      	movs	r2, #4
 8000b26:	4b2e      	ldr	r3, [pc, #184]	; (8000be0 <set_alarm+0xf8>)
 8000b28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000b2c:	4a2d      	ldr	r2, [pc, #180]	; (8000be4 <set_alarm+0xfc>)
 8000b2e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b32:	4299      	cmp	r1, r3
 8000b34:	d931      	bls.n	8000b9a <set_alarm+0xb2>
		// check if new year
		if(CLOCK[MON] + 1 > 12){
 8000b36:	2204      	movs	r2, #4
 8000b38:	4b29      	ldr	r3, [pc, #164]	; (8000be0 <set_alarm+0xf8>)
 8000b3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000b3e:	2b0b      	cmp	r3, #11
 8000b40:	dd14      	ble.n	8000b6c <set_alarm+0x84>
			ALARM[YRR] = CLOCK[YRR] + 1;
 8000b42:	2205      	movs	r2, #5
 8000b44:	4b26      	ldr	r3, [pc, #152]	; (8000be0 <set_alarm+0xf8>)
 8000b46:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000b4a:	2105      	movs	r1, #5
 8000b4c:	3301      	adds	r3, #1
 8000b4e:	4a23      	ldr	r2, [pc, #140]	; (8000bdc <set_alarm+0xf4>)
 8000b50:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
			ALARM[MON] = JAN;
 8000b54:	2300      	movs	r3, #0
 8000b56:	2204      	movs	r2, #4
 8000b58:	4619      	mov	r1, r3
 8000b5a:	4b20      	ldr	r3, [pc, #128]	; (8000bdc <set_alarm+0xf4>)
 8000b5c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			ALARM[DAY] = 1;
 8000b60:	2203      	movs	r2, #3
 8000b62:	4b1e      	ldr	r3, [pc, #120]	; (8000bdc <set_alarm+0xf4>)
 8000b64:	2101      	movs	r1, #1
 8000b66:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		// if NOT illegal, just move to next day
		ALARM[YRR] = CLOCK[YRR];
		ALARM[MON] = CLOCK[MON];
		ALARM[DAY] = CLOCK[DAY] + 1;
	}
}
 8000b6a:	e02f      	b.n	8000bcc <set_alarm+0xe4>
			ALARM[YRR] = CLOCK[YRR];
 8000b6c:	2205      	movs	r2, #5
 8000b6e:	2105      	movs	r1, #5
 8000b70:	4b1b      	ldr	r3, [pc, #108]	; (8000be0 <set_alarm+0xf8>)
 8000b72:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000b76:	4a19      	ldr	r2, [pc, #100]	; (8000bdc <set_alarm+0xf4>)
 8000b78:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
			ALARM[MON] = CLOCK[MON] + 1;
 8000b7c:	2204      	movs	r2, #4
 8000b7e:	4b18      	ldr	r3, [pc, #96]	; (8000be0 <set_alarm+0xf8>)
 8000b80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000b84:	2104      	movs	r1, #4
 8000b86:	3301      	adds	r3, #1
 8000b88:	4a14      	ldr	r2, [pc, #80]	; (8000bdc <set_alarm+0xf4>)
 8000b8a:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
			ALARM[DAY] = 1;
 8000b8e:	2203      	movs	r2, #3
 8000b90:	4b12      	ldr	r3, [pc, #72]	; (8000bdc <set_alarm+0xf4>)
 8000b92:	2101      	movs	r1, #1
 8000b94:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 8000b98:	e018      	b.n	8000bcc <set_alarm+0xe4>
		ALARM[YRR] = CLOCK[YRR];
 8000b9a:	2205      	movs	r2, #5
 8000b9c:	2105      	movs	r1, #5
 8000b9e:	4b10      	ldr	r3, [pc, #64]	; (8000be0 <set_alarm+0xf8>)
 8000ba0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ba4:	4a0d      	ldr	r2, [pc, #52]	; (8000bdc <set_alarm+0xf4>)
 8000ba6:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
		ALARM[MON] = CLOCK[MON];
 8000baa:	2204      	movs	r2, #4
 8000bac:	2104      	movs	r1, #4
 8000bae:	4b0c      	ldr	r3, [pc, #48]	; (8000be0 <set_alarm+0xf8>)
 8000bb0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000bb4:	4a09      	ldr	r2, [pc, #36]	; (8000bdc <set_alarm+0xf4>)
 8000bb6:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
		ALARM[DAY] = CLOCK[DAY] + 1;
 8000bba:	2203      	movs	r2, #3
 8000bbc:	4b08      	ldr	r3, [pc, #32]	; (8000be0 <set_alarm+0xf8>)
 8000bbe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000bc2:	2103      	movs	r1, #3
 8000bc4:	3301      	adds	r3, #1
 8000bc6:	4a05      	ldr	r2, [pc, #20]	; (8000bdc <set_alarm+0xf4>)
 8000bc8:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
}
 8000bcc:	bf00      	nop
 8000bce:	3714      	adds	r7, #20
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd6:	4770      	bx	lr
 8000bd8:	20000178 	.word	0x20000178
 8000bdc:	20000160 	.word	0x20000160
 8000be0:	20000140 	.word	0x20000140
 8000be4:	20000000 	.word	0x20000000

08000be8 <set_clock_time_arr>:
	for (int i = 0; i < CLOCK_SIZE; i++){
		ALARM[i] = 0;
	}
}

void set_clock_time_arr(int* time){
 8000be8:	b480      	push	{r7}
 8000bea:	b085      	sub	sp, #20
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	6078      	str	r0, [r7, #4]
	for(int i = 0; i < CLOCK_SIZE; i++){
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	60fb      	str	r3, [r7, #12]
 8000bf4:	e00b      	b.n	8000c0e <set_clock_time_arr+0x26>
		CLOCK[i] = time[i];
 8000bf6:	68fb      	ldr	r3, [r7, #12]
 8000bf8:	009b      	lsls	r3, r3, #2
 8000bfa:	687a      	ldr	r2, [r7, #4]
 8000bfc:	4413      	add	r3, r2
 8000bfe:	681a      	ldr	r2, [r3, #0]
 8000c00:	4908      	ldr	r1, [pc, #32]	; (8000c24 <set_clock_time_arr+0x3c>)
 8000c02:	68fb      	ldr	r3, [r7, #12]
 8000c04:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for(int i = 0; i < CLOCK_SIZE; i++){
 8000c08:	68fb      	ldr	r3, [r7, #12]
 8000c0a:	3301      	adds	r3, #1
 8000c0c:	60fb      	str	r3, [r7, #12]
 8000c0e:	68fb      	ldr	r3, [r7, #12]
 8000c10:	2206      	movs	r2, #6
 8000c12:	4293      	cmp	r3, r2
 8000c14:	d3ef      	bcc.n	8000bf6 <set_clock_time_arr+0xe>
	}
}
 8000c16:	bf00      	nop
 8000c18:	bf00      	nop
 8000c1a:	3714      	adds	r7, #20
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c22:	4770      	bx	lr
 8000c24:	20000140 	.word	0x20000140

08000c28 <second_update_clock>:
	CLOCK[DAY] = DD;
	CLOCK[MON] = MM;
	CLOCK[YRR] = YY;
}

void second_update_clock(int* clock){
 8000c28:	b480      	push	{r7}
 8000c2a:	b083      	sub	sp, #12
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	6078      	str	r0, [r7, #4]
	// if ms > 1000ms  / 1 s
	if(DELTA_TIME < 1000) return;
 8000c30:	4b55      	ldr	r3, [pc, #340]	; (8000d88 <second_update_clock+0x160>)
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000c38:	f0c0 80a0 	bcc.w	8000d7c <second_update_clock+0x154>
	DELTA_TIME -= 1000;
 8000c3c:	4b52      	ldr	r3, [pc, #328]	; (8000d88 <second_update_clock+0x160>)
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 8000c44:	4a50      	ldr	r2, [pc, #320]	; (8000d88 <second_update_clock+0x160>)
 8000c46:	6013      	str	r3, [r2, #0]
	clock[SEC] ++;
 8000c48:	2300      	movs	r3, #0
 8000c4a:	009b      	lsls	r3, r3, #2
 8000c4c:	687a      	ldr	r2, [r7, #4]
 8000c4e:	4413      	add	r3, r2
 8000c50:	681a      	ldr	r2, [r3, #0]
 8000c52:	3201      	adds	r2, #1
 8000c54:	601a      	str	r2, [r3, #0]
	// end
	if(clock[SEC] >= 60){
 8000c56:	2300      	movs	r3, #0
 8000c58:	009b      	lsls	r3, r3, #2
 8000c5a:	687a      	ldr	r2, [r7, #4]
 8000c5c:	4413      	add	r3, r2
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	2b3b      	cmp	r3, #59	; 0x3b
 8000c62:	dd0c      	ble.n	8000c7e <second_update_clock+0x56>
		clock[SEC] = 0;
 8000c64:	2300      	movs	r3, #0
 8000c66:	009b      	lsls	r3, r3, #2
 8000c68:	687a      	ldr	r2, [r7, #4]
 8000c6a:	4413      	add	r3, r2
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	601a      	str	r2, [r3, #0]
		clock[MIN] ++;
 8000c70:	2301      	movs	r3, #1
 8000c72:	009b      	lsls	r3, r3, #2
 8000c74:	687a      	ldr	r2, [r7, #4]
 8000c76:	4413      	add	r3, r2
 8000c78:	681a      	ldr	r2, [r3, #0]
 8000c7a:	3201      	adds	r2, #1
 8000c7c:	601a      	str	r2, [r3, #0]
	}
	if(clock[MIN] >= 60){
 8000c7e:	2301      	movs	r3, #1
 8000c80:	009b      	lsls	r3, r3, #2
 8000c82:	687a      	ldr	r2, [r7, #4]
 8000c84:	4413      	add	r3, r2
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	2b3b      	cmp	r3, #59	; 0x3b
 8000c8a:	dd0c      	ble.n	8000ca6 <second_update_clock+0x7e>
		clock[MIN] = 0;
 8000c8c:	2301      	movs	r3, #1
 8000c8e:	009b      	lsls	r3, r3, #2
 8000c90:	687a      	ldr	r2, [r7, #4]
 8000c92:	4413      	add	r3, r2
 8000c94:	2200      	movs	r2, #0
 8000c96:	601a      	str	r2, [r3, #0]
		clock[HRR]++;
 8000c98:	2302      	movs	r3, #2
 8000c9a:	009b      	lsls	r3, r3, #2
 8000c9c:	687a      	ldr	r2, [r7, #4]
 8000c9e:	4413      	add	r3, r2
 8000ca0:	681a      	ldr	r2, [r3, #0]
 8000ca2:	3201      	adds	r2, #1
 8000ca4:	601a      	str	r2, [r3, #0]
	}
	if(clock[HRR] >= 24){
 8000ca6:	2302      	movs	r3, #2
 8000ca8:	009b      	lsls	r3, r3, #2
 8000caa:	687a      	ldr	r2, [r7, #4]
 8000cac:	4413      	add	r3, r2
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	2b17      	cmp	r3, #23
 8000cb2:	dd0c      	ble.n	8000cce <second_update_clock+0xa6>
		clock[HRR] = 0;
 8000cb4:	2302      	movs	r3, #2
 8000cb6:	009b      	lsls	r3, r3, #2
 8000cb8:	687a      	ldr	r2, [r7, #4]
 8000cba:	4413      	add	r3, r2
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	601a      	str	r2, [r3, #0]
		clock[DAY]++;
 8000cc0:	2303      	movs	r3, #3
 8000cc2:	009b      	lsls	r3, r3, #2
 8000cc4:	687a      	ldr	r2, [r7, #4]
 8000cc6:	4413      	add	r3, r2
 8000cc8:	681a      	ldr	r2, [r3, #0]
 8000cca:	3201      	adds	r2, #1
 8000ccc:	601a      	str	r2, [r3, #0]
	}
	//c check if feb / leap year and is feb
	if(clock[YRR]% 4 == 0 && clock[MON]== 2){
 8000cce:	2305      	movs	r3, #5
 8000cd0:	009b      	lsls	r3, r3, #2
 8000cd2:	687a      	ldr	r2, [r7, #4]
 8000cd4:	4413      	add	r3, r2
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	f003 0303 	and.w	r3, r3, #3
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d11b      	bne.n	8000d18 <second_update_clock+0xf0>
 8000ce0:	2304      	movs	r3, #4
 8000ce2:	009b      	lsls	r3, r3, #2
 8000ce4:	687a      	ldr	r2, [r7, #4]
 8000ce6:	4413      	add	r3, r2
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	2b02      	cmp	r3, #2
 8000cec:	d114      	bne.n	8000d18 <second_update_clock+0xf0>
		if(clock[DAY] >= 29){
 8000cee:	2303      	movs	r3, #3
 8000cf0:	009b      	lsls	r3, r3, #2
 8000cf2:	687a      	ldr	r2, [r7, #4]
 8000cf4:	4413      	add	r3, r2
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	2b1c      	cmp	r3, #28
 8000cfa:	dd2a      	ble.n	8000d52 <second_update_clock+0x12a>
			clock[DAY] = 1;
 8000cfc:	2303      	movs	r3, #3
 8000cfe:	009b      	lsls	r3, r3, #2
 8000d00:	687a      	ldr	r2, [r7, #4]
 8000d02:	4413      	add	r3, r2
 8000d04:	2201      	movs	r2, #1
 8000d06:	601a      	str	r2, [r3, #0]
			clock[MON]++;
 8000d08:	2304      	movs	r3, #4
 8000d0a:	009b      	lsls	r3, r3, #2
 8000d0c:	687a      	ldr	r2, [r7, #4]
 8000d0e:	4413      	add	r3, r2
 8000d10:	681a      	ldr	r2, [r3, #0]
 8000d12:	3201      	adds	r2, #1
 8000d14:	601a      	str	r2, [r3, #0]
		if(clock[DAY] >= 29){
 8000d16:	e01c      	b.n	8000d52 <second_update_clock+0x12a>
		}
	}else{
		// if not a leap year - do a normal check
		if(clock[DAY] >= D_MONTHS[clock[MON]]){
 8000d18:	2303      	movs	r3, #3
 8000d1a:	009b      	lsls	r3, r3, #2
 8000d1c:	687a      	ldr	r2, [r7, #4]
 8000d1e:	4413      	add	r3, r2
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	4619      	mov	r1, r3
 8000d24:	2304      	movs	r3, #4
 8000d26:	009b      	lsls	r3, r3, #2
 8000d28:	687a      	ldr	r2, [r7, #4]
 8000d2a:	4413      	add	r3, r2
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	4a17      	ldr	r2, [pc, #92]	; (8000d8c <second_update_clock+0x164>)
 8000d30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d34:	4299      	cmp	r1, r3
 8000d36:	d30c      	bcc.n	8000d52 <second_update_clock+0x12a>
			clock[DAY] = 1;
 8000d38:	2303      	movs	r3, #3
 8000d3a:	009b      	lsls	r3, r3, #2
 8000d3c:	687a      	ldr	r2, [r7, #4]
 8000d3e:	4413      	add	r3, r2
 8000d40:	2201      	movs	r2, #1
 8000d42:	601a      	str	r2, [r3, #0]
			clock[MON]++;
 8000d44:	2304      	movs	r3, #4
 8000d46:	009b      	lsls	r3, r3, #2
 8000d48:	687a      	ldr	r2, [r7, #4]
 8000d4a:	4413      	add	r3, r2
 8000d4c:	681a      	ldr	r2, [r3, #0]
 8000d4e:	3201      	adds	r2, #1
 8000d50:	601a      	str	r2, [r3, #0]
		}
	}
	if(clock[MON] >= 12){
 8000d52:	2304      	movs	r3, #4
 8000d54:	009b      	lsls	r3, r3, #2
 8000d56:	687a      	ldr	r2, [r7, #4]
 8000d58:	4413      	add	r3, r2
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	2b0b      	cmp	r3, #11
 8000d5e:	dd0e      	ble.n	8000d7e <second_update_clock+0x156>
		clock[MON]= 1;
 8000d60:	2304      	movs	r3, #4
 8000d62:	009b      	lsls	r3, r3, #2
 8000d64:	687a      	ldr	r2, [r7, #4]
 8000d66:	4413      	add	r3, r2
 8000d68:	2201      	movs	r2, #1
 8000d6a:	601a      	str	r2, [r3, #0]
		clock[YRR]++;
 8000d6c:	2305      	movs	r3, #5
 8000d6e:	009b      	lsls	r3, r3, #2
 8000d70:	687a      	ldr	r2, [r7, #4]
 8000d72:	4413      	add	r3, r2
 8000d74:	681a      	ldr	r2, [r3, #0]
 8000d76:	3201      	adds	r2, #1
 8000d78:	601a      	str	r2, [r3, #0]
 8000d7a:	e000      	b.n	8000d7e <second_update_clock+0x156>
	if(DELTA_TIME < 1000) return;
 8000d7c:	bf00      	nop
	}
}
 8000d7e:	370c      	adds	r7, #12
 8000d80:	46bd      	mov	sp, r7
 8000d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d86:	4770      	bx	lr
 8000d88:	2000013c 	.word	0x2000013c
 8000d8c:	20000000 	.word	0x20000000

08000d90 <display_default>:
	Lcd_int(lcd, data2);

	// end
}

void display_default(Lcd_HandleTypeDef* lcd){
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b084      	sub	sp, #16
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	6078      	str	r0, [r7, #4]



	// --- output first row
	// output month
	Lcd_cursor(lcd, 0, 0);
 8000d98:	2200      	movs	r2, #0
 8000d9a:	2100      	movs	r1, #0
 8000d9c:	6878      	ldr	r0, [r7, #4]
 8000d9e:	f7ff fdb7 	bl	8000910 <Lcd_cursor>
	Lcd_string(lcd, M_STRING[CLOCK[MON]]);
 8000da2:	2204      	movs	r2, #4
 8000da4:	4b95      	ldr	r3, [pc, #596]	; (8000ffc <display_default+0x26c>)
 8000da6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000daa:	4a95      	ldr	r2, [pc, #596]	; (8001000 <display_default+0x270>)
 8000dac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000db0:	4619      	mov	r1, r3
 8000db2:	6878      	ldr	r0, [r7, #4]
 8000db4:	f7ff fd8c 	bl	80008d0 <Lcd_string>
	// output day
	Lcd_cursor(lcd, 0, 4);
 8000db8:	2204      	movs	r2, #4
 8000dba:	2100      	movs	r1, #0
 8000dbc:	6878      	ldr	r0, [r7, #4]
 8000dbe:	f7ff fda7 	bl	8000910 <Lcd_cursor>
	Lcd_int(lcd, CLOCK[DAY]);
 8000dc2:	2203      	movs	r2, #3
 8000dc4:	4b8d      	ldr	r3, [pc, #564]	; (8000ffc <display_default+0x26c>)
 8000dc6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000dca:	4619      	mov	r1, r3
 8000dcc:	6878      	ldr	r0, [r7, #4]
 8000dce:	f7ff fd67 	bl	80008a0 <Lcd_int>

	// find align right position
	int aleft = get_display_pos(A_RIGHT, 7);
 8000dd2:	2302      	movs	r3, #2
 8000dd4:	2107      	movs	r1, #7
 8000dd6:	4618      	mov	r0, r3
 8000dd8:	f000 f91e 	bl	8001018 <get_display_pos>
 8000ddc:	60f8      	str	r0, [r7, #12]

	// output hours
	Lcd_cursor(lcd, 0, aleft);
 8000dde:	68fb      	ldr	r3, [r7, #12]
 8000de0:	b2db      	uxtb	r3, r3
 8000de2:	461a      	mov	r2, r3
 8000de4:	2100      	movs	r1, #0
 8000de6:	6878      	ldr	r0, [r7, #4]
 8000de8:	f7ff fd92 	bl	8000910 <Lcd_cursor>
	Lcd_int(lcd, CLOCK[HRR]);
 8000dec:	2202      	movs	r2, #2
 8000dee:	4b83      	ldr	r3, [pc, #524]	; (8000ffc <display_default+0x26c>)
 8000df0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000df4:	4619      	mov	r1, r3
 8000df6:	6878      	ldr	r0, [r7, #4]
 8000df8:	f7ff fd52 	bl	80008a0 <Lcd_int>
	// output center thing
	Lcd_cursor(lcd, 0, aleft + 2);
 8000dfc:	68fb      	ldr	r3, [r7, #12]
 8000dfe:	b2db      	uxtb	r3, r3
 8000e00:	3302      	adds	r3, #2
 8000e02:	b2db      	uxtb	r3, r3
 8000e04:	461a      	mov	r2, r3
 8000e06:	2100      	movs	r1, #0
 8000e08:	6878      	ldr	r0, [r7, #4]
 8000e0a:	f7ff fd81 	bl	8000910 <Lcd_cursor>
	Lcd_string(lcd, ":");
 8000e0e:	497d      	ldr	r1, [pc, #500]	; (8001004 <display_default+0x274>)
 8000e10:	6878      	ldr	r0, [r7, #4]
 8000e12:	f7ff fd5d 	bl	80008d0 <Lcd_string>
	// output minutes
	Lcd_cursor(lcd, 0, aleft + 3);
 8000e16:	68fb      	ldr	r3, [r7, #12]
 8000e18:	b2db      	uxtb	r3, r3
 8000e1a:	3303      	adds	r3, #3
 8000e1c:	b2db      	uxtb	r3, r3
 8000e1e:	461a      	mov	r2, r3
 8000e20:	2100      	movs	r1, #0
 8000e22:	6878      	ldr	r0, [r7, #4]
 8000e24:	f7ff fd74 	bl	8000910 <Lcd_cursor>
	Lcd_int(lcd, CLOCK[MIN]);
 8000e28:	2201      	movs	r2, #1
 8000e2a:	4b74      	ldr	r3, [pc, #464]	; (8000ffc <display_default+0x26c>)
 8000e2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e30:	4619      	mov	r1, r3
 8000e32:	6878      	ldr	r0, [r7, #4]
 8000e34:	f7ff fd34 	bl	80008a0 <Lcd_int>
	// output center thing
	Lcd_cursor(lcd, 0, aleft + 5);
 8000e38:	68fb      	ldr	r3, [r7, #12]
 8000e3a:	b2db      	uxtb	r3, r3
 8000e3c:	3305      	adds	r3, #5
 8000e3e:	b2db      	uxtb	r3, r3
 8000e40:	461a      	mov	r2, r3
 8000e42:	2100      	movs	r1, #0
 8000e44:	6878      	ldr	r0, [r7, #4]
 8000e46:	f7ff fd63 	bl	8000910 <Lcd_cursor>
	Lcd_string(lcd, ":");
 8000e4a:	496e      	ldr	r1, [pc, #440]	; (8001004 <display_default+0x274>)
 8000e4c:	6878      	ldr	r0, [r7, #4]
 8000e4e:	f7ff fd3f 	bl	80008d0 <Lcd_string>
	// output seconds
	if(CLOCK[SEC] < 10){
 8000e52:	2200      	movs	r2, #0
 8000e54:	4b69      	ldr	r3, [pc, #420]	; (8000ffc <display_default+0x26c>)
 8000e56:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e5a:	2b09      	cmp	r3, #9
 8000e5c:	dc1e      	bgt.n	8000e9c <display_default+0x10c>
		Lcd_cursor(lcd, 0, aleft + 6);
 8000e5e:	68fb      	ldr	r3, [r7, #12]
 8000e60:	b2db      	uxtb	r3, r3
 8000e62:	3306      	adds	r3, #6
 8000e64:	b2db      	uxtb	r3, r3
 8000e66:	461a      	mov	r2, r3
 8000e68:	2100      	movs	r1, #0
 8000e6a:	6878      	ldr	r0, [r7, #4]
 8000e6c:	f7ff fd50 	bl	8000910 <Lcd_cursor>
		Lcd_int(lcd, 0);
 8000e70:	2100      	movs	r1, #0
 8000e72:	6878      	ldr	r0, [r7, #4]
 8000e74:	f7ff fd14 	bl	80008a0 <Lcd_int>
		Lcd_cursor(lcd, 0, aleft + 7);
 8000e78:	68fb      	ldr	r3, [r7, #12]
 8000e7a:	b2db      	uxtb	r3, r3
 8000e7c:	3307      	adds	r3, #7
 8000e7e:	b2db      	uxtb	r3, r3
 8000e80:	461a      	mov	r2, r3
 8000e82:	2100      	movs	r1, #0
 8000e84:	6878      	ldr	r0, [r7, #4]
 8000e86:	f7ff fd43 	bl	8000910 <Lcd_cursor>
		Lcd_int(lcd, CLOCK[SEC]);
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	4b5b      	ldr	r3, [pc, #364]	; (8000ffc <display_default+0x26c>)
 8000e8e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e92:	4619      	mov	r1, r3
 8000e94:	6878      	ldr	r0, [r7, #4]
 8000e96:	f7ff fd03 	bl	80008a0 <Lcd_int>
 8000e9a:	e010      	b.n	8000ebe <display_default+0x12e>
	}else{
		Lcd_cursor(lcd, 0, aleft + 6);
 8000e9c:	68fb      	ldr	r3, [r7, #12]
 8000e9e:	b2db      	uxtb	r3, r3
 8000ea0:	3306      	adds	r3, #6
 8000ea2:	b2db      	uxtb	r3, r3
 8000ea4:	461a      	mov	r2, r3
 8000ea6:	2100      	movs	r1, #0
 8000ea8:	6878      	ldr	r0, [r7, #4]
 8000eaa:	f7ff fd31 	bl	8000910 <Lcd_cursor>
		Lcd_int(lcd, CLOCK[SEC]);
 8000eae:	2200      	movs	r2, #0
 8000eb0:	4b52      	ldr	r3, [pc, #328]	; (8000ffc <display_default+0x26c>)
 8000eb2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000eb6:	4619      	mov	r1, r3
 8000eb8:	6878      	ldr	r0, [r7, #4]
 8000eba:	f7ff fcf1 	bl	80008a0 <Lcd_int>
	}

	// --- output the second row
	// TODO - alarm stuff
	// intro string
	Lcd_cursor(lcd, 1, 0);
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	2101      	movs	r1, #1
 8000ec2:	6878      	ldr	r0, [r7, #4]
 8000ec4:	f7ff fd24 	bl	8000910 <Lcd_cursor>
	Lcd_string(lcd, "ALARM ");
 8000ec8:	494f      	ldr	r1, [pc, #316]	; (8001008 <display_default+0x278>)
 8000eca:	6878      	ldr	r0, [r7, #4]
 8000ecc:	f7ff fd00 	bl	80008d0 <Lcd_string>

	if(HAS_TIMER){
 8000ed0:	4b4e      	ldr	r3, [pc, #312]	; (800100c <display_default+0x27c>)
 8000ed2:	781b      	ldrb	r3, [r3, #0]
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d07b      	beq.n	8000fd0 <display_default+0x240>
		// print out hours
		aleft = get_display_pos(A_RIGHT, 4);
 8000ed8:	2302      	movs	r3, #2
 8000eda:	2104      	movs	r1, #4
 8000edc:	4618      	mov	r0, r3
 8000ede:	f000 f89b 	bl	8001018 <get_display_pos>
 8000ee2:	60f8      	str	r0, [r7, #12]
		if(ALARM[HRR] < 10){
 8000ee4:	2202      	movs	r2, #2
 8000ee6:	4b4a      	ldr	r3, [pc, #296]	; (8001010 <display_default+0x280>)
 8000ee8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000eec:	2b09      	cmp	r3, #9
 8000eee:	dc1c      	bgt.n	8000f2a <display_default+0x19a>
			Lcd_cursor(lcd, 1, aleft);
 8000ef0:	68fb      	ldr	r3, [r7, #12]
 8000ef2:	b2db      	uxtb	r3, r3
 8000ef4:	461a      	mov	r2, r3
 8000ef6:	2101      	movs	r1, #1
 8000ef8:	6878      	ldr	r0, [r7, #4]
 8000efa:	f7ff fd09 	bl	8000910 <Lcd_cursor>
			Lcd_int(lcd, 0);
 8000efe:	2100      	movs	r1, #0
 8000f00:	6878      	ldr	r0, [r7, #4]
 8000f02:	f7ff fccd 	bl	80008a0 <Lcd_int>
			Lcd_cursor(lcd, 1, aleft + 1);
 8000f06:	68fb      	ldr	r3, [r7, #12]
 8000f08:	b2db      	uxtb	r3, r3
 8000f0a:	3301      	adds	r3, #1
 8000f0c:	b2db      	uxtb	r3, r3
 8000f0e:	461a      	mov	r2, r3
 8000f10:	2101      	movs	r1, #1
 8000f12:	6878      	ldr	r0, [r7, #4]
 8000f14:	f7ff fcfc 	bl	8000910 <Lcd_cursor>
			Lcd_int(lcd, ALARM[HRR]);
 8000f18:	2202      	movs	r2, #2
 8000f1a:	4b3d      	ldr	r3, [pc, #244]	; (8001010 <display_default+0x280>)
 8000f1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f20:	4619      	mov	r1, r3
 8000f22:	6878      	ldr	r0, [r7, #4]
 8000f24:	f7ff fcbc 	bl	80008a0 <Lcd_int>
 8000f28:	e00e      	b.n	8000f48 <display_default+0x1b8>
		}else{
			Lcd_cursor(lcd, 1, aleft);
 8000f2a:	68fb      	ldr	r3, [r7, #12]
 8000f2c:	b2db      	uxtb	r3, r3
 8000f2e:	461a      	mov	r2, r3
 8000f30:	2101      	movs	r1, #1
 8000f32:	6878      	ldr	r0, [r7, #4]
 8000f34:	f7ff fcec 	bl	8000910 <Lcd_cursor>
			Lcd_int(lcd, ALARM[HRR]);
 8000f38:	2202      	movs	r2, #2
 8000f3a:	4b35      	ldr	r3, [pc, #212]	; (8001010 <display_default+0x280>)
 8000f3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f40:	4619      	mov	r1, r3
 8000f42:	6878      	ldr	r0, [r7, #4]
 8000f44:	f7ff fcac 	bl	80008a0 <Lcd_int>
		}
		Lcd_cursor(lcd, 1, aleft+2);
 8000f48:	68fb      	ldr	r3, [r7, #12]
 8000f4a:	b2db      	uxtb	r3, r3
 8000f4c:	3302      	adds	r3, #2
 8000f4e:	b2db      	uxtb	r3, r3
 8000f50:	461a      	mov	r2, r3
 8000f52:	2101      	movs	r1, #1
 8000f54:	6878      	ldr	r0, [r7, #4]
 8000f56:	f7ff fcdb 	bl	8000910 <Lcd_cursor>
		Lcd_string(lcd, ":");
 8000f5a:	492a      	ldr	r1, [pc, #168]	; (8001004 <display_default+0x274>)
 8000f5c:	6878      	ldr	r0, [r7, #4]
 8000f5e:	f7ff fcb7 	bl	80008d0 <Lcd_string>


		if(ALARM[MIN] < 10){
 8000f62:	2201      	movs	r2, #1
 8000f64:	4b2a      	ldr	r3, [pc, #168]	; (8001010 <display_default+0x280>)
 8000f66:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f6a:	2b09      	cmp	r3, #9
 8000f6c:	dc1e      	bgt.n	8000fac <display_default+0x21c>
			Lcd_cursor(lcd, 1, aleft + 3);
 8000f6e:	68fb      	ldr	r3, [r7, #12]
 8000f70:	b2db      	uxtb	r3, r3
 8000f72:	3303      	adds	r3, #3
 8000f74:	b2db      	uxtb	r3, r3
 8000f76:	461a      	mov	r2, r3
 8000f78:	2101      	movs	r1, #1
 8000f7a:	6878      	ldr	r0, [r7, #4]
 8000f7c:	f7ff fcc8 	bl	8000910 <Lcd_cursor>
			Lcd_int(lcd, 0);
 8000f80:	2100      	movs	r1, #0
 8000f82:	6878      	ldr	r0, [r7, #4]
 8000f84:	f7ff fc8c 	bl	80008a0 <Lcd_int>
			Lcd_cursor(lcd, 1, aleft + 4);
 8000f88:	68fb      	ldr	r3, [r7, #12]
 8000f8a:	b2db      	uxtb	r3, r3
 8000f8c:	3304      	adds	r3, #4
 8000f8e:	b2db      	uxtb	r3, r3
 8000f90:	461a      	mov	r2, r3
 8000f92:	2101      	movs	r1, #1
 8000f94:	6878      	ldr	r0, [r7, #4]
 8000f96:	f7ff fcbb 	bl	8000910 <Lcd_cursor>
			Lcd_int(lcd, ALARM[MIN]);
 8000f9a:	2201      	movs	r2, #1
 8000f9c:	4b1c      	ldr	r3, [pc, #112]	; (8001010 <display_default+0x280>)
 8000f9e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000fa2:	4619      	mov	r1, r3
 8000fa4:	6878      	ldr	r0, [r7, #4]
 8000fa6:	f7ff fc7b 	bl	80008a0 <Lcd_int>
	}else{
		aleft = get_display_pos(A_RIGHT, 6);
		Lcd_cursor(lcd, 1, aleft);
		Lcd_string(lcd, "NOT SET");
	}
}
 8000faa:	e022      	b.n	8000ff2 <display_default+0x262>
			Lcd_cursor(lcd, 1, aleft + 3);
 8000fac:	68fb      	ldr	r3, [r7, #12]
 8000fae:	b2db      	uxtb	r3, r3
 8000fb0:	3303      	adds	r3, #3
 8000fb2:	b2db      	uxtb	r3, r3
 8000fb4:	461a      	mov	r2, r3
 8000fb6:	2101      	movs	r1, #1
 8000fb8:	6878      	ldr	r0, [r7, #4]
 8000fba:	f7ff fca9 	bl	8000910 <Lcd_cursor>
			Lcd_int(lcd, ALARM[MIN]);
 8000fbe:	2201      	movs	r2, #1
 8000fc0:	4b13      	ldr	r3, [pc, #76]	; (8001010 <display_default+0x280>)
 8000fc2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000fc6:	4619      	mov	r1, r3
 8000fc8:	6878      	ldr	r0, [r7, #4]
 8000fca:	f7ff fc69 	bl	80008a0 <Lcd_int>
}
 8000fce:	e010      	b.n	8000ff2 <display_default+0x262>
		aleft = get_display_pos(A_RIGHT, 6);
 8000fd0:	2302      	movs	r3, #2
 8000fd2:	2106      	movs	r1, #6
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	f000 f81f 	bl	8001018 <get_display_pos>
 8000fda:	60f8      	str	r0, [r7, #12]
		Lcd_cursor(lcd, 1, aleft);
 8000fdc:	68fb      	ldr	r3, [r7, #12]
 8000fde:	b2db      	uxtb	r3, r3
 8000fe0:	461a      	mov	r2, r3
 8000fe2:	2101      	movs	r1, #1
 8000fe4:	6878      	ldr	r0, [r7, #4]
 8000fe6:	f7ff fc93 	bl	8000910 <Lcd_cursor>
		Lcd_string(lcd, "NOT SET");
 8000fea:	490a      	ldr	r1, [pc, #40]	; (8001014 <display_default+0x284>)
 8000fec:	6878      	ldr	r0, [r7, #4]
 8000fee:	f7ff fc6f 	bl	80008d0 <Lcd_string>
}
 8000ff2:	bf00      	nop
 8000ff4:	3710      	adds	r7, #16
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	bd80      	pop	{r7, pc}
 8000ffa:	bf00      	nop
 8000ffc:	20000140 	.word	0x20000140
 8001000:	20000030 	.word	0x20000030
 8001004:	08003b54 	.word	0x08003b54
 8001008:	08003b58 	.word	0x08003b58
 800100c:	20000178 	.word	0x20000178
 8001010:	20000160 	.word	0x20000160
 8001014:	08003b60 	.word	0x08003b60

08001018 <get_display_pos>:
	if (a[MIN] > b[MIN]) return true;
	if (a[SEC] > b[SEC]) return true;
	return false;
}

int get_display_pos(uint align, uint length){
 8001018:	b480      	push	{r7}
 800101a:	b083      	sub	sp, #12
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
 8001020:	6039      	str	r1, [r7, #0]
	if (align == A_LEFT){
 8001022:	2200      	movs	r2, #0
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	4293      	cmp	r3, r2
 8001028:	d101      	bne.n	800102e <get_display_pos+0x16>
		return 0;
 800102a:	2300      	movs	r3, #0
 800102c:	e00b      	b.n	8001046 <get_display_pos+0x2e>
	} else if(align == A_RIGHT){
 800102e:	2202      	movs	r2, #2
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	4293      	cmp	r3, r2
 8001034:	d103      	bne.n	800103e <get_display_pos+0x26>
		return 16 - length - 1;
 8001036:	683b      	ldr	r3, [r7, #0]
 8001038:	f1c3 030f 	rsb	r3, r3, #15
 800103c:	e003      	b.n	8001046 <get_display_pos+0x2e>
	}
	return 7 - (length / 2);
 800103e:	683b      	ldr	r3, [r7, #0]
 8001040:	085b      	lsrs	r3, r3, #1
 8001042:	f1c3 0307 	rsb	r3, r3, #7
}
 8001046:	4618      	mov	r0, r3
 8001048:	370c      	adds	r7, #12
 800104a:	46bd      	mov	sp, r7
 800104c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001050:	4770      	bx	lr
	...

08001054 <update_buttons>:
 *  B3 = PB10
 *  B4 = PA8
 */


void update_buttons(){
 8001054:	b580      	push	{r7, lr}
 8001056:	af00      	add	r7, sp, #0
	// button 1
	if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_10) == GPIO_PIN_RESET){
 8001058:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800105c:	481d      	ldr	r0, [pc, #116]	; (80010d4 <update_buttons+0x80>)
 800105e:	f000 fe57 	bl	8001d10 <HAL_GPIO_ReadPin>
 8001062:	4603      	mov	r3, r0
 8001064:	2b00      	cmp	r3, #0
 8001066:	d103      	bne.n	8001070 <update_buttons+0x1c>
		BUTTONS[0] = false;
 8001068:	4b1b      	ldr	r3, [pc, #108]	; (80010d8 <update_buttons+0x84>)
 800106a:	2200      	movs	r2, #0
 800106c:	701a      	strb	r2, [r3, #0]
 800106e:	e002      	b.n	8001076 <update_buttons+0x22>
	}else{
		BUTTONS[0] = true;
 8001070:	4b19      	ldr	r3, [pc, #100]	; (80010d8 <update_buttons+0x84>)
 8001072:	2201      	movs	r2, #1
 8001074:	701a      	strb	r2, [r3, #0]
	}
	// button 2
	if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_3) == GPIO_PIN_RESET){
 8001076:	2108      	movs	r1, #8
 8001078:	4818      	ldr	r0, [pc, #96]	; (80010dc <update_buttons+0x88>)
 800107a:	f000 fe49 	bl	8001d10 <HAL_GPIO_ReadPin>
 800107e:	4603      	mov	r3, r0
 8001080:	2b00      	cmp	r3, #0
 8001082:	d103      	bne.n	800108c <update_buttons+0x38>
		BUTTONS[1] = false;
 8001084:	4b14      	ldr	r3, [pc, #80]	; (80010d8 <update_buttons+0x84>)
 8001086:	2200      	movs	r2, #0
 8001088:	705a      	strb	r2, [r3, #1]
 800108a:	e002      	b.n	8001092 <update_buttons+0x3e>
	}else{
		BUTTONS[1] = true;
 800108c:	4b12      	ldr	r3, [pc, #72]	; (80010d8 <update_buttons+0x84>)
 800108e:	2201      	movs	r2, #1
 8001090:	705a      	strb	r2, [r3, #1]
	}
	// button 3
	if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_10) == GPIO_PIN_RESET){
 8001092:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001096:	4811      	ldr	r0, [pc, #68]	; (80010dc <update_buttons+0x88>)
 8001098:	f000 fe3a 	bl	8001d10 <HAL_GPIO_ReadPin>
 800109c:	4603      	mov	r3, r0
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d103      	bne.n	80010aa <update_buttons+0x56>
		BUTTONS[2] = false;
 80010a2:	4b0d      	ldr	r3, [pc, #52]	; (80010d8 <update_buttons+0x84>)
 80010a4:	2200      	movs	r2, #0
 80010a6:	709a      	strb	r2, [r3, #2]
 80010a8:	e002      	b.n	80010b0 <update_buttons+0x5c>
	}else{
		BUTTONS[2] = true;
 80010aa:	4b0b      	ldr	r3, [pc, #44]	; (80010d8 <update_buttons+0x84>)
 80010ac:	2201      	movs	r2, #1
 80010ae:	709a      	strb	r2, [r3, #2]
	}
	// button 4
	if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8) == GPIO_PIN_RESET){
 80010b0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80010b4:	4807      	ldr	r0, [pc, #28]	; (80010d4 <update_buttons+0x80>)
 80010b6:	f000 fe2b 	bl	8001d10 <HAL_GPIO_ReadPin>
 80010ba:	4603      	mov	r3, r0
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d103      	bne.n	80010c8 <update_buttons+0x74>
		BUTTONS[3] = false;
 80010c0:	4b05      	ldr	r3, [pc, #20]	; (80010d8 <update_buttons+0x84>)
 80010c2:	2200      	movs	r2, #0
 80010c4:	70da      	strb	r2, [r3, #3]
	}else{
		BUTTONS[3] = true;
	}
}
 80010c6:	e002      	b.n	80010ce <update_buttons+0x7a>
		BUTTONS[3] = true;
 80010c8:	4b03      	ldr	r3, [pc, #12]	; (80010d8 <update_buttons+0x84>)
 80010ca:	2201      	movs	r2, #1
 80010cc:	70da      	strb	r2, [r3, #3]
}
 80010ce:	bf00      	nop
 80010d0:	bd80      	pop	{r7, pc}
 80010d2:	bf00      	nop
 80010d4:	40020000 	.word	0x40020000
 80010d8:	2000017c 	.word	0x2000017c
 80010dc:	40020400 	.word	0x40020400

080010e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80010e0:	b5b0      	push	{r4, r5, r7, lr}
 80010e2:	b09c      	sub	sp, #112	; 0x70
 80010e4:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80010e6:	f000 fb13 	bl	8001710 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80010ea:	f000 f92b 	bl	8001344 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80010ee:	f7ff fa4d 	bl	800058c <MX_GPIO_Init>
  MX_TIM2_Init();
 80010f2:	f000 fa33 	bl	800155c <MX_TIM2_Init>
  MX_I2C1_Init();
 80010f6:	f7ff fb09 	bl	800070c <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */



  // Lcd_PortType ports[] = { D4_GPIO_Port, D5_GPIO_Port, D6_GPIO_Port, D7_GPIO_Port };
	Lcd_PortType ports[] = { GPIOC, GPIOB, GPIOA, GPIOA };
 80010fa:	4b82      	ldr	r3, [pc, #520]	; (8001304 <main+0x224>)
 80010fc:	f107 0450 	add.w	r4, r7, #80	; 0x50
 8001100:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001102:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	// Lcd_PinType pins[] = {D4_Pin, D5_Pin, D6_Pin, D7_Pin};
	Lcd_PinType pins[] = {GPIO_PIN_7, GPIO_PIN_6, GPIO_PIN_7, GPIO_PIN_6};
 8001106:	4a80      	ldr	r2, [pc, #512]	; (8001308 <main+0x228>)
 8001108:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800110c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001110:	e883 0003 	stmia.w	r3, {r0, r1}
	Lcd_HandleTypeDef lcd;
	// Lcd_create(ports, pins, RS_GPIO_Port, RS_Pin, EN_GPIO_Port, EN_Pin, LCD_4_BIT_MODE);
	lcd = Lcd_create(ports, pins, GPIOB, GPIO_PIN_5, GPIOB, GPIO_PIN_4, LCD_4_BIT_MODE);
 8001114:	4638      	mov	r0, r7
 8001116:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800111a:	f107 0150 	add.w	r1, r7, #80	; 0x50
 800111e:	2300      	movs	r3, #0
 8001120:	9303      	str	r3, [sp, #12]
 8001122:	2310      	movs	r3, #16
 8001124:	9302      	str	r3, [sp, #8]
 8001126:	4b79      	ldr	r3, [pc, #484]	; (800130c <main+0x22c>)
 8001128:	9301      	str	r3, [sp, #4]
 800112a:	2320      	movs	r3, #32
 800112c:	9300      	str	r3, [sp, #0]
 800112e:	4b77      	ldr	r3, [pc, #476]	; (800130c <main+0x22c>)
 8001130:	f7ff fb62 	bl	80007f8 <Lcd_create>
 8001134:	f107 0430 	add.w	r4, r7, #48	; 0x30
 8001138:	463d      	mov	r5, r7
 800113a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800113c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800113e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001142:	e884 0003 	stmia.w	r4, {r0, r1}


	// ----------------------------------- values

  // turn on pwm
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8001146:	2100      	movs	r1, #0
 8001148:	4871      	ldr	r0, [pc, #452]	; (8001310 <main+0x230>)
 800114a:	f001 fc27 	bl	800299c <HAL_TIM_PWM_Start>
  // don't let value = 255 (otherwise is 100% of the duty cycle + we just get 0, 1 // high or low

  // ----------------------------------- values


  	set_speaker_state(false);
 800114e:	2000      	movs	r0, #0
 8001150:	f7ff fca0 	bl	8000a94 <set_speaker_state>

	// create clock object
  	  // sec, min, hrr, day, mon, year
  	// int clock[6] = {0, 0, 0, 0, 0, 0};
	int clock[6] = {0, 19, 15, 16, NOV, 2023};
 8001154:	2300      	movs	r3, #0
 8001156:	61bb      	str	r3, [r7, #24]
 8001158:	2313      	movs	r3, #19
 800115a:	61fb      	str	r3, [r7, #28]
 800115c:	230f      	movs	r3, #15
 800115e:	623b      	str	r3, [r7, #32]
 8001160:	2310      	movs	r3, #16
 8001162:	627b      	str	r3, [r7, #36]	; 0x24
 8001164:	230a      	movs	r3, #10
 8001166:	62bb      	str	r3, [r7, #40]	; 0x28
 8001168:	f240 73e7 	movw	r3, #2023	; 0x7e7
 800116c:	62fb      	str	r3, [r7, #44]	; 0x2c

	set_clock_time_arr(clock);
 800116e:	f107 0318 	add.w	r3, r7, #24
 8001172:	4618      	mov	r0, r3
 8001174:	f7ff fd38 	bl	8000be8 <set_clock_time_arr>
	C_START_TIME = HAL_GetTick();
 8001178:	f000 fb30 	bl	80017dc <HAL_GetTick>
 800117c:	4603      	mov	r3, r0
 800117e:	4a65      	ldr	r2, [pc, #404]	; (8001314 <main+0x234>)
 8001180:	6013      	str	r3, [r2, #0]


	Lcd_clear(&lcd);
 8001182:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001186:	4618      	mov	r0, r3
 8001188:	f7ff fbdc 	bl	8000944 <Lcd_clear>


	//TODO - SPEAKER TESTING
	set_alarm(5, 19, 15);
 800118c:	220f      	movs	r2, #15
 800118e:	2113      	movs	r1, #19
 8001190:	2005      	movs	r0, #5
 8001192:	f7ff fca9 	bl	8000ae8 <set_alarm>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	PREV_TIME = CURRENT_TIME;
 8001196:	4b60      	ldr	r3, [pc, #384]	; (8001318 <main+0x238>)
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	4a60      	ldr	r2, [pc, #384]	; (800131c <main+0x23c>)
 800119c:	6013      	str	r3, [r2, #0]
	CURRENT_TIME = HAL_GetTick();
 800119e:	f000 fb1d 	bl	80017dc <HAL_GetTick>
 80011a2:	4603      	mov	r3, r0
 80011a4:	4a5c      	ldr	r2, [pc, #368]	; (8001318 <main+0x238>)
 80011a6:	6013      	str	r3, [r2, #0]
	DELTA_TIME += CURRENT_TIME - PREV_TIME;
 80011a8:	4b5b      	ldr	r3, [pc, #364]	; (8001318 <main+0x238>)
 80011aa:	681a      	ldr	r2, [r3, #0]
 80011ac:	4b5b      	ldr	r3, [pc, #364]	; (800131c <main+0x23c>)
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	1ad2      	subs	r2, r2, r3
 80011b2:	4b5b      	ldr	r3, [pc, #364]	; (8001320 <main+0x240>)
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	4413      	add	r3, r2
 80011b8:	4a59      	ldr	r2, [pc, #356]	; (8001320 <main+0x240>)
 80011ba:	6013      	str	r3, [r2, #0]

	// update buttons
	update_buttons();
 80011bc:	f7ff ff4a 	bl	8001054 <update_buttons>
	{
		Lcd_cursor(&lcd, 1, 5);
 80011c0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80011c4:	2205      	movs	r2, #5
 80011c6:	2101      	movs	r1, #1
 80011c8:	4618      	mov	r0, r3
 80011ca:	f7ff fba1 	bl	8000910 <Lcd_cursor>
		if(BUTTONS[0]) {
 80011ce:	4b55      	ldr	r3, [pc, #340]	; (8001324 <main+0x244>)
 80011d0:	781b      	ldrb	r3, [r3, #0]
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d006      	beq.n	80011e4 <main+0x104>
			Lcd_string(&lcd, "_");
 80011d6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80011da:	4953      	ldr	r1, [pc, #332]	; (8001328 <main+0x248>)
 80011dc:	4618      	mov	r0, r3
 80011de:	f7ff fb77 	bl	80008d0 <Lcd_string>
 80011e2:	e005      	b.n	80011f0 <main+0x110>
		}else{
			Lcd_string(&lcd, " ");
 80011e4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80011e8:	4950      	ldr	r1, [pc, #320]	; (800132c <main+0x24c>)
 80011ea:	4618      	mov	r0, r3
 80011ec:	f7ff fb70 	bl	80008d0 <Lcd_string>
		}
		Lcd_cursor(&lcd, 1, 6);
 80011f0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80011f4:	2206      	movs	r2, #6
 80011f6:	2101      	movs	r1, #1
 80011f8:	4618      	mov	r0, r3
 80011fa:	f7ff fb89 	bl	8000910 <Lcd_cursor>
		if(BUTTONS[1]){
 80011fe:	4b49      	ldr	r3, [pc, #292]	; (8001324 <main+0x244>)
 8001200:	785b      	ldrb	r3, [r3, #1]
 8001202:	2b00      	cmp	r3, #0
 8001204:	d006      	beq.n	8001214 <main+0x134>
			Lcd_string(&lcd, "_");
 8001206:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800120a:	4947      	ldr	r1, [pc, #284]	; (8001328 <main+0x248>)
 800120c:	4618      	mov	r0, r3
 800120e:	f7ff fb5f 	bl	80008d0 <Lcd_string>
 8001212:	e005      	b.n	8001220 <main+0x140>
		}else{
			Lcd_string(&lcd, " ");
 8001214:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001218:	4944      	ldr	r1, [pc, #272]	; (800132c <main+0x24c>)
 800121a:	4618      	mov	r0, r3
 800121c:	f7ff fb58 	bl	80008d0 <Lcd_string>
		}
		Lcd_cursor(&lcd, 1, 9);
 8001220:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001224:	2209      	movs	r2, #9
 8001226:	2101      	movs	r1, #1
 8001228:	4618      	mov	r0, r3
 800122a:	f7ff fb71 	bl	8000910 <Lcd_cursor>
		if(BUTTONS[2]){
 800122e:	4b3d      	ldr	r3, [pc, #244]	; (8001324 <main+0x244>)
 8001230:	789b      	ldrb	r3, [r3, #2]
 8001232:	2b00      	cmp	r3, #0
 8001234:	d006      	beq.n	8001244 <main+0x164>
			Lcd_string(&lcd, "_");
 8001236:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800123a:	493b      	ldr	r1, [pc, #236]	; (8001328 <main+0x248>)
 800123c:	4618      	mov	r0, r3
 800123e:	f7ff fb47 	bl	80008d0 <Lcd_string>
 8001242:	e005      	b.n	8001250 <main+0x170>
		}else{
			Lcd_string(&lcd, " ");
 8001244:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001248:	4938      	ldr	r1, [pc, #224]	; (800132c <main+0x24c>)
 800124a:	4618      	mov	r0, r3
 800124c:	f7ff fb40 	bl	80008d0 <Lcd_string>
		}
		Lcd_cursor(&lcd, 1, 10);
 8001250:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001254:	220a      	movs	r2, #10
 8001256:	2101      	movs	r1, #1
 8001258:	4618      	mov	r0, r3
 800125a:	f7ff fb59 	bl	8000910 <Lcd_cursor>
		if(BUTTONS[3]){
 800125e:	4b31      	ldr	r3, [pc, #196]	; (8001324 <main+0x244>)
 8001260:	78db      	ldrb	r3, [r3, #3]
 8001262:	2b00      	cmp	r3, #0
 8001264:	d006      	beq.n	8001274 <main+0x194>
			Lcd_string(&lcd, "_");
 8001266:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800126a:	492f      	ldr	r1, [pc, #188]	; (8001328 <main+0x248>)
 800126c:	4618      	mov	r0, r3
 800126e:	f7ff fb2f 	bl	80008d0 <Lcd_string>
 8001272:	e005      	b.n	8001280 <main+0x1a0>
		}else{
			Lcd_string(&lcd, " ");
 8001274:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001278:	492c      	ldr	r1, [pc, #176]	; (800132c <main+0x24c>)
 800127a:	4618      	mov	r0, r3
 800127c:	f7ff fb28 	bl	80008d0 <Lcd_string>
		}
	}

	// clock update
	second_update_clock(CLOCK);
 8001280:	482b      	ldr	r0, [pc, #172]	; (8001330 <main+0x250>)
 8001282:	f7ff fcd1 	bl	8000c28 <second_update_clock>

	// alarm update
	{
		set_speaker_state(false);
 8001286:	2000      	movs	r0, #0
 8001288:	f7ff fc04 	bl	8000a94 <set_speaker_state>
		if(ALARM[HRR] == CLOCK[HRR] && ALARM[MIN] == CLOCK[MIN]){
 800128c:	2202      	movs	r2, #2
 800128e:	4b29      	ldr	r3, [pc, #164]	; (8001334 <main+0x254>)
 8001290:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8001294:	2102      	movs	r1, #2
 8001296:	4b26      	ldr	r3, [pc, #152]	; (8001330 <main+0x250>)
 8001298:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800129c:	429a      	cmp	r2, r3
 800129e:	d117      	bne.n	80012d0 <main+0x1f0>
 80012a0:	2201      	movs	r2, #1
 80012a2:	4b24      	ldr	r3, [pc, #144]	; (8001334 <main+0x254>)
 80012a4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80012a8:	2101      	movs	r1, #1
 80012aa:	4b21      	ldr	r3, [pc, #132]	; (8001330 <main+0x250>)
 80012ac:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80012b0:	429a      	cmp	r2, r3
 80012b2:	d10d      	bne.n	80012d0 <main+0x1f0>
			if(CLOCK[SEC] - ALARM[SEC] < 15){
 80012b4:	2200      	movs	r2, #0
 80012b6:	4b1e      	ldr	r3, [pc, #120]	; (8001330 <main+0x250>)
 80012b8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80012bc:	2100      	movs	r1, #0
 80012be:	4b1d      	ldr	r3, [pc, #116]	; (8001334 <main+0x254>)
 80012c0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80012c4:	1ad3      	subs	r3, r2, r3
 80012c6:	2b0e      	cmp	r3, #14
 80012c8:	dc02      	bgt.n	80012d0 <main+0x1f0>
				// 15s interval satisfied
				set_speaker_state(true);
 80012ca:	2001      	movs	r0, #1
 80012cc:	f7ff fbe2 	bl	8000a94 <set_speaker_state>
			}
		}
	}

	// display information
	display_default(&lcd);
 80012d0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80012d4:	4618      	mov	r0, r3
 80012d6:	f7ff fd5b 	bl	8000d90 <display_default>
	// check if alarm mis active
	Lcd_cursor(&lcd, 1, 7);
 80012da:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80012de:	2207      	movs	r2, #7
 80012e0:	2101      	movs	r1, #1
 80012e2:	4618      	mov	r0, r3
 80012e4:	f7ff fb14 	bl	8000910 <Lcd_cursor>
	Lcd_string(&lcd, (SPEAKER_ACTIVE ? "ON" : "DN"));
 80012e8:	4b13      	ldr	r3, [pc, #76]	; (8001338 <main+0x258>)
 80012ea:	781b      	ldrb	r3, [r3, #0]
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d001      	beq.n	80012f4 <main+0x214>
 80012f0:	4a12      	ldr	r2, [pc, #72]	; (800133c <main+0x25c>)
 80012f2:	e000      	b.n	80012f6 <main+0x216>
 80012f4:	4a12      	ldr	r2, [pc, #72]	; (8001340 <main+0x260>)
 80012f6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80012fa:	4611      	mov	r1, r2
 80012fc:	4618      	mov	r0, r3
 80012fe:	f7ff fae7 	bl	80008d0 <Lcd_string>
	PREV_TIME = CURRENT_TIME;
 8001302:	e748      	b.n	8001196 <main+0xb6>
 8001304:	08003b78 	.word	0x08003b78
 8001308:	08003b88 	.word	0x08003b88
 800130c:	40020400 	.word	0x40020400
 8001310:	20000184 	.word	0x20000184
 8001314:	20000130 	.word	0x20000130
 8001318:	20000134 	.word	0x20000134
 800131c:	20000138 	.word	0x20000138
 8001320:	2000013c 	.word	0x2000013c
 8001324:	2000017c 	.word	0x2000017c
 8001328:	08003b68 	.word	0x08003b68
 800132c:	08003b6c 	.word	0x08003b6c
 8001330:	20000140 	.word	0x20000140
 8001334:	20000160 	.word	0x20000160
 8001338:	20000158 	.word	0x20000158
 800133c:	08003b70 	.word	0x08003b70
 8001340:	08003b74 	.word	0x08003b74

08001344 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	b094      	sub	sp, #80	; 0x50
 8001348:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800134a:	f107 0320 	add.w	r3, r7, #32
 800134e:	2230      	movs	r2, #48	; 0x30
 8001350:	2100      	movs	r1, #0
 8001352:	4618      	mov	r0, r3
 8001354:	f001 ff54 	bl	8003200 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001358:	f107 030c 	add.w	r3, r7, #12
 800135c:	2200      	movs	r2, #0
 800135e:	601a      	str	r2, [r3, #0]
 8001360:	605a      	str	r2, [r3, #4]
 8001362:	609a      	str	r2, [r3, #8]
 8001364:	60da      	str	r2, [r3, #12]
 8001366:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001368:	2300      	movs	r3, #0
 800136a:	60bb      	str	r3, [r7, #8]
 800136c:	4b29      	ldr	r3, [pc, #164]	; (8001414 <SystemClock_Config+0xd0>)
 800136e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001370:	4a28      	ldr	r2, [pc, #160]	; (8001414 <SystemClock_Config+0xd0>)
 8001372:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001376:	6413      	str	r3, [r2, #64]	; 0x40
 8001378:	4b26      	ldr	r3, [pc, #152]	; (8001414 <SystemClock_Config+0xd0>)
 800137a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800137c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001380:	60bb      	str	r3, [r7, #8]
 8001382:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001384:	2300      	movs	r3, #0
 8001386:	607b      	str	r3, [r7, #4]
 8001388:	4b23      	ldr	r3, [pc, #140]	; (8001418 <SystemClock_Config+0xd4>)
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001390:	4a21      	ldr	r2, [pc, #132]	; (8001418 <SystemClock_Config+0xd4>)
 8001392:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001396:	6013      	str	r3, [r2, #0]
 8001398:	4b1f      	ldr	r3, [pc, #124]	; (8001418 <SystemClock_Config+0xd4>)
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80013a0:	607b      	str	r3, [r7, #4]
 80013a2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80013a4:	2302      	movs	r3, #2
 80013a6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80013a8:	2301      	movs	r3, #1
 80013aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80013ac:	2310      	movs	r3, #16
 80013ae:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80013b0:	2302      	movs	r3, #2
 80013b2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80013b4:	2300      	movs	r3, #0
 80013b6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80013b8:	2308      	movs	r3, #8
 80013ba:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 80;
 80013bc:	2350      	movs	r3, #80	; 0x50
 80013be:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80013c0:	2302      	movs	r3, #2
 80013c2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80013c4:	2307      	movs	r3, #7
 80013c6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80013c8:	f107 0320 	add.w	r3, r7, #32
 80013cc:	4618      	mov	r0, r3
 80013ce:	f000 fe15 	bl	8001ffc <HAL_RCC_OscConfig>
 80013d2:	4603      	mov	r3, r0
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d001      	beq.n	80013dc <SystemClock_Config+0x98>
  {
    Error_Handler();
 80013d8:	f000 f820 	bl	800141c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80013dc:	230f      	movs	r3, #15
 80013de:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80013e0:	2302      	movs	r3, #2
 80013e2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV4;
 80013e4:	2390      	movs	r3, #144	; 0x90
 80013e6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80013e8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013ec:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV16;
 80013ee:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80013f2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80013f4:	f107 030c 	add.w	r3, r7, #12
 80013f8:	2100      	movs	r1, #0
 80013fa:	4618      	mov	r0, r3
 80013fc:	f001 f876 	bl	80024ec <HAL_RCC_ClockConfig>
 8001400:	4603      	mov	r3, r0
 8001402:	2b00      	cmp	r3, #0
 8001404:	d001      	beq.n	800140a <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8001406:	f000 f809 	bl	800141c <Error_Handler>
  }
}
 800140a:	bf00      	nop
 800140c:	3750      	adds	r7, #80	; 0x50
 800140e:	46bd      	mov	sp, r7
 8001410:	bd80      	pop	{r7, pc}
 8001412:	bf00      	nop
 8001414:	40023800 	.word	0x40023800
 8001418:	40007000 	.word	0x40007000

0800141c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800141c:	b480      	push	{r7}
 800141e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001420:	b672      	cpsid	i
}
 8001422:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001424:	e7fe      	b.n	8001424 <Error_Handler+0x8>
	...

08001428 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b082      	sub	sp, #8
 800142c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800142e:	2300      	movs	r3, #0
 8001430:	607b      	str	r3, [r7, #4]
 8001432:	4b10      	ldr	r3, [pc, #64]	; (8001474 <HAL_MspInit+0x4c>)
 8001434:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001436:	4a0f      	ldr	r2, [pc, #60]	; (8001474 <HAL_MspInit+0x4c>)
 8001438:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800143c:	6453      	str	r3, [r2, #68]	; 0x44
 800143e:	4b0d      	ldr	r3, [pc, #52]	; (8001474 <HAL_MspInit+0x4c>)
 8001440:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001442:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001446:	607b      	str	r3, [r7, #4]
 8001448:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800144a:	2300      	movs	r3, #0
 800144c:	603b      	str	r3, [r7, #0]
 800144e:	4b09      	ldr	r3, [pc, #36]	; (8001474 <HAL_MspInit+0x4c>)
 8001450:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001452:	4a08      	ldr	r2, [pc, #32]	; (8001474 <HAL_MspInit+0x4c>)
 8001454:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001458:	6413      	str	r3, [r2, #64]	; 0x40
 800145a:	4b06      	ldr	r3, [pc, #24]	; (8001474 <HAL_MspInit+0x4c>)
 800145c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800145e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001462:	603b      	str	r3, [r7, #0]
 8001464:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001466:	2007      	movs	r0, #7
 8001468:	f000 fa9a 	bl	80019a0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800146c:	bf00      	nop
 800146e:	3708      	adds	r7, #8
 8001470:	46bd      	mov	sp, r7
 8001472:	bd80      	pop	{r7, pc}
 8001474:	40023800 	.word	0x40023800

08001478 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001478:	b480      	push	{r7}
 800147a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800147c:	e7fe      	b.n	800147c <NMI_Handler+0x4>

0800147e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800147e:	b480      	push	{r7}
 8001480:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001482:	e7fe      	b.n	8001482 <HardFault_Handler+0x4>

08001484 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001484:	b480      	push	{r7}
 8001486:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001488:	e7fe      	b.n	8001488 <MemManage_Handler+0x4>

0800148a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800148a:	b480      	push	{r7}
 800148c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800148e:	e7fe      	b.n	800148e <BusFault_Handler+0x4>

08001490 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001490:	b480      	push	{r7}
 8001492:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001494:	e7fe      	b.n	8001494 <UsageFault_Handler+0x4>

08001496 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001496:	b480      	push	{r7}
 8001498:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800149a:	bf00      	nop
 800149c:	46bd      	mov	sp, r7
 800149e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a2:	4770      	bx	lr

080014a4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014a4:	b480      	push	{r7}
 80014a6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014a8:	bf00      	nop
 80014aa:	46bd      	mov	sp, r7
 80014ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b0:	4770      	bx	lr

080014b2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80014b2:	b480      	push	{r7}
 80014b4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80014b6:	bf00      	nop
 80014b8:	46bd      	mov	sp, r7
 80014ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014be:	4770      	bx	lr

080014c0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80014c4:	f000 f976 	bl	80017b4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80014c8:	bf00      	nop
 80014ca:	bd80      	pop	{r7, pc}

080014cc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b086      	sub	sp, #24
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80014d4:	4a14      	ldr	r2, [pc, #80]	; (8001528 <_sbrk+0x5c>)
 80014d6:	4b15      	ldr	r3, [pc, #84]	; (800152c <_sbrk+0x60>)
 80014d8:	1ad3      	subs	r3, r2, r3
 80014da:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80014dc:	697b      	ldr	r3, [r7, #20]
 80014de:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80014e0:	4b13      	ldr	r3, [pc, #76]	; (8001530 <_sbrk+0x64>)
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d102      	bne.n	80014ee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80014e8:	4b11      	ldr	r3, [pc, #68]	; (8001530 <_sbrk+0x64>)
 80014ea:	4a12      	ldr	r2, [pc, #72]	; (8001534 <_sbrk+0x68>)
 80014ec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80014ee:	4b10      	ldr	r3, [pc, #64]	; (8001530 <_sbrk+0x64>)
 80014f0:	681a      	ldr	r2, [r3, #0]
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	4413      	add	r3, r2
 80014f6:	693a      	ldr	r2, [r7, #16]
 80014f8:	429a      	cmp	r2, r3
 80014fa:	d207      	bcs.n	800150c <_sbrk+0x40>
  {
    errno = ENOMEM;
 80014fc:	f001 fe88 	bl	8003210 <__errno>
 8001500:	4603      	mov	r3, r0
 8001502:	220c      	movs	r2, #12
 8001504:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001506:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800150a:	e009      	b.n	8001520 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800150c:	4b08      	ldr	r3, [pc, #32]	; (8001530 <_sbrk+0x64>)
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001512:	4b07      	ldr	r3, [pc, #28]	; (8001530 <_sbrk+0x64>)
 8001514:	681a      	ldr	r2, [r3, #0]
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	4413      	add	r3, r2
 800151a:	4a05      	ldr	r2, [pc, #20]	; (8001530 <_sbrk+0x64>)
 800151c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800151e:	68fb      	ldr	r3, [r7, #12]
}
 8001520:	4618      	mov	r0, r3
 8001522:	3718      	adds	r7, #24
 8001524:	46bd      	mov	sp, r7
 8001526:	bd80      	pop	{r7, pc}
 8001528:	20018000 	.word	0x20018000
 800152c:	00000400 	.word	0x00000400
 8001530:	20000180 	.word	0x20000180
 8001534:	20000318 	.word	0x20000318

08001538 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001538:	b480      	push	{r7}
 800153a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800153c:	4b06      	ldr	r3, [pc, #24]	; (8001558 <SystemInit+0x20>)
 800153e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001542:	4a05      	ldr	r2, [pc, #20]	; (8001558 <SystemInit+0x20>)
 8001544:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001548:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800154c:	bf00      	nop
 800154e:	46bd      	mov	sp, r7
 8001550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001554:	4770      	bx	lr
 8001556:	bf00      	nop
 8001558:	e000ed00 	.word	0xe000ed00

0800155c <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	b08a      	sub	sp, #40	; 0x28
 8001560:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001562:	f107 0320 	add.w	r3, r7, #32
 8001566:	2200      	movs	r2, #0
 8001568:	601a      	str	r2, [r3, #0]
 800156a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800156c:	1d3b      	adds	r3, r7, #4
 800156e:	2200      	movs	r2, #0
 8001570:	601a      	str	r2, [r3, #0]
 8001572:	605a      	str	r2, [r3, #4]
 8001574:	609a      	str	r2, [r3, #8]
 8001576:	60da      	str	r2, [r3, #12]
 8001578:	611a      	str	r2, [r3, #16]
 800157a:	615a      	str	r2, [r3, #20]
 800157c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800157e:	4b22      	ldr	r3, [pc, #136]	; (8001608 <MX_TIM2_Init+0xac>)
 8001580:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001584:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 692-1;
 8001586:	4b20      	ldr	r3, [pc, #128]	; (8001608 <MX_TIM2_Init+0xac>)
 8001588:	f240 22b3 	movw	r2, #691	; 0x2b3
 800158c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800158e:	4b1e      	ldr	r3, [pc, #120]	; (8001608 <MX_TIM2_Init+0xac>)
 8001590:	2200      	movs	r2, #0
 8001592:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 255-1;
 8001594:	4b1c      	ldr	r3, [pc, #112]	; (8001608 <MX_TIM2_Init+0xac>)
 8001596:	22fe      	movs	r2, #254	; 0xfe
 8001598:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800159a:	4b1b      	ldr	r3, [pc, #108]	; (8001608 <MX_TIM2_Init+0xac>)
 800159c:	2200      	movs	r2, #0
 800159e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015a0:	4b19      	ldr	r3, [pc, #100]	; (8001608 <MX_TIM2_Init+0xac>)
 80015a2:	2200      	movs	r2, #0
 80015a4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80015a6:	4818      	ldr	r0, [pc, #96]	; (8001608 <MX_TIM2_Init+0xac>)
 80015a8:	f001 f9a8 	bl	80028fc <HAL_TIM_PWM_Init>
 80015ac:	4603      	mov	r3, r0
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d001      	beq.n	80015b6 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 80015b2:	f7ff ff33 	bl	800141c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015b6:	2300      	movs	r3, #0
 80015b8:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015ba:	2300      	movs	r3, #0
 80015bc:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80015be:	f107 0320 	add.w	r3, r7, #32
 80015c2:	4619      	mov	r1, r3
 80015c4:	4810      	ldr	r0, [pc, #64]	; (8001608 <MX_TIM2_Init+0xac>)
 80015c6:	f001 fd8d 	bl	80030e4 <HAL_TIMEx_MasterConfigSynchronization>
 80015ca:	4603      	mov	r3, r0
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d001      	beq.n	80015d4 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 80015d0:	f7ff ff24 	bl	800141c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80015d4:	2360      	movs	r3, #96	; 0x60
 80015d6:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80015d8:	2300      	movs	r3, #0
 80015da:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80015dc:	2300      	movs	r3, #0
 80015de:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80015e0:	2300      	movs	r3, #0
 80015e2:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80015e4:	1d3b      	adds	r3, r7, #4
 80015e6:	2200      	movs	r2, #0
 80015e8:	4619      	mov	r1, r3
 80015ea:	4807      	ldr	r0, [pc, #28]	; (8001608 <MX_TIM2_Init+0xac>)
 80015ec:	f001 fa86 	bl	8002afc <HAL_TIM_PWM_ConfigChannel>
 80015f0:	4603      	mov	r3, r0
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d001      	beq.n	80015fa <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 80015f6:	f7ff ff11 	bl	800141c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80015fa:	4803      	ldr	r0, [pc, #12]	; (8001608 <MX_TIM2_Init+0xac>)
 80015fc:	f000 f826 	bl	800164c <HAL_TIM_MspPostInit>

}
 8001600:	bf00      	nop
 8001602:	3728      	adds	r7, #40	; 0x28
 8001604:	46bd      	mov	sp, r7
 8001606:	bd80      	pop	{r7, pc}
 8001608:	20000184 	.word	0x20000184

0800160c <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 800160c:	b480      	push	{r7}
 800160e:	b085      	sub	sp, #20
 8001610:	af00      	add	r7, sp, #0
 8001612:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800161c:	d10d      	bne.n	800163a <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800161e:	2300      	movs	r3, #0
 8001620:	60fb      	str	r3, [r7, #12]
 8001622:	4b09      	ldr	r3, [pc, #36]	; (8001648 <HAL_TIM_PWM_MspInit+0x3c>)
 8001624:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001626:	4a08      	ldr	r2, [pc, #32]	; (8001648 <HAL_TIM_PWM_MspInit+0x3c>)
 8001628:	f043 0301 	orr.w	r3, r3, #1
 800162c:	6413      	str	r3, [r2, #64]	; 0x40
 800162e:	4b06      	ldr	r3, [pc, #24]	; (8001648 <HAL_TIM_PWM_MspInit+0x3c>)
 8001630:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001632:	f003 0301 	and.w	r3, r3, #1
 8001636:	60fb      	str	r3, [r7, #12]
 8001638:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 800163a:	bf00      	nop
 800163c:	3714      	adds	r7, #20
 800163e:	46bd      	mov	sp, r7
 8001640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001644:	4770      	bx	lr
 8001646:	bf00      	nop
 8001648:	40023800 	.word	0x40023800

0800164c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	b088      	sub	sp, #32
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001654:	f107 030c 	add.w	r3, r7, #12
 8001658:	2200      	movs	r2, #0
 800165a:	601a      	str	r2, [r3, #0]
 800165c:	605a      	str	r2, [r3, #4]
 800165e:	609a      	str	r2, [r3, #8]
 8001660:	60da      	str	r2, [r3, #12]
 8001662:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800166c:	d11d      	bne.n	80016aa <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800166e:	2300      	movs	r3, #0
 8001670:	60bb      	str	r3, [r7, #8]
 8001672:	4b10      	ldr	r3, [pc, #64]	; (80016b4 <HAL_TIM_MspPostInit+0x68>)
 8001674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001676:	4a0f      	ldr	r2, [pc, #60]	; (80016b4 <HAL_TIM_MspPostInit+0x68>)
 8001678:	f043 0301 	orr.w	r3, r3, #1
 800167c:	6313      	str	r3, [r2, #48]	; 0x30
 800167e:	4b0d      	ldr	r3, [pc, #52]	; (80016b4 <HAL_TIM_MspPostInit+0x68>)
 8001680:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001682:	f003 0301 	and.w	r3, r3, #1
 8001686:	60bb      	str	r3, [r7, #8]
 8001688:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800168a:	2301      	movs	r3, #1
 800168c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800168e:	2302      	movs	r3, #2
 8001690:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001692:	2300      	movs	r3, #0
 8001694:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001696:	2300      	movs	r3, #0
 8001698:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800169a:	2301      	movs	r3, #1
 800169c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800169e:	f107 030c 	add.w	r3, r7, #12
 80016a2:	4619      	mov	r1, r3
 80016a4:	4804      	ldr	r0, [pc, #16]	; (80016b8 <HAL_TIM_MspPostInit+0x6c>)
 80016a6:	f000 f9af 	bl	8001a08 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80016aa:	bf00      	nop
 80016ac:	3720      	adds	r7, #32
 80016ae:	46bd      	mov	sp, r7
 80016b0:	bd80      	pop	{r7, pc}
 80016b2:	bf00      	nop
 80016b4:	40023800 	.word	0x40023800
 80016b8:	40020000 	.word	0x40020000

080016bc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80016bc:	f8df d034 	ldr.w	sp, [pc, #52]	; 80016f4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80016c0:	480d      	ldr	r0, [pc, #52]	; (80016f8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80016c2:	490e      	ldr	r1, [pc, #56]	; (80016fc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80016c4:	4a0e      	ldr	r2, [pc, #56]	; (8001700 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80016c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80016c8:	e002      	b.n	80016d0 <LoopCopyDataInit>

080016ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80016ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80016cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80016ce:	3304      	adds	r3, #4

080016d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80016d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80016d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80016d4:	d3f9      	bcc.n	80016ca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80016d6:	4a0b      	ldr	r2, [pc, #44]	; (8001704 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80016d8:	4c0b      	ldr	r4, [pc, #44]	; (8001708 <LoopFillZerobss+0x26>)
  movs r3, #0
 80016da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80016dc:	e001      	b.n	80016e2 <LoopFillZerobss>

080016de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80016de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80016e0:	3204      	adds	r2, #4

080016e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80016e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80016e4:	d3fb      	bcc.n	80016de <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80016e6:	f7ff ff27 	bl	8001538 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80016ea:	f001 fd97 	bl	800321c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80016ee:	f7ff fcf7 	bl	80010e0 <main>
  bx  lr    
 80016f2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80016f4:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80016f8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80016fc:	200000c0 	.word	0x200000c0
  ldr r2, =_sidata
 8001700:	08003bf0 	.word	0x08003bf0
  ldr r2, =_sbss
 8001704:	200000c0 	.word	0x200000c0
  ldr r4, =_ebss
 8001708:	20000318 	.word	0x20000318

0800170c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800170c:	e7fe      	b.n	800170c <ADC_IRQHandler>
	...

08001710 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001714:	4b0e      	ldr	r3, [pc, #56]	; (8001750 <HAL_Init+0x40>)
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	4a0d      	ldr	r2, [pc, #52]	; (8001750 <HAL_Init+0x40>)
 800171a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800171e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001720:	4b0b      	ldr	r3, [pc, #44]	; (8001750 <HAL_Init+0x40>)
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	4a0a      	ldr	r2, [pc, #40]	; (8001750 <HAL_Init+0x40>)
 8001726:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800172a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800172c:	4b08      	ldr	r3, [pc, #32]	; (8001750 <HAL_Init+0x40>)
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	4a07      	ldr	r2, [pc, #28]	; (8001750 <HAL_Init+0x40>)
 8001732:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001736:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001738:	2003      	movs	r0, #3
 800173a:	f000 f931 	bl	80019a0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800173e:	2000      	movs	r0, #0
 8001740:	f000 f808 	bl	8001754 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001744:	f7ff fe70 	bl	8001428 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001748:	2300      	movs	r3, #0
}
 800174a:	4618      	mov	r0, r3
 800174c:	bd80      	pop	{r7, pc}
 800174e:	bf00      	nop
 8001750:	40023c00 	.word	0x40023c00

08001754 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	b082      	sub	sp, #8
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800175c:	4b12      	ldr	r3, [pc, #72]	; (80017a8 <HAL_InitTick+0x54>)
 800175e:	681a      	ldr	r2, [r3, #0]
 8001760:	4b12      	ldr	r3, [pc, #72]	; (80017ac <HAL_InitTick+0x58>)
 8001762:	781b      	ldrb	r3, [r3, #0]
 8001764:	4619      	mov	r1, r3
 8001766:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800176a:	fbb3 f3f1 	udiv	r3, r3, r1
 800176e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001772:	4618      	mov	r0, r3
 8001774:	f000 f93b 	bl	80019ee <HAL_SYSTICK_Config>
 8001778:	4603      	mov	r3, r0
 800177a:	2b00      	cmp	r3, #0
 800177c:	d001      	beq.n	8001782 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800177e:	2301      	movs	r3, #1
 8001780:	e00e      	b.n	80017a0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	2b0f      	cmp	r3, #15
 8001786:	d80a      	bhi.n	800179e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001788:	2200      	movs	r2, #0
 800178a:	6879      	ldr	r1, [r7, #4]
 800178c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001790:	f000 f911 	bl	80019b6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001794:	4a06      	ldr	r2, [pc, #24]	; (80017b0 <HAL_InitTick+0x5c>)
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800179a:	2300      	movs	r3, #0
 800179c:	e000      	b.n	80017a0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800179e:	2301      	movs	r3, #1
}
 80017a0:	4618      	mov	r0, r3
 80017a2:	3708      	adds	r7, #8
 80017a4:	46bd      	mov	sp, r7
 80017a6:	bd80      	pop	{r7, pc}
 80017a8:	20000064 	.word	0x20000064
 80017ac:	2000006c 	.word	0x2000006c
 80017b0:	20000068 	.word	0x20000068

080017b4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80017b4:	b480      	push	{r7}
 80017b6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80017b8:	4b06      	ldr	r3, [pc, #24]	; (80017d4 <HAL_IncTick+0x20>)
 80017ba:	781b      	ldrb	r3, [r3, #0]
 80017bc:	461a      	mov	r2, r3
 80017be:	4b06      	ldr	r3, [pc, #24]	; (80017d8 <HAL_IncTick+0x24>)
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	4413      	add	r3, r2
 80017c4:	4a04      	ldr	r2, [pc, #16]	; (80017d8 <HAL_IncTick+0x24>)
 80017c6:	6013      	str	r3, [r2, #0]
}
 80017c8:	bf00      	nop
 80017ca:	46bd      	mov	sp, r7
 80017cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d0:	4770      	bx	lr
 80017d2:	bf00      	nop
 80017d4:	2000006c 	.word	0x2000006c
 80017d8:	200001cc 	.word	0x200001cc

080017dc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80017dc:	b480      	push	{r7}
 80017de:	af00      	add	r7, sp, #0
  return uwTick;
 80017e0:	4b03      	ldr	r3, [pc, #12]	; (80017f0 <HAL_GetTick+0x14>)
 80017e2:	681b      	ldr	r3, [r3, #0]
}
 80017e4:	4618      	mov	r0, r3
 80017e6:	46bd      	mov	sp, r7
 80017e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ec:	4770      	bx	lr
 80017ee:	bf00      	nop
 80017f0:	200001cc 	.word	0x200001cc

080017f4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b084      	sub	sp, #16
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80017fc:	f7ff ffee 	bl	80017dc <HAL_GetTick>
 8001800:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800180c:	d005      	beq.n	800181a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800180e:	4b0a      	ldr	r3, [pc, #40]	; (8001838 <HAL_Delay+0x44>)
 8001810:	781b      	ldrb	r3, [r3, #0]
 8001812:	461a      	mov	r2, r3
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	4413      	add	r3, r2
 8001818:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800181a:	bf00      	nop
 800181c:	f7ff ffde 	bl	80017dc <HAL_GetTick>
 8001820:	4602      	mov	r2, r0
 8001822:	68bb      	ldr	r3, [r7, #8]
 8001824:	1ad3      	subs	r3, r2, r3
 8001826:	68fa      	ldr	r2, [r7, #12]
 8001828:	429a      	cmp	r2, r3
 800182a:	d8f7      	bhi.n	800181c <HAL_Delay+0x28>
  {
  }
}
 800182c:	bf00      	nop
 800182e:	bf00      	nop
 8001830:	3710      	adds	r7, #16
 8001832:	46bd      	mov	sp, r7
 8001834:	bd80      	pop	{r7, pc}
 8001836:	bf00      	nop
 8001838:	2000006c 	.word	0x2000006c

0800183c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800183c:	b480      	push	{r7}
 800183e:	b085      	sub	sp, #20
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	f003 0307 	and.w	r3, r3, #7
 800184a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800184c:	4b0c      	ldr	r3, [pc, #48]	; (8001880 <__NVIC_SetPriorityGrouping+0x44>)
 800184e:	68db      	ldr	r3, [r3, #12]
 8001850:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001852:	68ba      	ldr	r2, [r7, #8]
 8001854:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001858:	4013      	ands	r3, r2
 800185a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001860:	68bb      	ldr	r3, [r7, #8]
 8001862:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001864:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001868:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800186c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800186e:	4a04      	ldr	r2, [pc, #16]	; (8001880 <__NVIC_SetPriorityGrouping+0x44>)
 8001870:	68bb      	ldr	r3, [r7, #8]
 8001872:	60d3      	str	r3, [r2, #12]
}
 8001874:	bf00      	nop
 8001876:	3714      	adds	r7, #20
 8001878:	46bd      	mov	sp, r7
 800187a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187e:	4770      	bx	lr
 8001880:	e000ed00 	.word	0xe000ed00

08001884 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001884:	b480      	push	{r7}
 8001886:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001888:	4b04      	ldr	r3, [pc, #16]	; (800189c <__NVIC_GetPriorityGrouping+0x18>)
 800188a:	68db      	ldr	r3, [r3, #12]
 800188c:	0a1b      	lsrs	r3, r3, #8
 800188e:	f003 0307 	and.w	r3, r3, #7
}
 8001892:	4618      	mov	r0, r3
 8001894:	46bd      	mov	sp, r7
 8001896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189a:	4770      	bx	lr
 800189c:	e000ed00 	.word	0xe000ed00

080018a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80018a0:	b480      	push	{r7}
 80018a2:	b083      	sub	sp, #12
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	4603      	mov	r3, r0
 80018a8:	6039      	str	r1, [r7, #0]
 80018aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	db0a      	blt.n	80018ca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018b4:	683b      	ldr	r3, [r7, #0]
 80018b6:	b2da      	uxtb	r2, r3
 80018b8:	490c      	ldr	r1, [pc, #48]	; (80018ec <__NVIC_SetPriority+0x4c>)
 80018ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018be:	0112      	lsls	r2, r2, #4
 80018c0:	b2d2      	uxtb	r2, r2
 80018c2:	440b      	add	r3, r1
 80018c4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80018c8:	e00a      	b.n	80018e0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018ca:	683b      	ldr	r3, [r7, #0]
 80018cc:	b2da      	uxtb	r2, r3
 80018ce:	4908      	ldr	r1, [pc, #32]	; (80018f0 <__NVIC_SetPriority+0x50>)
 80018d0:	79fb      	ldrb	r3, [r7, #7]
 80018d2:	f003 030f 	and.w	r3, r3, #15
 80018d6:	3b04      	subs	r3, #4
 80018d8:	0112      	lsls	r2, r2, #4
 80018da:	b2d2      	uxtb	r2, r2
 80018dc:	440b      	add	r3, r1
 80018de:	761a      	strb	r2, [r3, #24]
}
 80018e0:	bf00      	nop
 80018e2:	370c      	adds	r7, #12
 80018e4:	46bd      	mov	sp, r7
 80018e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ea:	4770      	bx	lr
 80018ec:	e000e100 	.word	0xe000e100
 80018f0:	e000ed00 	.word	0xe000ed00

080018f4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018f4:	b480      	push	{r7}
 80018f6:	b089      	sub	sp, #36	; 0x24
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	60f8      	str	r0, [r7, #12]
 80018fc:	60b9      	str	r1, [r7, #8]
 80018fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	f003 0307 	and.w	r3, r3, #7
 8001906:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001908:	69fb      	ldr	r3, [r7, #28]
 800190a:	f1c3 0307 	rsb	r3, r3, #7
 800190e:	2b04      	cmp	r3, #4
 8001910:	bf28      	it	cs
 8001912:	2304      	movcs	r3, #4
 8001914:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001916:	69fb      	ldr	r3, [r7, #28]
 8001918:	3304      	adds	r3, #4
 800191a:	2b06      	cmp	r3, #6
 800191c:	d902      	bls.n	8001924 <NVIC_EncodePriority+0x30>
 800191e:	69fb      	ldr	r3, [r7, #28]
 8001920:	3b03      	subs	r3, #3
 8001922:	e000      	b.n	8001926 <NVIC_EncodePriority+0x32>
 8001924:	2300      	movs	r3, #0
 8001926:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001928:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800192c:	69bb      	ldr	r3, [r7, #24]
 800192e:	fa02 f303 	lsl.w	r3, r2, r3
 8001932:	43da      	mvns	r2, r3
 8001934:	68bb      	ldr	r3, [r7, #8]
 8001936:	401a      	ands	r2, r3
 8001938:	697b      	ldr	r3, [r7, #20]
 800193a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800193c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001940:	697b      	ldr	r3, [r7, #20]
 8001942:	fa01 f303 	lsl.w	r3, r1, r3
 8001946:	43d9      	mvns	r1, r3
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800194c:	4313      	orrs	r3, r2
         );
}
 800194e:	4618      	mov	r0, r3
 8001950:	3724      	adds	r7, #36	; 0x24
 8001952:	46bd      	mov	sp, r7
 8001954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001958:	4770      	bx	lr
	...

0800195c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	b082      	sub	sp, #8
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	3b01      	subs	r3, #1
 8001968:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800196c:	d301      	bcc.n	8001972 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800196e:	2301      	movs	r3, #1
 8001970:	e00f      	b.n	8001992 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001972:	4a0a      	ldr	r2, [pc, #40]	; (800199c <SysTick_Config+0x40>)
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	3b01      	subs	r3, #1
 8001978:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800197a:	210f      	movs	r1, #15
 800197c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001980:	f7ff ff8e 	bl	80018a0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001984:	4b05      	ldr	r3, [pc, #20]	; (800199c <SysTick_Config+0x40>)
 8001986:	2200      	movs	r2, #0
 8001988:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800198a:	4b04      	ldr	r3, [pc, #16]	; (800199c <SysTick_Config+0x40>)
 800198c:	2207      	movs	r2, #7
 800198e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001990:	2300      	movs	r3, #0
}
 8001992:	4618      	mov	r0, r3
 8001994:	3708      	adds	r7, #8
 8001996:	46bd      	mov	sp, r7
 8001998:	bd80      	pop	{r7, pc}
 800199a:	bf00      	nop
 800199c:	e000e010 	.word	0xe000e010

080019a0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b082      	sub	sp, #8
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80019a8:	6878      	ldr	r0, [r7, #4]
 80019aa:	f7ff ff47 	bl	800183c <__NVIC_SetPriorityGrouping>
}
 80019ae:	bf00      	nop
 80019b0:	3708      	adds	r7, #8
 80019b2:	46bd      	mov	sp, r7
 80019b4:	bd80      	pop	{r7, pc}

080019b6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80019b6:	b580      	push	{r7, lr}
 80019b8:	b086      	sub	sp, #24
 80019ba:	af00      	add	r7, sp, #0
 80019bc:	4603      	mov	r3, r0
 80019be:	60b9      	str	r1, [r7, #8]
 80019c0:	607a      	str	r2, [r7, #4]
 80019c2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80019c4:	2300      	movs	r3, #0
 80019c6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80019c8:	f7ff ff5c 	bl	8001884 <__NVIC_GetPriorityGrouping>
 80019cc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80019ce:	687a      	ldr	r2, [r7, #4]
 80019d0:	68b9      	ldr	r1, [r7, #8]
 80019d2:	6978      	ldr	r0, [r7, #20]
 80019d4:	f7ff ff8e 	bl	80018f4 <NVIC_EncodePriority>
 80019d8:	4602      	mov	r2, r0
 80019da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019de:	4611      	mov	r1, r2
 80019e0:	4618      	mov	r0, r3
 80019e2:	f7ff ff5d 	bl	80018a0 <__NVIC_SetPriority>
}
 80019e6:	bf00      	nop
 80019e8:	3718      	adds	r7, #24
 80019ea:	46bd      	mov	sp, r7
 80019ec:	bd80      	pop	{r7, pc}

080019ee <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80019ee:	b580      	push	{r7, lr}
 80019f0:	b082      	sub	sp, #8
 80019f2:	af00      	add	r7, sp, #0
 80019f4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80019f6:	6878      	ldr	r0, [r7, #4]
 80019f8:	f7ff ffb0 	bl	800195c <SysTick_Config>
 80019fc:	4603      	mov	r3, r0
}
 80019fe:	4618      	mov	r0, r3
 8001a00:	3708      	adds	r7, #8
 8001a02:	46bd      	mov	sp, r7
 8001a04:	bd80      	pop	{r7, pc}
	...

08001a08 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a08:	b480      	push	{r7}
 8001a0a:	b089      	sub	sp, #36	; 0x24
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
 8001a10:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001a12:	2300      	movs	r3, #0
 8001a14:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001a16:	2300      	movs	r3, #0
 8001a18:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a1e:	2300      	movs	r3, #0
 8001a20:	61fb      	str	r3, [r7, #28]
 8001a22:	e159      	b.n	8001cd8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001a24:	2201      	movs	r2, #1
 8001a26:	69fb      	ldr	r3, [r7, #28]
 8001a28:	fa02 f303 	lsl.w	r3, r2, r3
 8001a2c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001a2e:	683b      	ldr	r3, [r7, #0]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	697a      	ldr	r2, [r7, #20]
 8001a34:	4013      	ands	r3, r2
 8001a36:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001a38:	693a      	ldr	r2, [r7, #16]
 8001a3a:	697b      	ldr	r3, [r7, #20]
 8001a3c:	429a      	cmp	r2, r3
 8001a3e:	f040 8148 	bne.w	8001cd2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001a42:	683b      	ldr	r3, [r7, #0]
 8001a44:	685b      	ldr	r3, [r3, #4]
 8001a46:	f003 0303 	and.w	r3, r3, #3
 8001a4a:	2b01      	cmp	r3, #1
 8001a4c:	d005      	beq.n	8001a5a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a4e:	683b      	ldr	r3, [r7, #0]
 8001a50:	685b      	ldr	r3, [r3, #4]
 8001a52:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001a56:	2b02      	cmp	r3, #2
 8001a58:	d130      	bne.n	8001abc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	689b      	ldr	r3, [r3, #8]
 8001a5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001a60:	69fb      	ldr	r3, [r7, #28]
 8001a62:	005b      	lsls	r3, r3, #1
 8001a64:	2203      	movs	r2, #3
 8001a66:	fa02 f303 	lsl.w	r3, r2, r3
 8001a6a:	43db      	mvns	r3, r3
 8001a6c:	69ba      	ldr	r2, [r7, #24]
 8001a6e:	4013      	ands	r3, r2
 8001a70:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001a72:	683b      	ldr	r3, [r7, #0]
 8001a74:	68da      	ldr	r2, [r3, #12]
 8001a76:	69fb      	ldr	r3, [r7, #28]
 8001a78:	005b      	lsls	r3, r3, #1
 8001a7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a7e:	69ba      	ldr	r2, [r7, #24]
 8001a80:	4313      	orrs	r3, r2
 8001a82:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	69ba      	ldr	r2, [r7, #24]
 8001a88:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	685b      	ldr	r3, [r3, #4]
 8001a8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001a90:	2201      	movs	r2, #1
 8001a92:	69fb      	ldr	r3, [r7, #28]
 8001a94:	fa02 f303 	lsl.w	r3, r2, r3
 8001a98:	43db      	mvns	r3, r3
 8001a9a:	69ba      	ldr	r2, [r7, #24]
 8001a9c:	4013      	ands	r3, r2
 8001a9e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001aa0:	683b      	ldr	r3, [r7, #0]
 8001aa2:	685b      	ldr	r3, [r3, #4]
 8001aa4:	091b      	lsrs	r3, r3, #4
 8001aa6:	f003 0201 	and.w	r2, r3, #1
 8001aaa:	69fb      	ldr	r3, [r7, #28]
 8001aac:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab0:	69ba      	ldr	r2, [r7, #24]
 8001ab2:	4313      	orrs	r3, r2
 8001ab4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	69ba      	ldr	r2, [r7, #24]
 8001aba:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001abc:	683b      	ldr	r3, [r7, #0]
 8001abe:	685b      	ldr	r3, [r3, #4]
 8001ac0:	f003 0303 	and.w	r3, r3, #3
 8001ac4:	2b03      	cmp	r3, #3
 8001ac6:	d017      	beq.n	8001af8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	68db      	ldr	r3, [r3, #12]
 8001acc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001ace:	69fb      	ldr	r3, [r7, #28]
 8001ad0:	005b      	lsls	r3, r3, #1
 8001ad2:	2203      	movs	r2, #3
 8001ad4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ad8:	43db      	mvns	r3, r3
 8001ada:	69ba      	ldr	r2, [r7, #24]
 8001adc:	4013      	ands	r3, r2
 8001ade:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001ae0:	683b      	ldr	r3, [r7, #0]
 8001ae2:	689a      	ldr	r2, [r3, #8]
 8001ae4:	69fb      	ldr	r3, [r7, #28]
 8001ae6:	005b      	lsls	r3, r3, #1
 8001ae8:	fa02 f303 	lsl.w	r3, r2, r3
 8001aec:	69ba      	ldr	r2, [r7, #24]
 8001aee:	4313      	orrs	r3, r2
 8001af0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	69ba      	ldr	r2, [r7, #24]
 8001af6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001af8:	683b      	ldr	r3, [r7, #0]
 8001afa:	685b      	ldr	r3, [r3, #4]
 8001afc:	f003 0303 	and.w	r3, r3, #3
 8001b00:	2b02      	cmp	r3, #2
 8001b02:	d123      	bne.n	8001b4c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001b04:	69fb      	ldr	r3, [r7, #28]
 8001b06:	08da      	lsrs	r2, r3, #3
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	3208      	adds	r2, #8
 8001b0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b10:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001b12:	69fb      	ldr	r3, [r7, #28]
 8001b14:	f003 0307 	and.w	r3, r3, #7
 8001b18:	009b      	lsls	r3, r3, #2
 8001b1a:	220f      	movs	r2, #15
 8001b1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b20:	43db      	mvns	r3, r3
 8001b22:	69ba      	ldr	r2, [r7, #24]
 8001b24:	4013      	ands	r3, r2
 8001b26:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001b28:	683b      	ldr	r3, [r7, #0]
 8001b2a:	691a      	ldr	r2, [r3, #16]
 8001b2c:	69fb      	ldr	r3, [r7, #28]
 8001b2e:	f003 0307 	and.w	r3, r3, #7
 8001b32:	009b      	lsls	r3, r3, #2
 8001b34:	fa02 f303 	lsl.w	r3, r2, r3
 8001b38:	69ba      	ldr	r2, [r7, #24]
 8001b3a:	4313      	orrs	r3, r2
 8001b3c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001b3e:	69fb      	ldr	r3, [r7, #28]
 8001b40:	08da      	lsrs	r2, r3, #3
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	3208      	adds	r2, #8
 8001b46:	69b9      	ldr	r1, [r7, #24]
 8001b48:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001b52:	69fb      	ldr	r3, [r7, #28]
 8001b54:	005b      	lsls	r3, r3, #1
 8001b56:	2203      	movs	r2, #3
 8001b58:	fa02 f303 	lsl.w	r3, r2, r3
 8001b5c:	43db      	mvns	r3, r3
 8001b5e:	69ba      	ldr	r2, [r7, #24]
 8001b60:	4013      	ands	r3, r2
 8001b62:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001b64:	683b      	ldr	r3, [r7, #0]
 8001b66:	685b      	ldr	r3, [r3, #4]
 8001b68:	f003 0203 	and.w	r2, r3, #3
 8001b6c:	69fb      	ldr	r3, [r7, #28]
 8001b6e:	005b      	lsls	r3, r3, #1
 8001b70:	fa02 f303 	lsl.w	r3, r2, r3
 8001b74:	69ba      	ldr	r2, [r7, #24]
 8001b76:	4313      	orrs	r3, r2
 8001b78:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	69ba      	ldr	r2, [r7, #24]
 8001b7e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001b80:	683b      	ldr	r3, [r7, #0]
 8001b82:	685b      	ldr	r3, [r3, #4]
 8001b84:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	f000 80a2 	beq.w	8001cd2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b8e:	2300      	movs	r3, #0
 8001b90:	60fb      	str	r3, [r7, #12]
 8001b92:	4b57      	ldr	r3, [pc, #348]	; (8001cf0 <HAL_GPIO_Init+0x2e8>)
 8001b94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b96:	4a56      	ldr	r2, [pc, #344]	; (8001cf0 <HAL_GPIO_Init+0x2e8>)
 8001b98:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b9c:	6453      	str	r3, [r2, #68]	; 0x44
 8001b9e:	4b54      	ldr	r3, [pc, #336]	; (8001cf0 <HAL_GPIO_Init+0x2e8>)
 8001ba0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ba2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ba6:	60fb      	str	r3, [r7, #12]
 8001ba8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001baa:	4a52      	ldr	r2, [pc, #328]	; (8001cf4 <HAL_GPIO_Init+0x2ec>)
 8001bac:	69fb      	ldr	r3, [r7, #28]
 8001bae:	089b      	lsrs	r3, r3, #2
 8001bb0:	3302      	adds	r3, #2
 8001bb2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bb6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001bb8:	69fb      	ldr	r3, [r7, #28]
 8001bba:	f003 0303 	and.w	r3, r3, #3
 8001bbe:	009b      	lsls	r3, r3, #2
 8001bc0:	220f      	movs	r2, #15
 8001bc2:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc6:	43db      	mvns	r3, r3
 8001bc8:	69ba      	ldr	r2, [r7, #24]
 8001bca:	4013      	ands	r3, r2
 8001bcc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	4a49      	ldr	r2, [pc, #292]	; (8001cf8 <HAL_GPIO_Init+0x2f0>)
 8001bd2:	4293      	cmp	r3, r2
 8001bd4:	d019      	beq.n	8001c0a <HAL_GPIO_Init+0x202>
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	4a48      	ldr	r2, [pc, #288]	; (8001cfc <HAL_GPIO_Init+0x2f4>)
 8001bda:	4293      	cmp	r3, r2
 8001bdc:	d013      	beq.n	8001c06 <HAL_GPIO_Init+0x1fe>
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	4a47      	ldr	r2, [pc, #284]	; (8001d00 <HAL_GPIO_Init+0x2f8>)
 8001be2:	4293      	cmp	r3, r2
 8001be4:	d00d      	beq.n	8001c02 <HAL_GPIO_Init+0x1fa>
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	4a46      	ldr	r2, [pc, #280]	; (8001d04 <HAL_GPIO_Init+0x2fc>)
 8001bea:	4293      	cmp	r3, r2
 8001bec:	d007      	beq.n	8001bfe <HAL_GPIO_Init+0x1f6>
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	4a45      	ldr	r2, [pc, #276]	; (8001d08 <HAL_GPIO_Init+0x300>)
 8001bf2:	4293      	cmp	r3, r2
 8001bf4:	d101      	bne.n	8001bfa <HAL_GPIO_Init+0x1f2>
 8001bf6:	2304      	movs	r3, #4
 8001bf8:	e008      	b.n	8001c0c <HAL_GPIO_Init+0x204>
 8001bfa:	2307      	movs	r3, #7
 8001bfc:	e006      	b.n	8001c0c <HAL_GPIO_Init+0x204>
 8001bfe:	2303      	movs	r3, #3
 8001c00:	e004      	b.n	8001c0c <HAL_GPIO_Init+0x204>
 8001c02:	2302      	movs	r3, #2
 8001c04:	e002      	b.n	8001c0c <HAL_GPIO_Init+0x204>
 8001c06:	2301      	movs	r3, #1
 8001c08:	e000      	b.n	8001c0c <HAL_GPIO_Init+0x204>
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	69fa      	ldr	r2, [r7, #28]
 8001c0e:	f002 0203 	and.w	r2, r2, #3
 8001c12:	0092      	lsls	r2, r2, #2
 8001c14:	4093      	lsls	r3, r2
 8001c16:	69ba      	ldr	r2, [r7, #24]
 8001c18:	4313      	orrs	r3, r2
 8001c1a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001c1c:	4935      	ldr	r1, [pc, #212]	; (8001cf4 <HAL_GPIO_Init+0x2ec>)
 8001c1e:	69fb      	ldr	r3, [r7, #28]
 8001c20:	089b      	lsrs	r3, r3, #2
 8001c22:	3302      	adds	r3, #2
 8001c24:	69ba      	ldr	r2, [r7, #24]
 8001c26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001c2a:	4b38      	ldr	r3, [pc, #224]	; (8001d0c <HAL_GPIO_Init+0x304>)
 8001c2c:	689b      	ldr	r3, [r3, #8]
 8001c2e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c30:	693b      	ldr	r3, [r7, #16]
 8001c32:	43db      	mvns	r3, r3
 8001c34:	69ba      	ldr	r2, [r7, #24]
 8001c36:	4013      	ands	r3, r2
 8001c38:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001c3a:	683b      	ldr	r3, [r7, #0]
 8001c3c:	685b      	ldr	r3, [r3, #4]
 8001c3e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d003      	beq.n	8001c4e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001c46:	69ba      	ldr	r2, [r7, #24]
 8001c48:	693b      	ldr	r3, [r7, #16]
 8001c4a:	4313      	orrs	r3, r2
 8001c4c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001c4e:	4a2f      	ldr	r2, [pc, #188]	; (8001d0c <HAL_GPIO_Init+0x304>)
 8001c50:	69bb      	ldr	r3, [r7, #24]
 8001c52:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001c54:	4b2d      	ldr	r3, [pc, #180]	; (8001d0c <HAL_GPIO_Init+0x304>)
 8001c56:	68db      	ldr	r3, [r3, #12]
 8001c58:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c5a:	693b      	ldr	r3, [r7, #16]
 8001c5c:	43db      	mvns	r3, r3
 8001c5e:	69ba      	ldr	r2, [r7, #24]
 8001c60:	4013      	ands	r3, r2
 8001c62:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001c64:	683b      	ldr	r3, [r7, #0]
 8001c66:	685b      	ldr	r3, [r3, #4]
 8001c68:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d003      	beq.n	8001c78 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001c70:	69ba      	ldr	r2, [r7, #24]
 8001c72:	693b      	ldr	r3, [r7, #16]
 8001c74:	4313      	orrs	r3, r2
 8001c76:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001c78:	4a24      	ldr	r2, [pc, #144]	; (8001d0c <HAL_GPIO_Init+0x304>)
 8001c7a:	69bb      	ldr	r3, [r7, #24]
 8001c7c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001c7e:	4b23      	ldr	r3, [pc, #140]	; (8001d0c <HAL_GPIO_Init+0x304>)
 8001c80:	685b      	ldr	r3, [r3, #4]
 8001c82:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c84:	693b      	ldr	r3, [r7, #16]
 8001c86:	43db      	mvns	r3, r3
 8001c88:	69ba      	ldr	r2, [r7, #24]
 8001c8a:	4013      	ands	r3, r2
 8001c8c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001c8e:	683b      	ldr	r3, [r7, #0]
 8001c90:	685b      	ldr	r3, [r3, #4]
 8001c92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d003      	beq.n	8001ca2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001c9a:	69ba      	ldr	r2, [r7, #24]
 8001c9c:	693b      	ldr	r3, [r7, #16]
 8001c9e:	4313      	orrs	r3, r2
 8001ca0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001ca2:	4a1a      	ldr	r2, [pc, #104]	; (8001d0c <HAL_GPIO_Init+0x304>)
 8001ca4:	69bb      	ldr	r3, [r7, #24]
 8001ca6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001ca8:	4b18      	ldr	r3, [pc, #96]	; (8001d0c <HAL_GPIO_Init+0x304>)
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cae:	693b      	ldr	r3, [r7, #16]
 8001cb0:	43db      	mvns	r3, r3
 8001cb2:	69ba      	ldr	r2, [r7, #24]
 8001cb4:	4013      	ands	r3, r2
 8001cb6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001cb8:	683b      	ldr	r3, [r7, #0]
 8001cba:	685b      	ldr	r3, [r3, #4]
 8001cbc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d003      	beq.n	8001ccc <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001cc4:	69ba      	ldr	r2, [r7, #24]
 8001cc6:	693b      	ldr	r3, [r7, #16]
 8001cc8:	4313      	orrs	r3, r2
 8001cca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001ccc:	4a0f      	ldr	r2, [pc, #60]	; (8001d0c <HAL_GPIO_Init+0x304>)
 8001cce:	69bb      	ldr	r3, [r7, #24]
 8001cd0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001cd2:	69fb      	ldr	r3, [r7, #28]
 8001cd4:	3301      	adds	r3, #1
 8001cd6:	61fb      	str	r3, [r7, #28]
 8001cd8:	69fb      	ldr	r3, [r7, #28]
 8001cda:	2b0f      	cmp	r3, #15
 8001cdc:	f67f aea2 	bls.w	8001a24 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001ce0:	bf00      	nop
 8001ce2:	bf00      	nop
 8001ce4:	3724      	adds	r7, #36	; 0x24
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cec:	4770      	bx	lr
 8001cee:	bf00      	nop
 8001cf0:	40023800 	.word	0x40023800
 8001cf4:	40013800 	.word	0x40013800
 8001cf8:	40020000 	.word	0x40020000
 8001cfc:	40020400 	.word	0x40020400
 8001d00:	40020800 	.word	0x40020800
 8001d04:	40020c00 	.word	0x40020c00
 8001d08:	40021000 	.word	0x40021000
 8001d0c:	40013c00 	.word	0x40013c00

08001d10 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001d10:	b480      	push	{r7}
 8001d12:	b085      	sub	sp, #20
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]
 8001d18:	460b      	mov	r3, r1
 8001d1a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	691a      	ldr	r2, [r3, #16]
 8001d20:	887b      	ldrh	r3, [r7, #2]
 8001d22:	4013      	ands	r3, r2
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d002      	beq.n	8001d2e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001d28:	2301      	movs	r3, #1
 8001d2a:	73fb      	strb	r3, [r7, #15]
 8001d2c:	e001      	b.n	8001d32 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001d2e:	2300      	movs	r3, #0
 8001d30:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001d32:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d34:	4618      	mov	r0, r3
 8001d36:	3714      	adds	r7, #20
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3e:	4770      	bx	lr

08001d40 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d40:	b480      	push	{r7}
 8001d42:	b083      	sub	sp, #12
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
 8001d48:	460b      	mov	r3, r1
 8001d4a:	807b      	strh	r3, [r7, #2]
 8001d4c:	4613      	mov	r3, r2
 8001d4e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001d50:	787b      	ldrb	r3, [r7, #1]
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d003      	beq.n	8001d5e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001d56:	887a      	ldrh	r2, [r7, #2]
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001d5c:	e003      	b.n	8001d66 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001d5e:	887b      	ldrh	r3, [r7, #2]
 8001d60:	041a      	lsls	r2, r3, #16
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	619a      	str	r2, [r3, #24]
}
 8001d66:	bf00      	nop
 8001d68:	370c      	adds	r7, #12
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d70:	4770      	bx	lr
	...

08001d74 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b084      	sub	sp, #16
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d101      	bne.n	8001d86 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001d82:	2301      	movs	r3, #1
 8001d84:	e12b      	b.n	8001fde <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d8c:	b2db      	uxtb	r3, r3
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d106      	bne.n	8001da0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	2200      	movs	r2, #0
 8001d96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001d9a:	6878      	ldr	r0, [r7, #4]
 8001d9c:	f7fe fce4 	bl	8000768 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	2224      	movs	r2, #36	; 0x24
 8001da4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	681a      	ldr	r2, [r3, #0]
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f022 0201 	bic.w	r2, r2, #1
 8001db6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	681a      	ldr	r2, [r3, #0]
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001dc6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	681a      	ldr	r2, [r3, #0]
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001dd6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001dd8:	f000 fd7c 	bl	80028d4 <HAL_RCC_GetPCLK1Freq>
 8001ddc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	685b      	ldr	r3, [r3, #4]
 8001de2:	4a81      	ldr	r2, [pc, #516]	; (8001fe8 <HAL_I2C_Init+0x274>)
 8001de4:	4293      	cmp	r3, r2
 8001de6:	d807      	bhi.n	8001df8 <HAL_I2C_Init+0x84>
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	4a80      	ldr	r2, [pc, #512]	; (8001fec <HAL_I2C_Init+0x278>)
 8001dec:	4293      	cmp	r3, r2
 8001dee:	bf94      	ite	ls
 8001df0:	2301      	movls	r3, #1
 8001df2:	2300      	movhi	r3, #0
 8001df4:	b2db      	uxtb	r3, r3
 8001df6:	e006      	b.n	8001e06 <HAL_I2C_Init+0x92>
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	4a7d      	ldr	r2, [pc, #500]	; (8001ff0 <HAL_I2C_Init+0x27c>)
 8001dfc:	4293      	cmp	r3, r2
 8001dfe:	bf94      	ite	ls
 8001e00:	2301      	movls	r3, #1
 8001e02:	2300      	movhi	r3, #0
 8001e04:	b2db      	uxtb	r3, r3
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d001      	beq.n	8001e0e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001e0a:	2301      	movs	r3, #1
 8001e0c:	e0e7      	b.n	8001fde <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	4a78      	ldr	r2, [pc, #480]	; (8001ff4 <HAL_I2C_Init+0x280>)
 8001e12:	fba2 2303 	umull	r2, r3, r2, r3
 8001e16:	0c9b      	lsrs	r3, r3, #18
 8001e18:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	685b      	ldr	r3, [r3, #4]
 8001e20:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	68ba      	ldr	r2, [r7, #8]
 8001e2a:	430a      	orrs	r2, r1
 8001e2c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	6a1b      	ldr	r3, [r3, #32]
 8001e34:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	685b      	ldr	r3, [r3, #4]
 8001e3c:	4a6a      	ldr	r2, [pc, #424]	; (8001fe8 <HAL_I2C_Init+0x274>)
 8001e3e:	4293      	cmp	r3, r2
 8001e40:	d802      	bhi.n	8001e48 <HAL_I2C_Init+0xd4>
 8001e42:	68bb      	ldr	r3, [r7, #8]
 8001e44:	3301      	adds	r3, #1
 8001e46:	e009      	b.n	8001e5c <HAL_I2C_Init+0xe8>
 8001e48:	68bb      	ldr	r3, [r7, #8]
 8001e4a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001e4e:	fb02 f303 	mul.w	r3, r2, r3
 8001e52:	4a69      	ldr	r2, [pc, #420]	; (8001ff8 <HAL_I2C_Init+0x284>)
 8001e54:	fba2 2303 	umull	r2, r3, r2, r3
 8001e58:	099b      	lsrs	r3, r3, #6
 8001e5a:	3301      	adds	r3, #1
 8001e5c:	687a      	ldr	r2, [r7, #4]
 8001e5e:	6812      	ldr	r2, [r2, #0]
 8001e60:	430b      	orrs	r3, r1
 8001e62:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	69db      	ldr	r3, [r3, #28]
 8001e6a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001e6e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	685b      	ldr	r3, [r3, #4]
 8001e76:	495c      	ldr	r1, [pc, #368]	; (8001fe8 <HAL_I2C_Init+0x274>)
 8001e78:	428b      	cmp	r3, r1
 8001e7a:	d819      	bhi.n	8001eb0 <HAL_I2C_Init+0x13c>
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	1e59      	subs	r1, r3, #1
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	685b      	ldr	r3, [r3, #4]
 8001e84:	005b      	lsls	r3, r3, #1
 8001e86:	fbb1 f3f3 	udiv	r3, r1, r3
 8001e8a:	1c59      	adds	r1, r3, #1
 8001e8c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001e90:	400b      	ands	r3, r1
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d00a      	beq.n	8001eac <HAL_I2C_Init+0x138>
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	1e59      	subs	r1, r3, #1
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	685b      	ldr	r3, [r3, #4]
 8001e9e:	005b      	lsls	r3, r3, #1
 8001ea0:	fbb1 f3f3 	udiv	r3, r1, r3
 8001ea4:	3301      	adds	r3, #1
 8001ea6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001eaa:	e051      	b.n	8001f50 <HAL_I2C_Init+0x1dc>
 8001eac:	2304      	movs	r3, #4
 8001eae:	e04f      	b.n	8001f50 <HAL_I2C_Init+0x1dc>
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	689b      	ldr	r3, [r3, #8]
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d111      	bne.n	8001edc <HAL_I2C_Init+0x168>
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	1e58      	subs	r0, r3, #1
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	6859      	ldr	r1, [r3, #4]
 8001ec0:	460b      	mov	r3, r1
 8001ec2:	005b      	lsls	r3, r3, #1
 8001ec4:	440b      	add	r3, r1
 8001ec6:	fbb0 f3f3 	udiv	r3, r0, r3
 8001eca:	3301      	adds	r3, #1
 8001ecc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	bf0c      	ite	eq
 8001ed4:	2301      	moveq	r3, #1
 8001ed6:	2300      	movne	r3, #0
 8001ed8:	b2db      	uxtb	r3, r3
 8001eda:	e012      	b.n	8001f02 <HAL_I2C_Init+0x18e>
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	1e58      	subs	r0, r3, #1
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	6859      	ldr	r1, [r3, #4]
 8001ee4:	460b      	mov	r3, r1
 8001ee6:	009b      	lsls	r3, r3, #2
 8001ee8:	440b      	add	r3, r1
 8001eea:	0099      	lsls	r1, r3, #2
 8001eec:	440b      	add	r3, r1
 8001eee:	fbb0 f3f3 	udiv	r3, r0, r3
 8001ef2:	3301      	adds	r3, #1
 8001ef4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	bf0c      	ite	eq
 8001efc:	2301      	moveq	r3, #1
 8001efe:	2300      	movne	r3, #0
 8001f00:	b2db      	uxtb	r3, r3
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d001      	beq.n	8001f0a <HAL_I2C_Init+0x196>
 8001f06:	2301      	movs	r3, #1
 8001f08:	e022      	b.n	8001f50 <HAL_I2C_Init+0x1dc>
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	689b      	ldr	r3, [r3, #8]
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d10e      	bne.n	8001f30 <HAL_I2C_Init+0x1bc>
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	1e58      	subs	r0, r3, #1
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	6859      	ldr	r1, [r3, #4]
 8001f1a:	460b      	mov	r3, r1
 8001f1c:	005b      	lsls	r3, r3, #1
 8001f1e:	440b      	add	r3, r1
 8001f20:	fbb0 f3f3 	udiv	r3, r0, r3
 8001f24:	3301      	adds	r3, #1
 8001f26:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f2a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001f2e:	e00f      	b.n	8001f50 <HAL_I2C_Init+0x1dc>
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	1e58      	subs	r0, r3, #1
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	6859      	ldr	r1, [r3, #4]
 8001f38:	460b      	mov	r3, r1
 8001f3a:	009b      	lsls	r3, r3, #2
 8001f3c:	440b      	add	r3, r1
 8001f3e:	0099      	lsls	r1, r3, #2
 8001f40:	440b      	add	r3, r1
 8001f42:	fbb0 f3f3 	udiv	r3, r0, r3
 8001f46:	3301      	adds	r3, #1
 8001f48:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f4c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001f50:	6879      	ldr	r1, [r7, #4]
 8001f52:	6809      	ldr	r1, [r1, #0]
 8001f54:	4313      	orrs	r3, r2
 8001f56:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	69da      	ldr	r2, [r3, #28]
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	6a1b      	ldr	r3, [r3, #32]
 8001f6a:	431a      	orrs	r2, r3
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	430a      	orrs	r2, r1
 8001f72:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	689b      	ldr	r3, [r3, #8]
 8001f7a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001f7e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001f82:	687a      	ldr	r2, [r7, #4]
 8001f84:	6911      	ldr	r1, [r2, #16]
 8001f86:	687a      	ldr	r2, [r7, #4]
 8001f88:	68d2      	ldr	r2, [r2, #12]
 8001f8a:	4311      	orrs	r1, r2
 8001f8c:	687a      	ldr	r2, [r7, #4]
 8001f8e:	6812      	ldr	r2, [r2, #0]
 8001f90:	430b      	orrs	r3, r1
 8001f92:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	68db      	ldr	r3, [r3, #12]
 8001f9a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	695a      	ldr	r2, [r3, #20]
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	699b      	ldr	r3, [r3, #24]
 8001fa6:	431a      	orrs	r2, r3
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	430a      	orrs	r2, r1
 8001fae:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	681a      	ldr	r2, [r3, #0]
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f042 0201 	orr.w	r2, r2, #1
 8001fbe:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	2220      	movs	r2, #32
 8001fca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001fdc:	2300      	movs	r3, #0
}
 8001fde:	4618      	mov	r0, r3
 8001fe0:	3710      	adds	r7, #16
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	bd80      	pop	{r7, pc}
 8001fe6:	bf00      	nop
 8001fe8:	000186a0 	.word	0x000186a0
 8001fec:	001e847f 	.word	0x001e847f
 8001ff0:	003d08ff 	.word	0x003d08ff
 8001ff4:	431bde83 	.word	0x431bde83
 8001ff8:	10624dd3 	.word	0x10624dd3

08001ffc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	b086      	sub	sp, #24
 8002000:	af00      	add	r7, sp, #0
 8002002:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	2b00      	cmp	r3, #0
 8002008:	d101      	bne.n	800200e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800200a:	2301      	movs	r3, #1
 800200c:	e267      	b.n	80024de <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f003 0301 	and.w	r3, r3, #1
 8002016:	2b00      	cmp	r3, #0
 8002018:	d075      	beq.n	8002106 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800201a:	4b88      	ldr	r3, [pc, #544]	; (800223c <HAL_RCC_OscConfig+0x240>)
 800201c:	689b      	ldr	r3, [r3, #8]
 800201e:	f003 030c 	and.w	r3, r3, #12
 8002022:	2b04      	cmp	r3, #4
 8002024:	d00c      	beq.n	8002040 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002026:	4b85      	ldr	r3, [pc, #532]	; (800223c <HAL_RCC_OscConfig+0x240>)
 8002028:	689b      	ldr	r3, [r3, #8]
 800202a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800202e:	2b08      	cmp	r3, #8
 8002030:	d112      	bne.n	8002058 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002032:	4b82      	ldr	r3, [pc, #520]	; (800223c <HAL_RCC_OscConfig+0x240>)
 8002034:	685b      	ldr	r3, [r3, #4]
 8002036:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800203a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800203e:	d10b      	bne.n	8002058 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002040:	4b7e      	ldr	r3, [pc, #504]	; (800223c <HAL_RCC_OscConfig+0x240>)
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002048:	2b00      	cmp	r3, #0
 800204a:	d05b      	beq.n	8002104 <HAL_RCC_OscConfig+0x108>
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	685b      	ldr	r3, [r3, #4]
 8002050:	2b00      	cmp	r3, #0
 8002052:	d157      	bne.n	8002104 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002054:	2301      	movs	r3, #1
 8002056:	e242      	b.n	80024de <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	685b      	ldr	r3, [r3, #4]
 800205c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002060:	d106      	bne.n	8002070 <HAL_RCC_OscConfig+0x74>
 8002062:	4b76      	ldr	r3, [pc, #472]	; (800223c <HAL_RCC_OscConfig+0x240>)
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	4a75      	ldr	r2, [pc, #468]	; (800223c <HAL_RCC_OscConfig+0x240>)
 8002068:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800206c:	6013      	str	r3, [r2, #0]
 800206e:	e01d      	b.n	80020ac <HAL_RCC_OscConfig+0xb0>
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	685b      	ldr	r3, [r3, #4]
 8002074:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002078:	d10c      	bne.n	8002094 <HAL_RCC_OscConfig+0x98>
 800207a:	4b70      	ldr	r3, [pc, #448]	; (800223c <HAL_RCC_OscConfig+0x240>)
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	4a6f      	ldr	r2, [pc, #444]	; (800223c <HAL_RCC_OscConfig+0x240>)
 8002080:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002084:	6013      	str	r3, [r2, #0]
 8002086:	4b6d      	ldr	r3, [pc, #436]	; (800223c <HAL_RCC_OscConfig+0x240>)
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	4a6c      	ldr	r2, [pc, #432]	; (800223c <HAL_RCC_OscConfig+0x240>)
 800208c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002090:	6013      	str	r3, [r2, #0]
 8002092:	e00b      	b.n	80020ac <HAL_RCC_OscConfig+0xb0>
 8002094:	4b69      	ldr	r3, [pc, #420]	; (800223c <HAL_RCC_OscConfig+0x240>)
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	4a68      	ldr	r2, [pc, #416]	; (800223c <HAL_RCC_OscConfig+0x240>)
 800209a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800209e:	6013      	str	r3, [r2, #0]
 80020a0:	4b66      	ldr	r3, [pc, #408]	; (800223c <HAL_RCC_OscConfig+0x240>)
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	4a65      	ldr	r2, [pc, #404]	; (800223c <HAL_RCC_OscConfig+0x240>)
 80020a6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80020aa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	685b      	ldr	r3, [r3, #4]
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d013      	beq.n	80020dc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020b4:	f7ff fb92 	bl	80017dc <HAL_GetTick>
 80020b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020ba:	e008      	b.n	80020ce <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80020bc:	f7ff fb8e 	bl	80017dc <HAL_GetTick>
 80020c0:	4602      	mov	r2, r0
 80020c2:	693b      	ldr	r3, [r7, #16]
 80020c4:	1ad3      	subs	r3, r2, r3
 80020c6:	2b64      	cmp	r3, #100	; 0x64
 80020c8:	d901      	bls.n	80020ce <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80020ca:	2303      	movs	r3, #3
 80020cc:	e207      	b.n	80024de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020ce:	4b5b      	ldr	r3, [pc, #364]	; (800223c <HAL_RCC_OscConfig+0x240>)
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d0f0      	beq.n	80020bc <HAL_RCC_OscConfig+0xc0>
 80020da:	e014      	b.n	8002106 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020dc:	f7ff fb7e 	bl	80017dc <HAL_GetTick>
 80020e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80020e2:	e008      	b.n	80020f6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80020e4:	f7ff fb7a 	bl	80017dc <HAL_GetTick>
 80020e8:	4602      	mov	r2, r0
 80020ea:	693b      	ldr	r3, [r7, #16]
 80020ec:	1ad3      	subs	r3, r2, r3
 80020ee:	2b64      	cmp	r3, #100	; 0x64
 80020f0:	d901      	bls.n	80020f6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80020f2:	2303      	movs	r3, #3
 80020f4:	e1f3      	b.n	80024de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80020f6:	4b51      	ldr	r3, [pc, #324]	; (800223c <HAL_RCC_OscConfig+0x240>)
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d1f0      	bne.n	80020e4 <HAL_RCC_OscConfig+0xe8>
 8002102:	e000      	b.n	8002106 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002104:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f003 0302 	and.w	r3, r3, #2
 800210e:	2b00      	cmp	r3, #0
 8002110:	d063      	beq.n	80021da <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002112:	4b4a      	ldr	r3, [pc, #296]	; (800223c <HAL_RCC_OscConfig+0x240>)
 8002114:	689b      	ldr	r3, [r3, #8]
 8002116:	f003 030c 	and.w	r3, r3, #12
 800211a:	2b00      	cmp	r3, #0
 800211c:	d00b      	beq.n	8002136 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800211e:	4b47      	ldr	r3, [pc, #284]	; (800223c <HAL_RCC_OscConfig+0x240>)
 8002120:	689b      	ldr	r3, [r3, #8]
 8002122:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002126:	2b08      	cmp	r3, #8
 8002128:	d11c      	bne.n	8002164 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800212a:	4b44      	ldr	r3, [pc, #272]	; (800223c <HAL_RCC_OscConfig+0x240>)
 800212c:	685b      	ldr	r3, [r3, #4]
 800212e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002132:	2b00      	cmp	r3, #0
 8002134:	d116      	bne.n	8002164 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002136:	4b41      	ldr	r3, [pc, #260]	; (800223c <HAL_RCC_OscConfig+0x240>)
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f003 0302 	and.w	r3, r3, #2
 800213e:	2b00      	cmp	r3, #0
 8002140:	d005      	beq.n	800214e <HAL_RCC_OscConfig+0x152>
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	68db      	ldr	r3, [r3, #12]
 8002146:	2b01      	cmp	r3, #1
 8002148:	d001      	beq.n	800214e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800214a:	2301      	movs	r3, #1
 800214c:	e1c7      	b.n	80024de <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800214e:	4b3b      	ldr	r3, [pc, #236]	; (800223c <HAL_RCC_OscConfig+0x240>)
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	691b      	ldr	r3, [r3, #16]
 800215a:	00db      	lsls	r3, r3, #3
 800215c:	4937      	ldr	r1, [pc, #220]	; (800223c <HAL_RCC_OscConfig+0x240>)
 800215e:	4313      	orrs	r3, r2
 8002160:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002162:	e03a      	b.n	80021da <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	68db      	ldr	r3, [r3, #12]
 8002168:	2b00      	cmp	r3, #0
 800216a:	d020      	beq.n	80021ae <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800216c:	4b34      	ldr	r3, [pc, #208]	; (8002240 <HAL_RCC_OscConfig+0x244>)
 800216e:	2201      	movs	r2, #1
 8002170:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002172:	f7ff fb33 	bl	80017dc <HAL_GetTick>
 8002176:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002178:	e008      	b.n	800218c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800217a:	f7ff fb2f 	bl	80017dc <HAL_GetTick>
 800217e:	4602      	mov	r2, r0
 8002180:	693b      	ldr	r3, [r7, #16]
 8002182:	1ad3      	subs	r3, r2, r3
 8002184:	2b02      	cmp	r3, #2
 8002186:	d901      	bls.n	800218c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002188:	2303      	movs	r3, #3
 800218a:	e1a8      	b.n	80024de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800218c:	4b2b      	ldr	r3, [pc, #172]	; (800223c <HAL_RCC_OscConfig+0x240>)
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	f003 0302 	and.w	r3, r3, #2
 8002194:	2b00      	cmp	r3, #0
 8002196:	d0f0      	beq.n	800217a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002198:	4b28      	ldr	r3, [pc, #160]	; (800223c <HAL_RCC_OscConfig+0x240>)
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	691b      	ldr	r3, [r3, #16]
 80021a4:	00db      	lsls	r3, r3, #3
 80021a6:	4925      	ldr	r1, [pc, #148]	; (800223c <HAL_RCC_OscConfig+0x240>)
 80021a8:	4313      	orrs	r3, r2
 80021aa:	600b      	str	r3, [r1, #0]
 80021ac:	e015      	b.n	80021da <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80021ae:	4b24      	ldr	r3, [pc, #144]	; (8002240 <HAL_RCC_OscConfig+0x244>)
 80021b0:	2200      	movs	r2, #0
 80021b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021b4:	f7ff fb12 	bl	80017dc <HAL_GetTick>
 80021b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80021ba:	e008      	b.n	80021ce <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80021bc:	f7ff fb0e 	bl	80017dc <HAL_GetTick>
 80021c0:	4602      	mov	r2, r0
 80021c2:	693b      	ldr	r3, [r7, #16]
 80021c4:	1ad3      	subs	r3, r2, r3
 80021c6:	2b02      	cmp	r3, #2
 80021c8:	d901      	bls.n	80021ce <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80021ca:	2303      	movs	r3, #3
 80021cc:	e187      	b.n	80024de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80021ce:	4b1b      	ldr	r3, [pc, #108]	; (800223c <HAL_RCC_OscConfig+0x240>)
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f003 0302 	and.w	r3, r3, #2
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d1f0      	bne.n	80021bc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f003 0308 	and.w	r3, r3, #8
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d036      	beq.n	8002254 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	695b      	ldr	r3, [r3, #20]
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d016      	beq.n	800221c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80021ee:	4b15      	ldr	r3, [pc, #84]	; (8002244 <HAL_RCC_OscConfig+0x248>)
 80021f0:	2201      	movs	r2, #1
 80021f2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021f4:	f7ff faf2 	bl	80017dc <HAL_GetTick>
 80021f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80021fa:	e008      	b.n	800220e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80021fc:	f7ff faee 	bl	80017dc <HAL_GetTick>
 8002200:	4602      	mov	r2, r0
 8002202:	693b      	ldr	r3, [r7, #16]
 8002204:	1ad3      	subs	r3, r2, r3
 8002206:	2b02      	cmp	r3, #2
 8002208:	d901      	bls.n	800220e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800220a:	2303      	movs	r3, #3
 800220c:	e167      	b.n	80024de <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800220e:	4b0b      	ldr	r3, [pc, #44]	; (800223c <HAL_RCC_OscConfig+0x240>)
 8002210:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002212:	f003 0302 	and.w	r3, r3, #2
 8002216:	2b00      	cmp	r3, #0
 8002218:	d0f0      	beq.n	80021fc <HAL_RCC_OscConfig+0x200>
 800221a:	e01b      	b.n	8002254 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800221c:	4b09      	ldr	r3, [pc, #36]	; (8002244 <HAL_RCC_OscConfig+0x248>)
 800221e:	2200      	movs	r2, #0
 8002220:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002222:	f7ff fadb 	bl	80017dc <HAL_GetTick>
 8002226:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002228:	e00e      	b.n	8002248 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800222a:	f7ff fad7 	bl	80017dc <HAL_GetTick>
 800222e:	4602      	mov	r2, r0
 8002230:	693b      	ldr	r3, [r7, #16]
 8002232:	1ad3      	subs	r3, r2, r3
 8002234:	2b02      	cmp	r3, #2
 8002236:	d907      	bls.n	8002248 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002238:	2303      	movs	r3, #3
 800223a:	e150      	b.n	80024de <HAL_RCC_OscConfig+0x4e2>
 800223c:	40023800 	.word	0x40023800
 8002240:	42470000 	.word	0x42470000
 8002244:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002248:	4b88      	ldr	r3, [pc, #544]	; (800246c <HAL_RCC_OscConfig+0x470>)
 800224a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800224c:	f003 0302 	and.w	r3, r3, #2
 8002250:	2b00      	cmp	r3, #0
 8002252:	d1ea      	bne.n	800222a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f003 0304 	and.w	r3, r3, #4
 800225c:	2b00      	cmp	r3, #0
 800225e:	f000 8097 	beq.w	8002390 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002262:	2300      	movs	r3, #0
 8002264:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002266:	4b81      	ldr	r3, [pc, #516]	; (800246c <HAL_RCC_OscConfig+0x470>)
 8002268:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800226a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800226e:	2b00      	cmp	r3, #0
 8002270:	d10f      	bne.n	8002292 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002272:	2300      	movs	r3, #0
 8002274:	60bb      	str	r3, [r7, #8]
 8002276:	4b7d      	ldr	r3, [pc, #500]	; (800246c <HAL_RCC_OscConfig+0x470>)
 8002278:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800227a:	4a7c      	ldr	r2, [pc, #496]	; (800246c <HAL_RCC_OscConfig+0x470>)
 800227c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002280:	6413      	str	r3, [r2, #64]	; 0x40
 8002282:	4b7a      	ldr	r3, [pc, #488]	; (800246c <HAL_RCC_OscConfig+0x470>)
 8002284:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002286:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800228a:	60bb      	str	r3, [r7, #8]
 800228c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800228e:	2301      	movs	r3, #1
 8002290:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002292:	4b77      	ldr	r3, [pc, #476]	; (8002470 <HAL_RCC_OscConfig+0x474>)
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800229a:	2b00      	cmp	r3, #0
 800229c:	d118      	bne.n	80022d0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800229e:	4b74      	ldr	r3, [pc, #464]	; (8002470 <HAL_RCC_OscConfig+0x474>)
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	4a73      	ldr	r2, [pc, #460]	; (8002470 <HAL_RCC_OscConfig+0x474>)
 80022a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022a8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80022aa:	f7ff fa97 	bl	80017dc <HAL_GetTick>
 80022ae:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022b0:	e008      	b.n	80022c4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80022b2:	f7ff fa93 	bl	80017dc <HAL_GetTick>
 80022b6:	4602      	mov	r2, r0
 80022b8:	693b      	ldr	r3, [r7, #16]
 80022ba:	1ad3      	subs	r3, r2, r3
 80022bc:	2b02      	cmp	r3, #2
 80022be:	d901      	bls.n	80022c4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80022c0:	2303      	movs	r3, #3
 80022c2:	e10c      	b.n	80024de <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022c4:	4b6a      	ldr	r3, [pc, #424]	; (8002470 <HAL_RCC_OscConfig+0x474>)
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d0f0      	beq.n	80022b2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	689b      	ldr	r3, [r3, #8]
 80022d4:	2b01      	cmp	r3, #1
 80022d6:	d106      	bne.n	80022e6 <HAL_RCC_OscConfig+0x2ea>
 80022d8:	4b64      	ldr	r3, [pc, #400]	; (800246c <HAL_RCC_OscConfig+0x470>)
 80022da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022dc:	4a63      	ldr	r2, [pc, #396]	; (800246c <HAL_RCC_OscConfig+0x470>)
 80022de:	f043 0301 	orr.w	r3, r3, #1
 80022e2:	6713      	str	r3, [r2, #112]	; 0x70
 80022e4:	e01c      	b.n	8002320 <HAL_RCC_OscConfig+0x324>
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	689b      	ldr	r3, [r3, #8]
 80022ea:	2b05      	cmp	r3, #5
 80022ec:	d10c      	bne.n	8002308 <HAL_RCC_OscConfig+0x30c>
 80022ee:	4b5f      	ldr	r3, [pc, #380]	; (800246c <HAL_RCC_OscConfig+0x470>)
 80022f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022f2:	4a5e      	ldr	r2, [pc, #376]	; (800246c <HAL_RCC_OscConfig+0x470>)
 80022f4:	f043 0304 	orr.w	r3, r3, #4
 80022f8:	6713      	str	r3, [r2, #112]	; 0x70
 80022fa:	4b5c      	ldr	r3, [pc, #368]	; (800246c <HAL_RCC_OscConfig+0x470>)
 80022fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022fe:	4a5b      	ldr	r2, [pc, #364]	; (800246c <HAL_RCC_OscConfig+0x470>)
 8002300:	f043 0301 	orr.w	r3, r3, #1
 8002304:	6713      	str	r3, [r2, #112]	; 0x70
 8002306:	e00b      	b.n	8002320 <HAL_RCC_OscConfig+0x324>
 8002308:	4b58      	ldr	r3, [pc, #352]	; (800246c <HAL_RCC_OscConfig+0x470>)
 800230a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800230c:	4a57      	ldr	r2, [pc, #348]	; (800246c <HAL_RCC_OscConfig+0x470>)
 800230e:	f023 0301 	bic.w	r3, r3, #1
 8002312:	6713      	str	r3, [r2, #112]	; 0x70
 8002314:	4b55      	ldr	r3, [pc, #340]	; (800246c <HAL_RCC_OscConfig+0x470>)
 8002316:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002318:	4a54      	ldr	r2, [pc, #336]	; (800246c <HAL_RCC_OscConfig+0x470>)
 800231a:	f023 0304 	bic.w	r3, r3, #4
 800231e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	689b      	ldr	r3, [r3, #8]
 8002324:	2b00      	cmp	r3, #0
 8002326:	d015      	beq.n	8002354 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002328:	f7ff fa58 	bl	80017dc <HAL_GetTick>
 800232c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800232e:	e00a      	b.n	8002346 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002330:	f7ff fa54 	bl	80017dc <HAL_GetTick>
 8002334:	4602      	mov	r2, r0
 8002336:	693b      	ldr	r3, [r7, #16]
 8002338:	1ad3      	subs	r3, r2, r3
 800233a:	f241 3288 	movw	r2, #5000	; 0x1388
 800233e:	4293      	cmp	r3, r2
 8002340:	d901      	bls.n	8002346 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002342:	2303      	movs	r3, #3
 8002344:	e0cb      	b.n	80024de <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002346:	4b49      	ldr	r3, [pc, #292]	; (800246c <HAL_RCC_OscConfig+0x470>)
 8002348:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800234a:	f003 0302 	and.w	r3, r3, #2
 800234e:	2b00      	cmp	r3, #0
 8002350:	d0ee      	beq.n	8002330 <HAL_RCC_OscConfig+0x334>
 8002352:	e014      	b.n	800237e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002354:	f7ff fa42 	bl	80017dc <HAL_GetTick>
 8002358:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800235a:	e00a      	b.n	8002372 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800235c:	f7ff fa3e 	bl	80017dc <HAL_GetTick>
 8002360:	4602      	mov	r2, r0
 8002362:	693b      	ldr	r3, [r7, #16]
 8002364:	1ad3      	subs	r3, r2, r3
 8002366:	f241 3288 	movw	r2, #5000	; 0x1388
 800236a:	4293      	cmp	r3, r2
 800236c:	d901      	bls.n	8002372 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800236e:	2303      	movs	r3, #3
 8002370:	e0b5      	b.n	80024de <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002372:	4b3e      	ldr	r3, [pc, #248]	; (800246c <HAL_RCC_OscConfig+0x470>)
 8002374:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002376:	f003 0302 	and.w	r3, r3, #2
 800237a:	2b00      	cmp	r3, #0
 800237c:	d1ee      	bne.n	800235c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800237e:	7dfb      	ldrb	r3, [r7, #23]
 8002380:	2b01      	cmp	r3, #1
 8002382:	d105      	bne.n	8002390 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002384:	4b39      	ldr	r3, [pc, #228]	; (800246c <HAL_RCC_OscConfig+0x470>)
 8002386:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002388:	4a38      	ldr	r2, [pc, #224]	; (800246c <HAL_RCC_OscConfig+0x470>)
 800238a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800238e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	699b      	ldr	r3, [r3, #24]
 8002394:	2b00      	cmp	r3, #0
 8002396:	f000 80a1 	beq.w	80024dc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800239a:	4b34      	ldr	r3, [pc, #208]	; (800246c <HAL_RCC_OscConfig+0x470>)
 800239c:	689b      	ldr	r3, [r3, #8]
 800239e:	f003 030c 	and.w	r3, r3, #12
 80023a2:	2b08      	cmp	r3, #8
 80023a4:	d05c      	beq.n	8002460 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	699b      	ldr	r3, [r3, #24]
 80023aa:	2b02      	cmp	r3, #2
 80023ac:	d141      	bne.n	8002432 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023ae:	4b31      	ldr	r3, [pc, #196]	; (8002474 <HAL_RCC_OscConfig+0x478>)
 80023b0:	2200      	movs	r2, #0
 80023b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023b4:	f7ff fa12 	bl	80017dc <HAL_GetTick>
 80023b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80023ba:	e008      	b.n	80023ce <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80023bc:	f7ff fa0e 	bl	80017dc <HAL_GetTick>
 80023c0:	4602      	mov	r2, r0
 80023c2:	693b      	ldr	r3, [r7, #16]
 80023c4:	1ad3      	subs	r3, r2, r3
 80023c6:	2b02      	cmp	r3, #2
 80023c8:	d901      	bls.n	80023ce <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80023ca:	2303      	movs	r3, #3
 80023cc:	e087      	b.n	80024de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80023ce:	4b27      	ldr	r3, [pc, #156]	; (800246c <HAL_RCC_OscConfig+0x470>)
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d1f0      	bne.n	80023bc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	69da      	ldr	r2, [r3, #28]
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	6a1b      	ldr	r3, [r3, #32]
 80023e2:	431a      	orrs	r2, r3
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023e8:	019b      	lsls	r3, r3, #6
 80023ea:	431a      	orrs	r2, r3
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023f0:	085b      	lsrs	r3, r3, #1
 80023f2:	3b01      	subs	r3, #1
 80023f4:	041b      	lsls	r3, r3, #16
 80023f6:	431a      	orrs	r2, r3
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023fc:	061b      	lsls	r3, r3, #24
 80023fe:	491b      	ldr	r1, [pc, #108]	; (800246c <HAL_RCC_OscConfig+0x470>)
 8002400:	4313      	orrs	r3, r2
 8002402:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002404:	4b1b      	ldr	r3, [pc, #108]	; (8002474 <HAL_RCC_OscConfig+0x478>)
 8002406:	2201      	movs	r2, #1
 8002408:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800240a:	f7ff f9e7 	bl	80017dc <HAL_GetTick>
 800240e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002410:	e008      	b.n	8002424 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002412:	f7ff f9e3 	bl	80017dc <HAL_GetTick>
 8002416:	4602      	mov	r2, r0
 8002418:	693b      	ldr	r3, [r7, #16]
 800241a:	1ad3      	subs	r3, r2, r3
 800241c:	2b02      	cmp	r3, #2
 800241e:	d901      	bls.n	8002424 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002420:	2303      	movs	r3, #3
 8002422:	e05c      	b.n	80024de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002424:	4b11      	ldr	r3, [pc, #68]	; (800246c <HAL_RCC_OscConfig+0x470>)
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800242c:	2b00      	cmp	r3, #0
 800242e:	d0f0      	beq.n	8002412 <HAL_RCC_OscConfig+0x416>
 8002430:	e054      	b.n	80024dc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002432:	4b10      	ldr	r3, [pc, #64]	; (8002474 <HAL_RCC_OscConfig+0x478>)
 8002434:	2200      	movs	r2, #0
 8002436:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002438:	f7ff f9d0 	bl	80017dc <HAL_GetTick>
 800243c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800243e:	e008      	b.n	8002452 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002440:	f7ff f9cc 	bl	80017dc <HAL_GetTick>
 8002444:	4602      	mov	r2, r0
 8002446:	693b      	ldr	r3, [r7, #16]
 8002448:	1ad3      	subs	r3, r2, r3
 800244a:	2b02      	cmp	r3, #2
 800244c:	d901      	bls.n	8002452 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800244e:	2303      	movs	r3, #3
 8002450:	e045      	b.n	80024de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002452:	4b06      	ldr	r3, [pc, #24]	; (800246c <HAL_RCC_OscConfig+0x470>)
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800245a:	2b00      	cmp	r3, #0
 800245c:	d1f0      	bne.n	8002440 <HAL_RCC_OscConfig+0x444>
 800245e:	e03d      	b.n	80024dc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	699b      	ldr	r3, [r3, #24]
 8002464:	2b01      	cmp	r3, #1
 8002466:	d107      	bne.n	8002478 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002468:	2301      	movs	r3, #1
 800246a:	e038      	b.n	80024de <HAL_RCC_OscConfig+0x4e2>
 800246c:	40023800 	.word	0x40023800
 8002470:	40007000 	.word	0x40007000
 8002474:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002478:	4b1b      	ldr	r3, [pc, #108]	; (80024e8 <HAL_RCC_OscConfig+0x4ec>)
 800247a:	685b      	ldr	r3, [r3, #4]
 800247c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	699b      	ldr	r3, [r3, #24]
 8002482:	2b01      	cmp	r3, #1
 8002484:	d028      	beq.n	80024d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002490:	429a      	cmp	r2, r3
 8002492:	d121      	bne.n	80024d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800249e:	429a      	cmp	r2, r3
 80024a0:	d11a      	bne.n	80024d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80024a2:	68fa      	ldr	r2, [r7, #12]
 80024a4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80024a8:	4013      	ands	r3, r2
 80024aa:	687a      	ldr	r2, [r7, #4]
 80024ac:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80024ae:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80024b0:	4293      	cmp	r3, r2
 80024b2:	d111      	bne.n	80024d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024be:	085b      	lsrs	r3, r3, #1
 80024c0:	3b01      	subs	r3, #1
 80024c2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80024c4:	429a      	cmp	r2, r3
 80024c6:	d107      	bne.n	80024d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024d2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80024d4:	429a      	cmp	r2, r3
 80024d6:	d001      	beq.n	80024dc <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80024d8:	2301      	movs	r3, #1
 80024da:	e000      	b.n	80024de <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80024dc:	2300      	movs	r3, #0
}
 80024de:	4618      	mov	r0, r3
 80024e0:	3718      	adds	r7, #24
 80024e2:	46bd      	mov	sp, r7
 80024e4:	bd80      	pop	{r7, pc}
 80024e6:	bf00      	nop
 80024e8:	40023800 	.word	0x40023800

080024ec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	b084      	sub	sp, #16
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]
 80024f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d101      	bne.n	8002500 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80024fc:	2301      	movs	r3, #1
 80024fe:	e0cc      	b.n	800269a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002500:	4b68      	ldr	r3, [pc, #416]	; (80026a4 <HAL_RCC_ClockConfig+0x1b8>)
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f003 0307 	and.w	r3, r3, #7
 8002508:	683a      	ldr	r2, [r7, #0]
 800250a:	429a      	cmp	r2, r3
 800250c:	d90c      	bls.n	8002528 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800250e:	4b65      	ldr	r3, [pc, #404]	; (80026a4 <HAL_RCC_ClockConfig+0x1b8>)
 8002510:	683a      	ldr	r2, [r7, #0]
 8002512:	b2d2      	uxtb	r2, r2
 8002514:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002516:	4b63      	ldr	r3, [pc, #396]	; (80026a4 <HAL_RCC_ClockConfig+0x1b8>)
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f003 0307 	and.w	r3, r3, #7
 800251e:	683a      	ldr	r2, [r7, #0]
 8002520:	429a      	cmp	r2, r3
 8002522:	d001      	beq.n	8002528 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002524:	2301      	movs	r3, #1
 8002526:	e0b8      	b.n	800269a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f003 0302 	and.w	r3, r3, #2
 8002530:	2b00      	cmp	r3, #0
 8002532:	d020      	beq.n	8002576 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f003 0304 	and.w	r3, r3, #4
 800253c:	2b00      	cmp	r3, #0
 800253e:	d005      	beq.n	800254c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002540:	4b59      	ldr	r3, [pc, #356]	; (80026a8 <HAL_RCC_ClockConfig+0x1bc>)
 8002542:	689b      	ldr	r3, [r3, #8]
 8002544:	4a58      	ldr	r2, [pc, #352]	; (80026a8 <HAL_RCC_ClockConfig+0x1bc>)
 8002546:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800254a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f003 0308 	and.w	r3, r3, #8
 8002554:	2b00      	cmp	r3, #0
 8002556:	d005      	beq.n	8002564 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002558:	4b53      	ldr	r3, [pc, #332]	; (80026a8 <HAL_RCC_ClockConfig+0x1bc>)
 800255a:	689b      	ldr	r3, [r3, #8]
 800255c:	4a52      	ldr	r2, [pc, #328]	; (80026a8 <HAL_RCC_ClockConfig+0x1bc>)
 800255e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002562:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002564:	4b50      	ldr	r3, [pc, #320]	; (80026a8 <HAL_RCC_ClockConfig+0x1bc>)
 8002566:	689b      	ldr	r3, [r3, #8]
 8002568:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	689b      	ldr	r3, [r3, #8]
 8002570:	494d      	ldr	r1, [pc, #308]	; (80026a8 <HAL_RCC_ClockConfig+0x1bc>)
 8002572:	4313      	orrs	r3, r2
 8002574:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f003 0301 	and.w	r3, r3, #1
 800257e:	2b00      	cmp	r3, #0
 8002580:	d044      	beq.n	800260c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	685b      	ldr	r3, [r3, #4]
 8002586:	2b01      	cmp	r3, #1
 8002588:	d107      	bne.n	800259a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800258a:	4b47      	ldr	r3, [pc, #284]	; (80026a8 <HAL_RCC_ClockConfig+0x1bc>)
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002592:	2b00      	cmp	r3, #0
 8002594:	d119      	bne.n	80025ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002596:	2301      	movs	r3, #1
 8002598:	e07f      	b.n	800269a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	685b      	ldr	r3, [r3, #4]
 800259e:	2b02      	cmp	r3, #2
 80025a0:	d003      	beq.n	80025aa <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80025a6:	2b03      	cmp	r3, #3
 80025a8:	d107      	bne.n	80025ba <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80025aa:	4b3f      	ldr	r3, [pc, #252]	; (80026a8 <HAL_RCC_ClockConfig+0x1bc>)
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d109      	bne.n	80025ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80025b6:	2301      	movs	r3, #1
 80025b8:	e06f      	b.n	800269a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025ba:	4b3b      	ldr	r3, [pc, #236]	; (80026a8 <HAL_RCC_ClockConfig+0x1bc>)
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f003 0302 	and.w	r3, r3, #2
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d101      	bne.n	80025ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80025c6:	2301      	movs	r3, #1
 80025c8:	e067      	b.n	800269a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80025ca:	4b37      	ldr	r3, [pc, #220]	; (80026a8 <HAL_RCC_ClockConfig+0x1bc>)
 80025cc:	689b      	ldr	r3, [r3, #8]
 80025ce:	f023 0203 	bic.w	r2, r3, #3
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	685b      	ldr	r3, [r3, #4]
 80025d6:	4934      	ldr	r1, [pc, #208]	; (80026a8 <HAL_RCC_ClockConfig+0x1bc>)
 80025d8:	4313      	orrs	r3, r2
 80025da:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80025dc:	f7ff f8fe 	bl	80017dc <HAL_GetTick>
 80025e0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025e2:	e00a      	b.n	80025fa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80025e4:	f7ff f8fa 	bl	80017dc <HAL_GetTick>
 80025e8:	4602      	mov	r2, r0
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	1ad3      	subs	r3, r2, r3
 80025ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80025f2:	4293      	cmp	r3, r2
 80025f4:	d901      	bls.n	80025fa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80025f6:	2303      	movs	r3, #3
 80025f8:	e04f      	b.n	800269a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025fa:	4b2b      	ldr	r3, [pc, #172]	; (80026a8 <HAL_RCC_ClockConfig+0x1bc>)
 80025fc:	689b      	ldr	r3, [r3, #8]
 80025fe:	f003 020c 	and.w	r2, r3, #12
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	685b      	ldr	r3, [r3, #4]
 8002606:	009b      	lsls	r3, r3, #2
 8002608:	429a      	cmp	r2, r3
 800260a:	d1eb      	bne.n	80025e4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800260c:	4b25      	ldr	r3, [pc, #148]	; (80026a4 <HAL_RCC_ClockConfig+0x1b8>)
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f003 0307 	and.w	r3, r3, #7
 8002614:	683a      	ldr	r2, [r7, #0]
 8002616:	429a      	cmp	r2, r3
 8002618:	d20c      	bcs.n	8002634 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800261a:	4b22      	ldr	r3, [pc, #136]	; (80026a4 <HAL_RCC_ClockConfig+0x1b8>)
 800261c:	683a      	ldr	r2, [r7, #0]
 800261e:	b2d2      	uxtb	r2, r2
 8002620:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002622:	4b20      	ldr	r3, [pc, #128]	; (80026a4 <HAL_RCC_ClockConfig+0x1b8>)
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f003 0307 	and.w	r3, r3, #7
 800262a:	683a      	ldr	r2, [r7, #0]
 800262c:	429a      	cmp	r2, r3
 800262e:	d001      	beq.n	8002634 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002630:	2301      	movs	r3, #1
 8002632:	e032      	b.n	800269a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f003 0304 	and.w	r3, r3, #4
 800263c:	2b00      	cmp	r3, #0
 800263e:	d008      	beq.n	8002652 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002640:	4b19      	ldr	r3, [pc, #100]	; (80026a8 <HAL_RCC_ClockConfig+0x1bc>)
 8002642:	689b      	ldr	r3, [r3, #8]
 8002644:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	68db      	ldr	r3, [r3, #12]
 800264c:	4916      	ldr	r1, [pc, #88]	; (80026a8 <HAL_RCC_ClockConfig+0x1bc>)
 800264e:	4313      	orrs	r3, r2
 8002650:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f003 0308 	and.w	r3, r3, #8
 800265a:	2b00      	cmp	r3, #0
 800265c:	d009      	beq.n	8002672 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800265e:	4b12      	ldr	r3, [pc, #72]	; (80026a8 <HAL_RCC_ClockConfig+0x1bc>)
 8002660:	689b      	ldr	r3, [r3, #8]
 8002662:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	691b      	ldr	r3, [r3, #16]
 800266a:	00db      	lsls	r3, r3, #3
 800266c:	490e      	ldr	r1, [pc, #56]	; (80026a8 <HAL_RCC_ClockConfig+0x1bc>)
 800266e:	4313      	orrs	r3, r2
 8002670:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002672:	f000 f821 	bl	80026b8 <HAL_RCC_GetSysClockFreq>
 8002676:	4602      	mov	r2, r0
 8002678:	4b0b      	ldr	r3, [pc, #44]	; (80026a8 <HAL_RCC_ClockConfig+0x1bc>)
 800267a:	689b      	ldr	r3, [r3, #8]
 800267c:	091b      	lsrs	r3, r3, #4
 800267e:	f003 030f 	and.w	r3, r3, #15
 8002682:	490a      	ldr	r1, [pc, #40]	; (80026ac <HAL_RCC_ClockConfig+0x1c0>)
 8002684:	5ccb      	ldrb	r3, [r1, r3]
 8002686:	fa22 f303 	lsr.w	r3, r2, r3
 800268a:	4a09      	ldr	r2, [pc, #36]	; (80026b0 <HAL_RCC_ClockConfig+0x1c4>)
 800268c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800268e:	4b09      	ldr	r3, [pc, #36]	; (80026b4 <HAL_RCC_ClockConfig+0x1c8>)
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	4618      	mov	r0, r3
 8002694:	f7ff f85e 	bl	8001754 <HAL_InitTick>

  return HAL_OK;
 8002698:	2300      	movs	r3, #0
}
 800269a:	4618      	mov	r0, r3
 800269c:	3710      	adds	r7, #16
 800269e:	46bd      	mov	sp, r7
 80026a0:	bd80      	pop	{r7, pc}
 80026a2:	bf00      	nop
 80026a4:	40023c00 	.word	0x40023c00
 80026a8:	40023800 	.word	0x40023800
 80026ac:	08003b94 	.word	0x08003b94
 80026b0:	20000064 	.word	0x20000064
 80026b4:	20000068 	.word	0x20000068

080026b8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80026b8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80026bc:	b096      	sub	sp, #88	; 0x58
 80026be:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80026c0:	2300      	movs	r3, #0
 80026c2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80026c4:	2300      	movs	r3, #0
 80026c6:	657b      	str	r3, [r7, #84]	; 0x54
 80026c8:	2300      	movs	r3, #0
 80026ca:	64bb      	str	r3, [r7, #72]	; 0x48
  uint32_t sysclockfreq = 0U;
 80026cc:	2300      	movs	r3, #0
 80026ce:	653b      	str	r3, [r7, #80]	; 0x50

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80026d0:	4b77      	ldr	r3, [pc, #476]	; (80028b0 <HAL_RCC_GetSysClockFreq+0x1f8>)
 80026d2:	689b      	ldr	r3, [r3, #8]
 80026d4:	f003 030c 	and.w	r3, r3, #12
 80026d8:	2b08      	cmp	r3, #8
 80026da:	d00d      	beq.n	80026f8 <HAL_RCC_GetSysClockFreq+0x40>
 80026dc:	2b08      	cmp	r3, #8
 80026de:	f200 80de 	bhi.w	800289e <HAL_RCC_GetSysClockFreq+0x1e6>
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d002      	beq.n	80026ec <HAL_RCC_GetSysClockFreq+0x34>
 80026e6:	2b04      	cmp	r3, #4
 80026e8:	d003      	beq.n	80026f2 <HAL_RCC_GetSysClockFreq+0x3a>
 80026ea:	e0d8      	b.n	800289e <HAL_RCC_GetSysClockFreq+0x1e6>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80026ec:	4b71      	ldr	r3, [pc, #452]	; (80028b4 <HAL_RCC_GetSysClockFreq+0x1fc>)
 80026ee:	653b      	str	r3, [r7, #80]	; 0x50
       break;
 80026f0:	e0d8      	b.n	80028a4 <HAL_RCC_GetSysClockFreq+0x1ec>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80026f2:	4b71      	ldr	r3, [pc, #452]	; (80028b8 <HAL_RCC_GetSysClockFreq+0x200>)
 80026f4:	653b      	str	r3, [r7, #80]	; 0x50
      break;
 80026f6:	e0d5      	b.n	80028a4 <HAL_RCC_GetSysClockFreq+0x1ec>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80026f8:	4b6d      	ldr	r3, [pc, #436]	; (80028b0 <HAL_RCC_GetSysClockFreq+0x1f8>)
 80026fa:	685b      	ldr	r3, [r3, #4]
 80026fc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002700:	64fb      	str	r3, [r7, #76]	; 0x4c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002702:	4b6b      	ldr	r3, [pc, #428]	; (80028b0 <HAL_RCC_GetSysClockFreq+0x1f8>)
 8002704:	685b      	ldr	r3, [r3, #4]
 8002706:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800270a:	2b00      	cmp	r3, #0
 800270c:	d066      	beq.n	80027dc <HAL_RCC_GetSysClockFreq+0x124>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800270e:	4b68      	ldr	r3, [pc, #416]	; (80028b0 <HAL_RCC_GetSysClockFreq+0x1f8>)
 8002710:	685b      	ldr	r3, [r3, #4]
 8002712:	099b      	lsrs	r3, r3, #6
 8002714:	2200      	movs	r2, #0
 8002716:	643b      	str	r3, [r7, #64]	; 0x40
 8002718:	647a      	str	r2, [r7, #68]	; 0x44
 800271a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800271c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002720:	63bb      	str	r3, [r7, #56]	; 0x38
 8002722:	2300      	movs	r3, #0
 8002724:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002726:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	; 0x38
 800272a:	4622      	mov	r2, r4
 800272c:	462b      	mov	r3, r5
 800272e:	f04f 0000 	mov.w	r0, #0
 8002732:	f04f 0100 	mov.w	r1, #0
 8002736:	0159      	lsls	r1, r3, #5
 8002738:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800273c:	0150      	lsls	r0, r2, #5
 800273e:	4602      	mov	r2, r0
 8002740:	460b      	mov	r3, r1
 8002742:	4621      	mov	r1, r4
 8002744:	1a51      	subs	r1, r2, r1
 8002746:	61b9      	str	r1, [r7, #24]
 8002748:	4629      	mov	r1, r5
 800274a:	eb63 0301 	sbc.w	r3, r3, r1
 800274e:	61fb      	str	r3, [r7, #28]
 8002750:	f04f 0200 	mov.w	r2, #0
 8002754:	f04f 0300 	mov.w	r3, #0
 8002758:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 800275c:	4649      	mov	r1, r9
 800275e:	024b      	lsls	r3, r1, #9
 8002760:	4641      	mov	r1, r8
 8002762:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002766:	4641      	mov	r1, r8
 8002768:	024a      	lsls	r2, r1, #9
 800276a:	4610      	mov	r0, r2
 800276c:	4619      	mov	r1, r3
 800276e:	4603      	mov	r3, r0
 8002770:	4622      	mov	r2, r4
 8002772:	189b      	adds	r3, r3, r2
 8002774:	613b      	str	r3, [r7, #16]
 8002776:	460b      	mov	r3, r1
 8002778:	462a      	mov	r2, r5
 800277a:	eb42 0303 	adc.w	r3, r2, r3
 800277e:	617b      	str	r3, [r7, #20]
 8002780:	f04f 0200 	mov.w	r2, #0
 8002784:	f04f 0300 	mov.w	r3, #0
 8002788:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 800278c:	4649      	mov	r1, r9
 800278e:	018b      	lsls	r3, r1, #6
 8002790:	4641      	mov	r1, r8
 8002792:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002796:	4641      	mov	r1, r8
 8002798:	018a      	lsls	r2, r1, #6
 800279a:	4641      	mov	r1, r8
 800279c:	1a51      	subs	r1, r2, r1
 800279e:	60b9      	str	r1, [r7, #8]
 80027a0:	4649      	mov	r1, r9
 80027a2:	eb63 0301 	sbc.w	r3, r3, r1
 80027a6:	60fb      	str	r3, [r7, #12]
 80027a8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80027ac:	4603      	mov	r3, r0
 80027ae:	4622      	mov	r2, r4
 80027b0:	189b      	adds	r3, r3, r2
 80027b2:	633b      	str	r3, [r7, #48]	; 0x30
 80027b4:	462b      	mov	r3, r5
 80027b6:	460a      	mov	r2, r1
 80027b8:	eb42 0303 	adc.w	r3, r2, r3
 80027bc:	637b      	str	r3, [r7, #52]	; 0x34
 80027be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80027c0:	2200      	movs	r2, #0
 80027c2:	62bb      	str	r3, [r7, #40]	; 0x28
 80027c4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80027c6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80027ca:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80027ce:	f7fd fd5f 	bl	8000290 <__aeabi_uldivmod>
 80027d2:	4602      	mov	r2, r0
 80027d4:	460b      	mov	r3, r1
 80027d6:	4613      	mov	r3, r2
 80027d8:	657b      	str	r3, [r7, #84]	; 0x54
 80027da:	e052      	b.n	8002882 <HAL_RCC_GetSysClockFreq+0x1ca>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80027dc:	4b34      	ldr	r3, [pc, #208]	; (80028b0 <HAL_RCC_GetSysClockFreq+0x1f8>)
 80027de:	685b      	ldr	r3, [r3, #4]
 80027e0:	099b      	lsrs	r3, r3, #6
 80027e2:	2200      	movs	r2, #0
 80027e4:	4618      	mov	r0, r3
 80027e6:	4611      	mov	r1, r2
 80027e8:	f3c0 0a08 	ubfx	sl, r0, #0, #9
 80027ec:	f04f 0b00 	mov.w	fp, #0
 80027f0:	4652      	mov	r2, sl
 80027f2:	465b      	mov	r3, fp
 80027f4:	f04f 0000 	mov.w	r0, #0
 80027f8:	f04f 0100 	mov.w	r1, #0
 80027fc:	0159      	lsls	r1, r3, #5
 80027fe:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002802:	0150      	lsls	r0, r2, #5
 8002804:	4602      	mov	r2, r0
 8002806:	460b      	mov	r3, r1
 8002808:	ebb2 080a 	subs.w	r8, r2, sl
 800280c:	eb63 090b 	sbc.w	r9, r3, fp
 8002810:	f04f 0200 	mov.w	r2, #0
 8002814:	f04f 0300 	mov.w	r3, #0
 8002818:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800281c:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002820:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002824:	ebb2 0408 	subs.w	r4, r2, r8
 8002828:	eb63 0509 	sbc.w	r5, r3, r9
 800282c:	f04f 0200 	mov.w	r2, #0
 8002830:	f04f 0300 	mov.w	r3, #0
 8002834:	00eb      	lsls	r3, r5, #3
 8002836:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800283a:	00e2      	lsls	r2, r4, #3
 800283c:	4614      	mov	r4, r2
 800283e:	461d      	mov	r5, r3
 8002840:	eb14 030a 	adds.w	r3, r4, sl
 8002844:	603b      	str	r3, [r7, #0]
 8002846:	eb45 030b 	adc.w	r3, r5, fp
 800284a:	607b      	str	r3, [r7, #4]
 800284c:	f04f 0200 	mov.w	r2, #0
 8002850:	f04f 0300 	mov.w	r3, #0
 8002854:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002858:	4629      	mov	r1, r5
 800285a:	028b      	lsls	r3, r1, #10
 800285c:	4621      	mov	r1, r4
 800285e:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002862:	4621      	mov	r1, r4
 8002864:	028a      	lsls	r2, r1, #10
 8002866:	4610      	mov	r0, r2
 8002868:	4619      	mov	r1, r3
 800286a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800286c:	2200      	movs	r2, #0
 800286e:	623b      	str	r3, [r7, #32]
 8002870:	627a      	str	r2, [r7, #36]	; 0x24
 8002872:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002876:	f7fd fd0b 	bl	8000290 <__aeabi_uldivmod>
 800287a:	4602      	mov	r2, r0
 800287c:	460b      	mov	r3, r1
 800287e:	4613      	mov	r3, r2
 8002880:	657b      	str	r3, [r7, #84]	; 0x54
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002882:	4b0b      	ldr	r3, [pc, #44]	; (80028b0 <HAL_RCC_GetSysClockFreq+0x1f8>)
 8002884:	685b      	ldr	r3, [r3, #4]
 8002886:	0c1b      	lsrs	r3, r3, #16
 8002888:	f003 0303 	and.w	r3, r3, #3
 800288c:	3301      	adds	r3, #1
 800288e:	005b      	lsls	r3, r3, #1
 8002890:	64bb      	str	r3, [r7, #72]	; 0x48

      sysclockfreq = pllvco/pllp;
 8002892:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002894:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002896:	fbb2 f3f3 	udiv	r3, r2, r3
 800289a:	653b      	str	r3, [r7, #80]	; 0x50
      break;
 800289c:	e002      	b.n	80028a4 <HAL_RCC_GetSysClockFreq+0x1ec>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800289e:	4b05      	ldr	r3, [pc, #20]	; (80028b4 <HAL_RCC_GetSysClockFreq+0x1fc>)
 80028a0:	653b      	str	r3, [r7, #80]	; 0x50
      break;
 80028a2:	bf00      	nop
    }
  }
  return sysclockfreq;
 80028a4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
}
 80028a6:	4618      	mov	r0, r3
 80028a8:	3758      	adds	r7, #88	; 0x58
 80028aa:	46bd      	mov	sp, r7
 80028ac:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80028b0:	40023800 	.word	0x40023800
 80028b4:	00f42400 	.word	0x00f42400
 80028b8:	000f4240 	.word	0x000f4240

080028bc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80028bc:	b480      	push	{r7}
 80028be:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80028c0:	4b03      	ldr	r3, [pc, #12]	; (80028d0 <HAL_RCC_GetHCLKFreq+0x14>)
 80028c2:	681b      	ldr	r3, [r3, #0]
}
 80028c4:	4618      	mov	r0, r3
 80028c6:	46bd      	mov	sp, r7
 80028c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028cc:	4770      	bx	lr
 80028ce:	bf00      	nop
 80028d0:	20000064 	.word	0x20000064

080028d4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80028d4:	b580      	push	{r7, lr}
 80028d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80028d8:	f7ff fff0 	bl	80028bc <HAL_RCC_GetHCLKFreq>
 80028dc:	4602      	mov	r2, r0
 80028de:	4b05      	ldr	r3, [pc, #20]	; (80028f4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80028e0:	689b      	ldr	r3, [r3, #8]
 80028e2:	0a9b      	lsrs	r3, r3, #10
 80028e4:	f003 0307 	and.w	r3, r3, #7
 80028e8:	4903      	ldr	r1, [pc, #12]	; (80028f8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80028ea:	5ccb      	ldrb	r3, [r1, r3]
 80028ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80028f0:	4618      	mov	r0, r3
 80028f2:	bd80      	pop	{r7, pc}
 80028f4:	40023800 	.word	0x40023800
 80028f8:	08003ba4 	.word	0x08003ba4

080028fc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80028fc:	b580      	push	{r7, lr}
 80028fe:	b082      	sub	sp, #8
 8002900:	af00      	add	r7, sp, #0
 8002902:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	2b00      	cmp	r3, #0
 8002908:	d101      	bne.n	800290e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800290a:	2301      	movs	r3, #1
 800290c:	e041      	b.n	8002992 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002914:	b2db      	uxtb	r3, r3
 8002916:	2b00      	cmp	r3, #0
 8002918:	d106      	bne.n	8002928 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	2200      	movs	r2, #0
 800291e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002922:	6878      	ldr	r0, [r7, #4]
 8002924:	f7fe fe72 	bl	800160c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	2202      	movs	r2, #2
 800292c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681a      	ldr	r2, [r3, #0]
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	3304      	adds	r3, #4
 8002938:	4619      	mov	r1, r3
 800293a:	4610      	mov	r0, r2
 800293c:	f000 f9a0 	bl	8002c80 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	2201      	movs	r2, #1
 8002944:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	2201      	movs	r2, #1
 800294c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	2201      	movs	r2, #1
 8002954:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	2201      	movs	r2, #1
 800295c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	2201      	movs	r2, #1
 8002964:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	2201      	movs	r2, #1
 800296c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	2201      	movs	r2, #1
 8002974:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	2201      	movs	r2, #1
 800297c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	2201      	movs	r2, #1
 8002984:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	2201      	movs	r2, #1
 800298c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002990:	2300      	movs	r3, #0
}
 8002992:	4618      	mov	r0, r3
 8002994:	3708      	adds	r7, #8
 8002996:	46bd      	mov	sp, r7
 8002998:	bd80      	pop	{r7, pc}
	...

0800299c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800299c:	b580      	push	{r7, lr}
 800299e:	b084      	sub	sp, #16
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	6078      	str	r0, [r7, #4]
 80029a4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80029a6:	683b      	ldr	r3, [r7, #0]
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d109      	bne.n	80029c0 <HAL_TIM_PWM_Start+0x24>
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80029b2:	b2db      	uxtb	r3, r3
 80029b4:	2b01      	cmp	r3, #1
 80029b6:	bf14      	ite	ne
 80029b8:	2301      	movne	r3, #1
 80029ba:	2300      	moveq	r3, #0
 80029bc:	b2db      	uxtb	r3, r3
 80029be:	e022      	b.n	8002a06 <HAL_TIM_PWM_Start+0x6a>
 80029c0:	683b      	ldr	r3, [r7, #0]
 80029c2:	2b04      	cmp	r3, #4
 80029c4:	d109      	bne.n	80029da <HAL_TIM_PWM_Start+0x3e>
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80029cc:	b2db      	uxtb	r3, r3
 80029ce:	2b01      	cmp	r3, #1
 80029d0:	bf14      	ite	ne
 80029d2:	2301      	movne	r3, #1
 80029d4:	2300      	moveq	r3, #0
 80029d6:	b2db      	uxtb	r3, r3
 80029d8:	e015      	b.n	8002a06 <HAL_TIM_PWM_Start+0x6a>
 80029da:	683b      	ldr	r3, [r7, #0]
 80029dc:	2b08      	cmp	r3, #8
 80029de:	d109      	bne.n	80029f4 <HAL_TIM_PWM_Start+0x58>
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80029e6:	b2db      	uxtb	r3, r3
 80029e8:	2b01      	cmp	r3, #1
 80029ea:	bf14      	ite	ne
 80029ec:	2301      	movne	r3, #1
 80029ee:	2300      	moveq	r3, #0
 80029f0:	b2db      	uxtb	r3, r3
 80029f2:	e008      	b.n	8002a06 <HAL_TIM_PWM_Start+0x6a>
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80029fa:	b2db      	uxtb	r3, r3
 80029fc:	2b01      	cmp	r3, #1
 80029fe:	bf14      	ite	ne
 8002a00:	2301      	movne	r3, #1
 8002a02:	2300      	moveq	r3, #0
 8002a04:	b2db      	uxtb	r3, r3
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d001      	beq.n	8002a0e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002a0a:	2301      	movs	r3, #1
 8002a0c:	e068      	b.n	8002ae0 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002a0e:	683b      	ldr	r3, [r7, #0]
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d104      	bne.n	8002a1e <HAL_TIM_PWM_Start+0x82>
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	2202      	movs	r2, #2
 8002a18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002a1c:	e013      	b.n	8002a46 <HAL_TIM_PWM_Start+0xaa>
 8002a1e:	683b      	ldr	r3, [r7, #0]
 8002a20:	2b04      	cmp	r3, #4
 8002a22:	d104      	bne.n	8002a2e <HAL_TIM_PWM_Start+0x92>
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	2202      	movs	r2, #2
 8002a28:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002a2c:	e00b      	b.n	8002a46 <HAL_TIM_PWM_Start+0xaa>
 8002a2e:	683b      	ldr	r3, [r7, #0]
 8002a30:	2b08      	cmp	r3, #8
 8002a32:	d104      	bne.n	8002a3e <HAL_TIM_PWM_Start+0xa2>
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	2202      	movs	r2, #2
 8002a38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002a3c:	e003      	b.n	8002a46 <HAL_TIM_PWM_Start+0xaa>
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	2202      	movs	r2, #2
 8002a42:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	2201      	movs	r2, #1
 8002a4c:	6839      	ldr	r1, [r7, #0]
 8002a4e:	4618      	mov	r0, r3
 8002a50:	f000 fb22 	bl	8003098 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	4a23      	ldr	r2, [pc, #140]	; (8002ae8 <HAL_TIM_PWM_Start+0x14c>)
 8002a5a:	4293      	cmp	r3, r2
 8002a5c:	d107      	bne.n	8002a6e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002a6c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	4a1d      	ldr	r2, [pc, #116]	; (8002ae8 <HAL_TIM_PWM_Start+0x14c>)
 8002a74:	4293      	cmp	r3, r2
 8002a76:	d018      	beq.n	8002aaa <HAL_TIM_PWM_Start+0x10e>
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a80:	d013      	beq.n	8002aaa <HAL_TIM_PWM_Start+0x10e>
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	4a19      	ldr	r2, [pc, #100]	; (8002aec <HAL_TIM_PWM_Start+0x150>)
 8002a88:	4293      	cmp	r3, r2
 8002a8a:	d00e      	beq.n	8002aaa <HAL_TIM_PWM_Start+0x10e>
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	4a17      	ldr	r2, [pc, #92]	; (8002af0 <HAL_TIM_PWM_Start+0x154>)
 8002a92:	4293      	cmp	r3, r2
 8002a94:	d009      	beq.n	8002aaa <HAL_TIM_PWM_Start+0x10e>
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	4a16      	ldr	r2, [pc, #88]	; (8002af4 <HAL_TIM_PWM_Start+0x158>)
 8002a9c:	4293      	cmp	r3, r2
 8002a9e:	d004      	beq.n	8002aaa <HAL_TIM_PWM_Start+0x10e>
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	4a14      	ldr	r2, [pc, #80]	; (8002af8 <HAL_TIM_PWM_Start+0x15c>)
 8002aa6:	4293      	cmp	r3, r2
 8002aa8:	d111      	bne.n	8002ace <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	689b      	ldr	r3, [r3, #8]
 8002ab0:	f003 0307 	and.w	r3, r3, #7
 8002ab4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	2b06      	cmp	r3, #6
 8002aba:	d010      	beq.n	8002ade <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	681a      	ldr	r2, [r3, #0]
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f042 0201 	orr.w	r2, r2, #1
 8002aca:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002acc:	e007      	b.n	8002ade <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	681a      	ldr	r2, [r3, #0]
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f042 0201 	orr.w	r2, r2, #1
 8002adc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002ade:	2300      	movs	r3, #0
}
 8002ae0:	4618      	mov	r0, r3
 8002ae2:	3710      	adds	r7, #16
 8002ae4:	46bd      	mov	sp, r7
 8002ae6:	bd80      	pop	{r7, pc}
 8002ae8:	40010000 	.word	0x40010000
 8002aec:	40000400 	.word	0x40000400
 8002af0:	40000800 	.word	0x40000800
 8002af4:	40000c00 	.word	0x40000c00
 8002af8:	40014000 	.word	0x40014000

08002afc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002afc:	b580      	push	{r7, lr}
 8002afe:	b086      	sub	sp, #24
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	60f8      	str	r0, [r7, #12]
 8002b04:	60b9      	str	r1, [r7, #8]
 8002b06:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002b08:	2300      	movs	r3, #0
 8002b0a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b12:	2b01      	cmp	r3, #1
 8002b14:	d101      	bne.n	8002b1a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002b16:	2302      	movs	r3, #2
 8002b18:	e0ae      	b.n	8002c78 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	2201      	movs	r2, #1
 8002b1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	2b0c      	cmp	r3, #12
 8002b26:	f200 809f 	bhi.w	8002c68 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8002b2a:	a201      	add	r2, pc, #4	; (adr r2, 8002b30 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002b2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b30:	08002b65 	.word	0x08002b65
 8002b34:	08002c69 	.word	0x08002c69
 8002b38:	08002c69 	.word	0x08002c69
 8002b3c:	08002c69 	.word	0x08002c69
 8002b40:	08002ba5 	.word	0x08002ba5
 8002b44:	08002c69 	.word	0x08002c69
 8002b48:	08002c69 	.word	0x08002c69
 8002b4c:	08002c69 	.word	0x08002c69
 8002b50:	08002be7 	.word	0x08002be7
 8002b54:	08002c69 	.word	0x08002c69
 8002b58:	08002c69 	.word	0x08002c69
 8002b5c:	08002c69 	.word	0x08002c69
 8002b60:	08002c27 	.word	0x08002c27
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	68b9      	ldr	r1, [r7, #8]
 8002b6a:	4618      	mov	r0, r3
 8002b6c:	f000 f908 	bl	8002d80 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	699a      	ldr	r2, [r3, #24]
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f042 0208 	orr.w	r2, r2, #8
 8002b7e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	699a      	ldr	r2, [r3, #24]
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f022 0204 	bic.w	r2, r2, #4
 8002b8e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	6999      	ldr	r1, [r3, #24]
 8002b96:	68bb      	ldr	r3, [r7, #8]
 8002b98:	691a      	ldr	r2, [r3, #16]
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	430a      	orrs	r2, r1
 8002ba0:	619a      	str	r2, [r3, #24]
      break;
 8002ba2:	e064      	b.n	8002c6e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	68b9      	ldr	r1, [r7, #8]
 8002baa:	4618      	mov	r0, r3
 8002bac:	f000 f94e 	bl	8002e4c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	699a      	ldr	r2, [r3, #24]
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002bbe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	699a      	ldr	r2, [r3, #24]
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002bce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	6999      	ldr	r1, [r3, #24]
 8002bd6:	68bb      	ldr	r3, [r7, #8]
 8002bd8:	691b      	ldr	r3, [r3, #16]
 8002bda:	021a      	lsls	r2, r3, #8
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	430a      	orrs	r2, r1
 8002be2:	619a      	str	r2, [r3, #24]
      break;
 8002be4:	e043      	b.n	8002c6e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	68b9      	ldr	r1, [r7, #8]
 8002bec:	4618      	mov	r0, r3
 8002bee:	f000 f999 	bl	8002f24 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	69da      	ldr	r2, [r3, #28]
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f042 0208 	orr.w	r2, r2, #8
 8002c00:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	69da      	ldr	r2, [r3, #28]
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f022 0204 	bic.w	r2, r2, #4
 8002c10:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	69d9      	ldr	r1, [r3, #28]
 8002c18:	68bb      	ldr	r3, [r7, #8]
 8002c1a:	691a      	ldr	r2, [r3, #16]
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	430a      	orrs	r2, r1
 8002c22:	61da      	str	r2, [r3, #28]
      break;
 8002c24:	e023      	b.n	8002c6e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	68b9      	ldr	r1, [r7, #8]
 8002c2c:	4618      	mov	r0, r3
 8002c2e:	f000 f9e3 	bl	8002ff8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	69da      	ldr	r2, [r3, #28]
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002c40:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	69da      	ldr	r2, [r3, #28]
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002c50:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	69d9      	ldr	r1, [r3, #28]
 8002c58:	68bb      	ldr	r3, [r7, #8]
 8002c5a:	691b      	ldr	r3, [r3, #16]
 8002c5c:	021a      	lsls	r2, r3, #8
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	430a      	orrs	r2, r1
 8002c64:	61da      	str	r2, [r3, #28]
      break;
 8002c66:	e002      	b.n	8002c6e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8002c68:	2301      	movs	r3, #1
 8002c6a:	75fb      	strb	r3, [r7, #23]
      break;
 8002c6c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	2200      	movs	r2, #0
 8002c72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002c76:	7dfb      	ldrb	r3, [r7, #23]
}
 8002c78:	4618      	mov	r0, r3
 8002c7a:	3718      	adds	r7, #24
 8002c7c:	46bd      	mov	sp, r7
 8002c7e:	bd80      	pop	{r7, pc}

08002c80 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002c80:	b480      	push	{r7}
 8002c82:	b085      	sub	sp, #20
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	6078      	str	r0, [r7, #4]
 8002c88:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	4a34      	ldr	r2, [pc, #208]	; (8002d64 <TIM_Base_SetConfig+0xe4>)
 8002c94:	4293      	cmp	r3, r2
 8002c96:	d00f      	beq.n	8002cb8 <TIM_Base_SetConfig+0x38>
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c9e:	d00b      	beq.n	8002cb8 <TIM_Base_SetConfig+0x38>
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	4a31      	ldr	r2, [pc, #196]	; (8002d68 <TIM_Base_SetConfig+0xe8>)
 8002ca4:	4293      	cmp	r3, r2
 8002ca6:	d007      	beq.n	8002cb8 <TIM_Base_SetConfig+0x38>
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	4a30      	ldr	r2, [pc, #192]	; (8002d6c <TIM_Base_SetConfig+0xec>)
 8002cac:	4293      	cmp	r3, r2
 8002cae:	d003      	beq.n	8002cb8 <TIM_Base_SetConfig+0x38>
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	4a2f      	ldr	r2, [pc, #188]	; (8002d70 <TIM_Base_SetConfig+0xf0>)
 8002cb4:	4293      	cmp	r3, r2
 8002cb6:	d108      	bne.n	8002cca <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002cbe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002cc0:	683b      	ldr	r3, [r7, #0]
 8002cc2:	685b      	ldr	r3, [r3, #4]
 8002cc4:	68fa      	ldr	r2, [r7, #12]
 8002cc6:	4313      	orrs	r3, r2
 8002cc8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	4a25      	ldr	r2, [pc, #148]	; (8002d64 <TIM_Base_SetConfig+0xe4>)
 8002cce:	4293      	cmp	r3, r2
 8002cd0:	d01b      	beq.n	8002d0a <TIM_Base_SetConfig+0x8a>
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002cd8:	d017      	beq.n	8002d0a <TIM_Base_SetConfig+0x8a>
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	4a22      	ldr	r2, [pc, #136]	; (8002d68 <TIM_Base_SetConfig+0xe8>)
 8002cde:	4293      	cmp	r3, r2
 8002ce0:	d013      	beq.n	8002d0a <TIM_Base_SetConfig+0x8a>
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	4a21      	ldr	r2, [pc, #132]	; (8002d6c <TIM_Base_SetConfig+0xec>)
 8002ce6:	4293      	cmp	r3, r2
 8002ce8:	d00f      	beq.n	8002d0a <TIM_Base_SetConfig+0x8a>
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	4a20      	ldr	r2, [pc, #128]	; (8002d70 <TIM_Base_SetConfig+0xf0>)
 8002cee:	4293      	cmp	r3, r2
 8002cf0:	d00b      	beq.n	8002d0a <TIM_Base_SetConfig+0x8a>
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	4a1f      	ldr	r2, [pc, #124]	; (8002d74 <TIM_Base_SetConfig+0xf4>)
 8002cf6:	4293      	cmp	r3, r2
 8002cf8:	d007      	beq.n	8002d0a <TIM_Base_SetConfig+0x8a>
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	4a1e      	ldr	r2, [pc, #120]	; (8002d78 <TIM_Base_SetConfig+0xf8>)
 8002cfe:	4293      	cmp	r3, r2
 8002d00:	d003      	beq.n	8002d0a <TIM_Base_SetConfig+0x8a>
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	4a1d      	ldr	r2, [pc, #116]	; (8002d7c <TIM_Base_SetConfig+0xfc>)
 8002d06:	4293      	cmp	r3, r2
 8002d08:	d108      	bne.n	8002d1c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d10:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002d12:	683b      	ldr	r3, [r7, #0]
 8002d14:	68db      	ldr	r3, [r3, #12]
 8002d16:	68fa      	ldr	r2, [r7, #12]
 8002d18:	4313      	orrs	r3, r2
 8002d1a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002d22:	683b      	ldr	r3, [r7, #0]
 8002d24:	695b      	ldr	r3, [r3, #20]
 8002d26:	4313      	orrs	r3, r2
 8002d28:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	68fa      	ldr	r2, [r7, #12]
 8002d2e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002d30:	683b      	ldr	r3, [r7, #0]
 8002d32:	689a      	ldr	r2, [r3, #8]
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002d38:	683b      	ldr	r3, [r7, #0]
 8002d3a:	681a      	ldr	r2, [r3, #0]
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	4a08      	ldr	r2, [pc, #32]	; (8002d64 <TIM_Base_SetConfig+0xe4>)
 8002d44:	4293      	cmp	r3, r2
 8002d46:	d103      	bne.n	8002d50 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002d48:	683b      	ldr	r3, [r7, #0]
 8002d4a:	691a      	ldr	r2, [r3, #16]
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	2201      	movs	r2, #1
 8002d54:	615a      	str	r2, [r3, #20]
}
 8002d56:	bf00      	nop
 8002d58:	3714      	adds	r7, #20
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d60:	4770      	bx	lr
 8002d62:	bf00      	nop
 8002d64:	40010000 	.word	0x40010000
 8002d68:	40000400 	.word	0x40000400
 8002d6c:	40000800 	.word	0x40000800
 8002d70:	40000c00 	.word	0x40000c00
 8002d74:	40014000 	.word	0x40014000
 8002d78:	40014400 	.word	0x40014400
 8002d7c:	40014800 	.word	0x40014800

08002d80 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002d80:	b480      	push	{r7}
 8002d82:	b087      	sub	sp, #28
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	6078      	str	r0, [r7, #4]
 8002d88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	6a1b      	ldr	r3, [r3, #32]
 8002d8e:	f023 0201 	bic.w	r2, r3, #1
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	6a1b      	ldr	r3, [r3, #32]
 8002d9a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	685b      	ldr	r3, [r3, #4]
 8002da0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	699b      	ldr	r3, [r3, #24]
 8002da6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002dae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	f023 0303 	bic.w	r3, r3, #3
 8002db6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002db8:	683b      	ldr	r3, [r7, #0]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	68fa      	ldr	r2, [r7, #12]
 8002dbe:	4313      	orrs	r3, r2
 8002dc0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002dc2:	697b      	ldr	r3, [r7, #20]
 8002dc4:	f023 0302 	bic.w	r3, r3, #2
 8002dc8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002dca:	683b      	ldr	r3, [r7, #0]
 8002dcc:	689b      	ldr	r3, [r3, #8]
 8002dce:	697a      	ldr	r2, [r7, #20]
 8002dd0:	4313      	orrs	r3, r2
 8002dd2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	4a1c      	ldr	r2, [pc, #112]	; (8002e48 <TIM_OC1_SetConfig+0xc8>)
 8002dd8:	4293      	cmp	r3, r2
 8002dda:	d10c      	bne.n	8002df6 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002ddc:	697b      	ldr	r3, [r7, #20]
 8002dde:	f023 0308 	bic.w	r3, r3, #8
 8002de2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002de4:	683b      	ldr	r3, [r7, #0]
 8002de6:	68db      	ldr	r3, [r3, #12]
 8002de8:	697a      	ldr	r2, [r7, #20]
 8002dea:	4313      	orrs	r3, r2
 8002dec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002dee:	697b      	ldr	r3, [r7, #20]
 8002df0:	f023 0304 	bic.w	r3, r3, #4
 8002df4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	4a13      	ldr	r2, [pc, #76]	; (8002e48 <TIM_OC1_SetConfig+0xc8>)
 8002dfa:	4293      	cmp	r3, r2
 8002dfc:	d111      	bne.n	8002e22 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002dfe:	693b      	ldr	r3, [r7, #16]
 8002e00:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002e04:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002e06:	693b      	ldr	r3, [r7, #16]
 8002e08:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002e0c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002e0e:	683b      	ldr	r3, [r7, #0]
 8002e10:	695b      	ldr	r3, [r3, #20]
 8002e12:	693a      	ldr	r2, [r7, #16]
 8002e14:	4313      	orrs	r3, r2
 8002e16:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002e18:	683b      	ldr	r3, [r7, #0]
 8002e1a:	699b      	ldr	r3, [r3, #24]
 8002e1c:	693a      	ldr	r2, [r7, #16]
 8002e1e:	4313      	orrs	r3, r2
 8002e20:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	693a      	ldr	r2, [r7, #16]
 8002e26:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	68fa      	ldr	r2, [r7, #12]
 8002e2c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002e2e:	683b      	ldr	r3, [r7, #0]
 8002e30:	685a      	ldr	r2, [r3, #4]
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	697a      	ldr	r2, [r7, #20]
 8002e3a:	621a      	str	r2, [r3, #32]
}
 8002e3c:	bf00      	nop
 8002e3e:	371c      	adds	r7, #28
 8002e40:	46bd      	mov	sp, r7
 8002e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e46:	4770      	bx	lr
 8002e48:	40010000 	.word	0x40010000

08002e4c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002e4c:	b480      	push	{r7}
 8002e4e:	b087      	sub	sp, #28
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	6078      	str	r0, [r7, #4]
 8002e54:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	6a1b      	ldr	r3, [r3, #32]
 8002e5a:	f023 0210 	bic.w	r2, r3, #16
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	6a1b      	ldr	r3, [r3, #32]
 8002e66:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	685b      	ldr	r3, [r3, #4]
 8002e6c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	699b      	ldr	r3, [r3, #24]
 8002e72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002e7a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e82:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002e84:	683b      	ldr	r3, [r7, #0]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	021b      	lsls	r3, r3, #8
 8002e8a:	68fa      	ldr	r2, [r7, #12]
 8002e8c:	4313      	orrs	r3, r2
 8002e8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002e90:	697b      	ldr	r3, [r7, #20]
 8002e92:	f023 0320 	bic.w	r3, r3, #32
 8002e96:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002e98:	683b      	ldr	r3, [r7, #0]
 8002e9a:	689b      	ldr	r3, [r3, #8]
 8002e9c:	011b      	lsls	r3, r3, #4
 8002e9e:	697a      	ldr	r2, [r7, #20]
 8002ea0:	4313      	orrs	r3, r2
 8002ea2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	4a1e      	ldr	r2, [pc, #120]	; (8002f20 <TIM_OC2_SetConfig+0xd4>)
 8002ea8:	4293      	cmp	r3, r2
 8002eaa:	d10d      	bne.n	8002ec8 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002eac:	697b      	ldr	r3, [r7, #20]
 8002eae:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002eb2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002eb4:	683b      	ldr	r3, [r7, #0]
 8002eb6:	68db      	ldr	r3, [r3, #12]
 8002eb8:	011b      	lsls	r3, r3, #4
 8002eba:	697a      	ldr	r2, [r7, #20]
 8002ebc:	4313      	orrs	r3, r2
 8002ebe:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002ec0:	697b      	ldr	r3, [r7, #20]
 8002ec2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002ec6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	4a15      	ldr	r2, [pc, #84]	; (8002f20 <TIM_OC2_SetConfig+0xd4>)
 8002ecc:	4293      	cmp	r3, r2
 8002ece:	d113      	bne.n	8002ef8 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002ed0:	693b      	ldr	r3, [r7, #16]
 8002ed2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002ed6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002ed8:	693b      	ldr	r3, [r7, #16]
 8002eda:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002ede:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002ee0:	683b      	ldr	r3, [r7, #0]
 8002ee2:	695b      	ldr	r3, [r3, #20]
 8002ee4:	009b      	lsls	r3, r3, #2
 8002ee6:	693a      	ldr	r2, [r7, #16]
 8002ee8:	4313      	orrs	r3, r2
 8002eea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002eec:	683b      	ldr	r3, [r7, #0]
 8002eee:	699b      	ldr	r3, [r3, #24]
 8002ef0:	009b      	lsls	r3, r3, #2
 8002ef2:	693a      	ldr	r2, [r7, #16]
 8002ef4:	4313      	orrs	r3, r2
 8002ef6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	693a      	ldr	r2, [r7, #16]
 8002efc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	68fa      	ldr	r2, [r7, #12]
 8002f02:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002f04:	683b      	ldr	r3, [r7, #0]
 8002f06:	685a      	ldr	r2, [r3, #4]
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	697a      	ldr	r2, [r7, #20]
 8002f10:	621a      	str	r2, [r3, #32]
}
 8002f12:	bf00      	nop
 8002f14:	371c      	adds	r7, #28
 8002f16:	46bd      	mov	sp, r7
 8002f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f1c:	4770      	bx	lr
 8002f1e:	bf00      	nop
 8002f20:	40010000 	.word	0x40010000

08002f24 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002f24:	b480      	push	{r7}
 8002f26:	b087      	sub	sp, #28
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	6078      	str	r0, [r7, #4]
 8002f2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	6a1b      	ldr	r3, [r3, #32]
 8002f32:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	6a1b      	ldr	r3, [r3, #32]
 8002f3e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	685b      	ldr	r3, [r3, #4]
 8002f44:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	69db      	ldr	r3, [r3, #28]
 8002f4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f52:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	f023 0303 	bic.w	r3, r3, #3
 8002f5a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002f5c:	683b      	ldr	r3, [r7, #0]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	68fa      	ldr	r2, [r7, #12]
 8002f62:	4313      	orrs	r3, r2
 8002f64:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002f66:	697b      	ldr	r3, [r7, #20]
 8002f68:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002f6c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002f6e:	683b      	ldr	r3, [r7, #0]
 8002f70:	689b      	ldr	r3, [r3, #8]
 8002f72:	021b      	lsls	r3, r3, #8
 8002f74:	697a      	ldr	r2, [r7, #20]
 8002f76:	4313      	orrs	r3, r2
 8002f78:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	4a1d      	ldr	r2, [pc, #116]	; (8002ff4 <TIM_OC3_SetConfig+0xd0>)
 8002f7e:	4293      	cmp	r3, r2
 8002f80:	d10d      	bne.n	8002f9e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002f82:	697b      	ldr	r3, [r7, #20]
 8002f84:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002f88:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002f8a:	683b      	ldr	r3, [r7, #0]
 8002f8c:	68db      	ldr	r3, [r3, #12]
 8002f8e:	021b      	lsls	r3, r3, #8
 8002f90:	697a      	ldr	r2, [r7, #20]
 8002f92:	4313      	orrs	r3, r2
 8002f94:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002f96:	697b      	ldr	r3, [r7, #20]
 8002f98:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002f9c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	4a14      	ldr	r2, [pc, #80]	; (8002ff4 <TIM_OC3_SetConfig+0xd0>)
 8002fa2:	4293      	cmp	r3, r2
 8002fa4:	d113      	bne.n	8002fce <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002fa6:	693b      	ldr	r3, [r7, #16]
 8002fa8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002fac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002fae:	693b      	ldr	r3, [r7, #16]
 8002fb0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002fb4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002fb6:	683b      	ldr	r3, [r7, #0]
 8002fb8:	695b      	ldr	r3, [r3, #20]
 8002fba:	011b      	lsls	r3, r3, #4
 8002fbc:	693a      	ldr	r2, [r7, #16]
 8002fbe:	4313      	orrs	r3, r2
 8002fc0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002fc2:	683b      	ldr	r3, [r7, #0]
 8002fc4:	699b      	ldr	r3, [r3, #24]
 8002fc6:	011b      	lsls	r3, r3, #4
 8002fc8:	693a      	ldr	r2, [r7, #16]
 8002fca:	4313      	orrs	r3, r2
 8002fcc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	693a      	ldr	r2, [r7, #16]
 8002fd2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	68fa      	ldr	r2, [r7, #12]
 8002fd8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002fda:	683b      	ldr	r3, [r7, #0]
 8002fdc:	685a      	ldr	r2, [r3, #4]
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	697a      	ldr	r2, [r7, #20]
 8002fe6:	621a      	str	r2, [r3, #32]
}
 8002fe8:	bf00      	nop
 8002fea:	371c      	adds	r7, #28
 8002fec:	46bd      	mov	sp, r7
 8002fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff2:	4770      	bx	lr
 8002ff4:	40010000 	.word	0x40010000

08002ff8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002ff8:	b480      	push	{r7}
 8002ffa:	b087      	sub	sp, #28
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	6078      	str	r0, [r7, #4]
 8003000:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	6a1b      	ldr	r3, [r3, #32]
 8003006:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	6a1b      	ldr	r3, [r3, #32]
 8003012:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	685b      	ldr	r3, [r3, #4]
 8003018:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	69db      	ldr	r3, [r3, #28]
 800301e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003026:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800302e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003030:	683b      	ldr	r3, [r7, #0]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	021b      	lsls	r3, r3, #8
 8003036:	68fa      	ldr	r2, [r7, #12]
 8003038:	4313      	orrs	r3, r2
 800303a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800303c:	693b      	ldr	r3, [r7, #16]
 800303e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003042:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003044:	683b      	ldr	r3, [r7, #0]
 8003046:	689b      	ldr	r3, [r3, #8]
 8003048:	031b      	lsls	r3, r3, #12
 800304a:	693a      	ldr	r2, [r7, #16]
 800304c:	4313      	orrs	r3, r2
 800304e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	4a10      	ldr	r2, [pc, #64]	; (8003094 <TIM_OC4_SetConfig+0x9c>)
 8003054:	4293      	cmp	r3, r2
 8003056:	d109      	bne.n	800306c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003058:	697b      	ldr	r3, [r7, #20]
 800305a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800305e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003060:	683b      	ldr	r3, [r7, #0]
 8003062:	695b      	ldr	r3, [r3, #20]
 8003064:	019b      	lsls	r3, r3, #6
 8003066:	697a      	ldr	r2, [r7, #20]
 8003068:	4313      	orrs	r3, r2
 800306a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	697a      	ldr	r2, [r7, #20]
 8003070:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	68fa      	ldr	r2, [r7, #12]
 8003076:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003078:	683b      	ldr	r3, [r7, #0]
 800307a:	685a      	ldr	r2, [r3, #4]
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	693a      	ldr	r2, [r7, #16]
 8003084:	621a      	str	r2, [r3, #32]
}
 8003086:	bf00      	nop
 8003088:	371c      	adds	r7, #28
 800308a:	46bd      	mov	sp, r7
 800308c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003090:	4770      	bx	lr
 8003092:	bf00      	nop
 8003094:	40010000 	.word	0x40010000

08003098 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003098:	b480      	push	{r7}
 800309a:	b087      	sub	sp, #28
 800309c:	af00      	add	r7, sp, #0
 800309e:	60f8      	str	r0, [r7, #12]
 80030a0:	60b9      	str	r1, [r7, #8]
 80030a2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80030a4:	68bb      	ldr	r3, [r7, #8]
 80030a6:	f003 031f 	and.w	r3, r3, #31
 80030aa:	2201      	movs	r2, #1
 80030ac:	fa02 f303 	lsl.w	r3, r2, r3
 80030b0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	6a1a      	ldr	r2, [r3, #32]
 80030b6:	697b      	ldr	r3, [r7, #20]
 80030b8:	43db      	mvns	r3, r3
 80030ba:	401a      	ands	r2, r3
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	6a1a      	ldr	r2, [r3, #32]
 80030c4:	68bb      	ldr	r3, [r7, #8]
 80030c6:	f003 031f 	and.w	r3, r3, #31
 80030ca:	6879      	ldr	r1, [r7, #4]
 80030cc:	fa01 f303 	lsl.w	r3, r1, r3
 80030d0:	431a      	orrs	r2, r3
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	621a      	str	r2, [r3, #32]
}
 80030d6:	bf00      	nop
 80030d8:	371c      	adds	r7, #28
 80030da:	46bd      	mov	sp, r7
 80030dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e0:	4770      	bx	lr
	...

080030e4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80030e4:	b480      	push	{r7}
 80030e6:	b085      	sub	sp, #20
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	6078      	str	r0, [r7, #4]
 80030ec:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80030f4:	2b01      	cmp	r3, #1
 80030f6:	d101      	bne.n	80030fc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80030f8:	2302      	movs	r3, #2
 80030fa:	e050      	b.n	800319e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	2201      	movs	r2, #1
 8003100:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	2202      	movs	r2, #2
 8003108:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	685b      	ldr	r3, [r3, #4]
 8003112:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	689b      	ldr	r3, [r3, #8]
 800311a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003122:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003124:	683b      	ldr	r3, [r7, #0]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	68fa      	ldr	r2, [r7, #12]
 800312a:	4313      	orrs	r3, r2
 800312c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	68fa      	ldr	r2, [r7, #12]
 8003134:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	4a1c      	ldr	r2, [pc, #112]	; (80031ac <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800313c:	4293      	cmp	r3, r2
 800313e:	d018      	beq.n	8003172 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003148:	d013      	beq.n	8003172 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	4a18      	ldr	r2, [pc, #96]	; (80031b0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003150:	4293      	cmp	r3, r2
 8003152:	d00e      	beq.n	8003172 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	4a16      	ldr	r2, [pc, #88]	; (80031b4 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800315a:	4293      	cmp	r3, r2
 800315c:	d009      	beq.n	8003172 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	4a15      	ldr	r2, [pc, #84]	; (80031b8 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003164:	4293      	cmp	r3, r2
 8003166:	d004      	beq.n	8003172 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	4a13      	ldr	r2, [pc, #76]	; (80031bc <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800316e:	4293      	cmp	r3, r2
 8003170:	d10c      	bne.n	800318c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003172:	68bb      	ldr	r3, [r7, #8]
 8003174:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003178:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800317a:	683b      	ldr	r3, [r7, #0]
 800317c:	685b      	ldr	r3, [r3, #4]
 800317e:	68ba      	ldr	r2, [r7, #8]
 8003180:	4313      	orrs	r3, r2
 8003182:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	68ba      	ldr	r2, [r7, #8]
 800318a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	2201      	movs	r2, #1
 8003190:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	2200      	movs	r2, #0
 8003198:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800319c:	2300      	movs	r3, #0
}
 800319e:	4618      	mov	r0, r3
 80031a0:	3714      	adds	r7, #20
 80031a2:	46bd      	mov	sp, r7
 80031a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a8:	4770      	bx	lr
 80031aa:	bf00      	nop
 80031ac:	40010000 	.word	0x40010000
 80031b0:	40000400 	.word	0x40000400
 80031b4:	40000800 	.word	0x40000800
 80031b8:	40000c00 	.word	0x40000c00
 80031bc:	40014000 	.word	0x40014000

080031c0 <siprintf>:
 80031c0:	b40e      	push	{r1, r2, r3}
 80031c2:	b500      	push	{lr}
 80031c4:	b09c      	sub	sp, #112	; 0x70
 80031c6:	ab1d      	add	r3, sp, #116	; 0x74
 80031c8:	9002      	str	r0, [sp, #8]
 80031ca:	9006      	str	r0, [sp, #24]
 80031cc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80031d0:	4809      	ldr	r0, [pc, #36]	; (80031f8 <siprintf+0x38>)
 80031d2:	9107      	str	r1, [sp, #28]
 80031d4:	9104      	str	r1, [sp, #16]
 80031d6:	4909      	ldr	r1, [pc, #36]	; (80031fc <siprintf+0x3c>)
 80031d8:	f853 2b04 	ldr.w	r2, [r3], #4
 80031dc:	9105      	str	r1, [sp, #20]
 80031de:	6800      	ldr	r0, [r0, #0]
 80031e0:	9301      	str	r3, [sp, #4]
 80031e2:	a902      	add	r1, sp, #8
 80031e4:	f000 f89a 	bl	800331c <_svfiprintf_r>
 80031e8:	9b02      	ldr	r3, [sp, #8]
 80031ea:	2200      	movs	r2, #0
 80031ec:	701a      	strb	r2, [r3, #0]
 80031ee:	b01c      	add	sp, #112	; 0x70
 80031f0:	f85d eb04 	ldr.w	lr, [sp], #4
 80031f4:	b003      	add	sp, #12
 80031f6:	4770      	bx	lr
 80031f8:	200000bc 	.word	0x200000bc
 80031fc:	ffff0208 	.word	0xffff0208

08003200 <memset>:
 8003200:	4402      	add	r2, r0
 8003202:	4603      	mov	r3, r0
 8003204:	4293      	cmp	r3, r2
 8003206:	d100      	bne.n	800320a <memset+0xa>
 8003208:	4770      	bx	lr
 800320a:	f803 1b01 	strb.w	r1, [r3], #1
 800320e:	e7f9      	b.n	8003204 <memset+0x4>

08003210 <__errno>:
 8003210:	4b01      	ldr	r3, [pc, #4]	; (8003218 <__errno+0x8>)
 8003212:	6818      	ldr	r0, [r3, #0]
 8003214:	4770      	bx	lr
 8003216:	bf00      	nop
 8003218:	200000bc 	.word	0x200000bc

0800321c <__libc_init_array>:
 800321c:	b570      	push	{r4, r5, r6, lr}
 800321e:	4d0d      	ldr	r5, [pc, #52]	; (8003254 <__libc_init_array+0x38>)
 8003220:	4c0d      	ldr	r4, [pc, #52]	; (8003258 <__libc_init_array+0x3c>)
 8003222:	1b64      	subs	r4, r4, r5
 8003224:	10a4      	asrs	r4, r4, #2
 8003226:	2600      	movs	r6, #0
 8003228:	42a6      	cmp	r6, r4
 800322a:	d109      	bne.n	8003240 <__libc_init_array+0x24>
 800322c:	4d0b      	ldr	r5, [pc, #44]	; (800325c <__libc_init_array+0x40>)
 800322e:	4c0c      	ldr	r4, [pc, #48]	; (8003260 <__libc_init_array+0x44>)
 8003230:	f000 fc6a 	bl	8003b08 <_init>
 8003234:	1b64      	subs	r4, r4, r5
 8003236:	10a4      	asrs	r4, r4, #2
 8003238:	2600      	movs	r6, #0
 800323a:	42a6      	cmp	r6, r4
 800323c:	d105      	bne.n	800324a <__libc_init_array+0x2e>
 800323e:	bd70      	pop	{r4, r5, r6, pc}
 8003240:	f855 3b04 	ldr.w	r3, [r5], #4
 8003244:	4798      	blx	r3
 8003246:	3601      	adds	r6, #1
 8003248:	e7ee      	b.n	8003228 <__libc_init_array+0xc>
 800324a:	f855 3b04 	ldr.w	r3, [r5], #4
 800324e:	4798      	blx	r3
 8003250:	3601      	adds	r6, #1
 8003252:	e7f2      	b.n	800323a <__libc_init_array+0x1e>
 8003254:	08003be8 	.word	0x08003be8
 8003258:	08003be8 	.word	0x08003be8
 800325c:	08003be8 	.word	0x08003be8
 8003260:	08003bec 	.word	0x08003bec

08003264 <__retarget_lock_acquire_recursive>:
 8003264:	4770      	bx	lr

08003266 <__retarget_lock_release_recursive>:
 8003266:	4770      	bx	lr

08003268 <__ssputs_r>:
 8003268:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800326c:	688e      	ldr	r6, [r1, #8]
 800326e:	461f      	mov	r7, r3
 8003270:	42be      	cmp	r6, r7
 8003272:	680b      	ldr	r3, [r1, #0]
 8003274:	4682      	mov	sl, r0
 8003276:	460c      	mov	r4, r1
 8003278:	4690      	mov	r8, r2
 800327a:	d82c      	bhi.n	80032d6 <__ssputs_r+0x6e>
 800327c:	898a      	ldrh	r2, [r1, #12]
 800327e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003282:	d026      	beq.n	80032d2 <__ssputs_r+0x6a>
 8003284:	6965      	ldr	r5, [r4, #20]
 8003286:	6909      	ldr	r1, [r1, #16]
 8003288:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800328c:	eba3 0901 	sub.w	r9, r3, r1
 8003290:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003294:	1c7b      	adds	r3, r7, #1
 8003296:	444b      	add	r3, r9
 8003298:	106d      	asrs	r5, r5, #1
 800329a:	429d      	cmp	r5, r3
 800329c:	bf38      	it	cc
 800329e:	461d      	movcc	r5, r3
 80032a0:	0553      	lsls	r3, r2, #21
 80032a2:	d527      	bpl.n	80032f4 <__ssputs_r+0x8c>
 80032a4:	4629      	mov	r1, r5
 80032a6:	f000 f957 	bl	8003558 <_malloc_r>
 80032aa:	4606      	mov	r6, r0
 80032ac:	b360      	cbz	r0, 8003308 <__ssputs_r+0xa0>
 80032ae:	6921      	ldr	r1, [r4, #16]
 80032b0:	464a      	mov	r2, r9
 80032b2:	f000 fbc7 	bl	8003a44 <memcpy>
 80032b6:	89a3      	ldrh	r3, [r4, #12]
 80032b8:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80032bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80032c0:	81a3      	strh	r3, [r4, #12]
 80032c2:	6126      	str	r6, [r4, #16]
 80032c4:	6165      	str	r5, [r4, #20]
 80032c6:	444e      	add	r6, r9
 80032c8:	eba5 0509 	sub.w	r5, r5, r9
 80032cc:	6026      	str	r6, [r4, #0]
 80032ce:	60a5      	str	r5, [r4, #8]
 80032d0:	463e      	mov	r6, r7
 80032d2:	42be      	cmp	r6, r7
 80032d4:	d900      	bls.n	80032d8 <__ssputs_r+0x70>
 80032d6:	463e      	mov	r6, r7
 80032d8:	6820      	ldr	r0, [r4, #0]
 80032da:	4632      	mov	r2, r6
 80032dc:	4641      	mov	r1, r8
 80032de:	f000 fb86 	bl	80039ee <memmove>
 80032e2:	68a3      	ldr	r3, [r4, #8]
 80032e4:	1b9b      	subs	r3, r3, r6
 80032e6:	60a3      	str	r3, [r4, #8]
 80032e8:	6823      	ldr	r3, [r4, #0]
 80032ea:	4433      	add	r3, r6
 80032ec:	6023      	str	r3, [r4, #0]
 80032ee:	2000      	movs	r0, #0
 80032f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80032f4:	462a      	mov	r2, r5
 80032f6:	f000 fb4b 	bl	8003990 <_realloc_r>
 80032fa:	4606      	mov	r6, r0
 80032fc:	2800      	cmp	r0, #0
 80032fe:	d1e0      	bne.n	80032c2 <__ssputs_r+0x5a>
 8003300:	6921      	ldr	r1, [r4, #16]
 8003302:	4650      	mov	r0, sl
 8003304:	f000 fbac 	bl	8003a60 <_free_r>
 8003308:	230c      	movs	r3, #12
 800330a:	f8ca 3000 	str.w	r3, [sl]
 800330e:	89a3      	ldrh	r3, [r4, #12]
 8003310:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003314:	81a3      	strh	r3, [r4, #12]
 8003316:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800331a:	e7e9      	b.n	80032f0 <__ssputs_r+0x88>

0800331c <_svfiprintf_r>:
 800331c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003320:	4698      	mov	r8, r3
 8003322:	898b      	ldrh	r3, [r1, #12]
 8003324:	061b      	lsls	r3, r3, #24
 8003326:	b09d      	sub	sp, #116	; 0x74
 8003328:	4607      	mov	r7, r0
 800332a:	460d      	mov	r5, r1
 800332c:	4614      	mov	r4, r2
 800332e:	d50e      	bpl.n	800334e <_svfiprintf_r+0x32>
 8003330:	690b      	ldr	r3, [r1, #16]
 8003332:	b963      	cbnz	r3, 800334e <_svfiprintf_r+0x32>
 8003334:	2140      	movs	r1, #64	; 0x40
 8003336:	f000 f90f 	bl	8003558 <_malloc_r>
 800333a:	6028      	str	r0, [r5, #0]
 800333c:	6128      	str	r0, [r5, #16]
 800333e:	b920      	cbnz	r0, 800334a <_svfiprintf_r+0x2e>
 8003340:	230c      	movs	r3, #12
 8003342:	603b      	str	r3, [r7, #0]
 8003344:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003348:	e0d0      	b.n	80034ec <_svfiprintf_r+0x1d0>
 800334a:	2340      	movs	r3, #64	; 0x40
 800334c:	616b      	str	r3, [r5, #20]
 800334e:	2300      	movs	r3, #0
 8003350:	9309      	str	r3, [sp, #36]	; 0x24
 8003352:	2320      	movs	r3, #32
 8003354:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003358:	f8cd 800c 	str.w	r8, [sp, #12]
 800335c:	2330      	movs	r3, #48	; 0x30
 800335e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8003504 <_svfiprintf_r+0x1e8>
 8003362:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003366:	f04f 0901 	mov.w	r9, #1
 800336a:	4623      	mov	r3, r4
 800336c:	469a      	mov	sl, r3
 800336e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003372:	b10a      	cbz	r2, 8003378 <_svfiprintf_r+0x5c>
 8003374:	2a25      	cmp	r2, #37	; 0x25
 8003376:	d1f9      	bne.n	800336c <_svfiprintf_r+0x50>
 8003378:	ebba 0b04 	subs.w	fp, sl, r4
 800337c:	d00b      	beq.n	8003396 <_svfiprintf_r+0x7a>
 800337e:	465b      	mov	r3, fp
 8003380:	4622      	mov	r2, r4
 8003382:	4629      	mov	r1, r5
 8003384:	4638      	mov	r0, r7
 8003386:	f7ff ff6f 	bl	8003268 <__ssputs_r>
 800338a:	3001      	adds	r0, #1
 800338c:	f000 80a9 	beq.w	80034e2 <_svfiprintf_r+0x1c6>
 8003390:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003392:	445a      	add	r2, fp
 8003394:	9209      	str	r2, [sp, #36]	; 0x24
 8003396:	f89a 3000 	ldrb.w	r3, [sl]
 800339a:	2b00      	cmp	r3, #0
 800339c:	f000 80a1 	beq.w	80034e2 <_svfiprintf_r+0x1c6>
 80033a0:	2300      	movs	r3, #0
 80033a2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80033a6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80033aa:	f10a 0a01 	add.w	sl, sl, #1
 80033ae:	9304      	str	r3, [sp, #16]
 80033b0:	9307      	str	r3, [sp, #28]
 80033b2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80033b6:	931a      	str	r3, [sp, #104]	; 0x68
 80033b8:	4654      	mov	r4, sl
 80033ba:	2205      	movs	r2, #5
 80033bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80033c0:	4850      	ldr	r0, [pc, #320]	; (8003504 <_svfiprintf_r+0x1e8>)
 80033c2:	f7fc ff15 	bl	80001f0 <memchr>
 80033c6:	9a04      	ldr	r2, [sp, #16]
 80033c8:	b9d8      	cbnz	r0, 8003402 <_svfiprintf_r+0xe6>
 80033ca:	06d0      	lsls	r0, r2, #27
 80033cc:	bf44      	itt	mi
 80033ce:	2320      	movmi	r3, #32
 80033d0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80033d4:	0711      	lsls	r1, r2, #28
 80033d6:	bf44      	itt	mi
 80033d8:	232b      	movmi	r3, #43	; 0x2b
 80033da:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80033de:	f89a 3000 	ldrb.w	r3, [sl]
 80033e2:	2b2a      	cmp	r3, #42	; 0x2a
 80033e4:	d015      	beq.n	8003412 <_svfiprintf_r+0xf6>
 80033e6:	9a07      	ldr	r2, [sp, #28]
 80033e8:	4654      	mov	r4, sl
 80033ea:	2000      	movs	r0, #0
 80033ec:	f04f 0c0a 	mov.w	ip, #10
 80033f0:	4621      	mov	r1, r4
 80033f2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80033f6:	3b30      	subs	r3, #48	; 0x30
 80033f8:	2b09      	cmp	r3, #9
 80033fa:	d94d      	bls.n	8003498 <_svfiprintf_r+0x17c>
 80033fc:	b1b0      	cbz	r0, 800342c <_svfiprintf_r+0x110>
 80033fe:	9207      	str	r2, [sp, #28]
 8003400:	e014      	b.n	800342c <_svfiprintf_r+0x110>
 8003402:	eba0 0308 	sub.w	r3, r0, r8
 8003406:	fa09 f303 	lsl.w	r3, r9, r3
 800340a:	4313      	orrs	r3, r2
 800340c:	9304      	str	r3, [sp, #16]
 800340e:	46a2      	mov	sl, r4
 8003410:	e7d2      	b.n	80033b8 <_svfiprintf_r+0x9c>
 8003412:	9b03      	ldr	r3, [sp, #12]
 8003414:	1d19      	adds	r1, r3, #4
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	9103      	str	r1, [sp, #12]
 800341a:	2b00      	cmp	r3, #0
 800341c:	bfbb      	ittet	lt
 800341e:	425b      	neglt	r3, r3
 8003420:	f042 0202 	orrlt.w	r2, r2, #2
 8003424:	9307      	strge	r3, [sp, #28]
 8003426:	9307      	strlt	r3, [sp, #28]
 8003428:	bfb8      	it	lt
 800342a:	9204      	strlt	r2, [sp, #16]
 800342c:	7823      	ldrb	r3, [r4, #0]
 800342e:	2b2e      	cmp	r3, #46	; 0x2e
 8003430:	d10c      	bne.n	800344c <_svfiprintf_r+0x130>
 8003432:	7863      	ldrb	r3, [r4, #1]
 8003434:	2b2a      	cmp	r3, #42	; 0x2a
 8003436:	d134      	bne.n	80034a2 <_svfiprintf_r+0x186>
 8003438:	9b03      	ldr	r3, [sp, #12]
 800343a:	1d1a      	adds	r2, r3, #4
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	9203      	str	r2, [sp, #12]
 8003440:	2b00      	cmp	r3, #0
 8003442:	bfb8      	it	lt
 8003444:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8003448:	3402      	adds	r4, #2
 800344a:	9305      	str	r3, [sp, #20]
 800344c:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8003514 <_svfiprintf_r+0x1f8>
 8003450:	7821      	ldrb	r1, [r4, #0]
 8003452:	2203      	movs	r2, #3
 8003454:	4650      	mov	r0, sl
 8003456:	f7fc fecb 	bl	80001f0 <memchr>
 800345a:	b138      	cbz	r0, 800346c <_svfiprintf_r+0x150>
 800345c:	9b04      	ldr	r3, [sp, #16]
 800345e:	eba0 000a 	sub.w	r0, r0, sl
 8003462:	2240      	movs	r2, #64	; 0x40
 8003464:	4082      	lsls	r2, r0
 8003466:	4313      	orrs	r3, r2
 8003468:	3401      	adds	r4, #1
 800346a:	9304      	str	r3, [sp, #16]
 800346c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003470:	4825      	ldr	r0, [pc, #148]	; (8003508 <_svfiprintf_r+0x1ec>)
 8003472:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003476:	2206      	movs	r2, #6
 8003478:	f7fc feba 	bl	80001f0 <memchr>
 800347c:	2800      	cmp	r0, #0
 800347e:	d038      	beq.n	80034f2 <_svfiprintf_r+0x1d6>
 8003480:	4b22      	ldr	r3, [pc, #136]	; (800350c <_svfiprintf_r+0x1f0>)
 8003482:	bb1b      	cbnz	r3, 80034cc <_svfiprintf_r+0x1b0>
 8003484:	9b03      	ldr	r3, [sp, #12]
 8003486:	3307      	adds	r3, #7
 8003488:	f023 0307 	bic.w	r3, r3, #7
 800348c:	3308      	adds	r3, #8
 800348e:	9303      	str	r3, [sp, #12]
 8003490:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003492:	4433      	add	r3, r6
 8003494:	9309      	str	r3, [sp, #36]	; 0x24
 8003496:	e768      	b.n	800336a <_svfiprintf_r+0x4e>
 8003498:	fb0c 3202 	mla	r2, ip, r2, r3
 800349c:	460c      	mov	r4, r1
 800349e:	2001      	movs	r0, #1
 80034a0:	e7a6      	b.n	80033f0 <_svfiprintf_r+0xd4>
 80034a2:	2300      	movs	r3, #0
 80034a4:	3401      	adds	r4, #1
 80034a6:	9305      	str	r3, [sp, #20]
 80034a8:	4619      	mov	r1, r3
 80034aa:	f04f 0c0a 	mov.w	ip, #10
 80034ae:	4620      	mov	r0, r4
 80034b0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80034b4:	3a30      	subs	r2, #48	; 0x30
 80034b6:	2a09      	cmp	r2, #9
 80034b8:	d903      	bls.n	80034c2 <_svfiprintf_r+0x1a6>
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d0c6      	beq.n	800344c <_svfiprintf_r+0x130>
 80034be:	9105      	str	r1, [sp, #20]
 80034c0:	e7c4      	b.n	800344c <_svfiprintf_r+0x130>
 80034c2:	fb0c 2101 	mla	r1, ip, r1, r2
 80034c6:	4604      	mov	r4, r0
 80034c8:	2301      	movs	r3, #1
 80034ca:	e7f0      	b.n	80034ae <_svfiprintf_r+0x192>
 80034cc:	ab03      	add	r3, sp, #12
 80034ce:	9300      	str	r3, [sp, #0]
 80034d0:	462a      	mov	r2, r5
 80034d2:	4b0f      	ldr	r3, [pc, #60]	; (8003510 <_svfiprintf_r+0x1f4>)
 80034d4:	a904      	add	r1, sp, #16
 80034d6:	4638      	mov	r0, r7
 80034d8:	f3af 8000 	nop.w
 80034dc:	1c42      	adds	r2, r0, #1
 80034de:	4606      	mov	r6, r0
 80034e0:	d1d6      	bne.n	8003490 <_svfiprintf_r+0x174>
 80034e2:	89ab      	ldrh	r3, [r5, #12]
 80034e4:	065b      	lsls	r3, r3, #25
 80034e6:	f53f af2d 	bmi.w	8003344 <_svfiprintf_r+0x28>
 80034ea:	9809      	ldr	r0, [sp, #36]	; 0x24
 80034ec:	b01d      	add	sp, #116	; 0x74
 80034ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80034f2:	ab03      	add	r3, sp, #12
 80034f4:	9300      	str	r3, [sp, #0]
 80034f6:	462a      	mov	r2, r5
 80034f8:	4b05      	ldr	r3, [pc, #20]	; (8003510 <_svfiprintf_r+0x1f4>)
 80034fa:	a904      	add	r1, sp, #16
 80034fc:	4638      	mov	r0, r7
 80034fe:	f000 f919 	bl	8003734 <_printf_i>
 8003502:	e7eb      	b.n	80034dc <_svfiprintf_r+0x1c0>
 8003504:	08003bac 	.word	0x08003bac
 8003508:	08003bb6 	.word	0x08003bb6
 800350c:	00000000 	.word	0x00000000
 8003510:	08003269 	.word	0x08003269
 8003514:	08003bb2 	.word	0x08003bb2

08003518 <sbrk_aligned>:
 8003518:	b570      	push	{r4, r5, r6, lr}
 800351a:	4e0e      	ldr	r6, [pc, #56]	; (8003554 <sbrk_aligned+0x3c>)
 800351c:	460c      	mov	r4, r1
 800351e:	6831      	ldr	r1, [r6, #0]
 8003520:	4605      	mov	r5, r0
 8003522:	b911      	cbnz	r1, 800352a <sbrk_aligned+0x12>
 8003524:	f000 fa7e 	bl	8003a24 <_sbrk_r>
 8003528:	6030      	str	r0, [r6, #0]
 800352a:	4621      	mov	r1, r4
 800352c:	4628      	mov	r0, r5
 800352e:	f000 fa79 	bl	8003a24 <_sbrk_r>
 8003532:	1c43      	adds	r3, r0, #1
 8003534:	d00a      	beq.n	800354c <sbrk_aligned+0x34>
 8003536:	1cc4      	adds	r4, r0, #3
 8003538:	f024 0403 	bic.w	r4, r4, #3
 800353c:	42a0      	cmp	r0, r4
 800353e:	d007      	beq.n	8003550 <sbrk_aligned+0x38>
 8003540:	1a21      	subs	r1, r4, r0
 8003542:	4628      	mov	r0, r5
 8003544:	f000 fa6e 	bl	8003a24 <_sbrk_r>
 8003548:	3001      	adds	r0, #1
 800354a:	d101      	bne.n	8003550 <sbrk_aligned+0x38>
 800354c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8003550:	4620      	mov	r0, r4
 8003552:	bd70      	pop	{r4, r5, r6, pc}
 8003554:	20000310 	.word	0x20000310

08003558 <_malloc_r>:
 8003558:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800355c:	1ccd      	adds	r5, r1, #3
 800355e:	f025 0503 	bic.w	r5, r5, #3
 8003562:	3508      	adds	r5, #8
 8003564:	2d0c      	cmp	r5, #12
 8003566:	bf38      	it	cc
 8003568:	250c      	movcc	r5, #12
 800356a:	2d00      	cmp	r5, #0
 800356c:	4607      	mov	r7, r0
 800356e:	db01      	blt.n	8003574 <_malloc_r+0x1c>
 8003570:	42a9      	cmp	r1, r5
 8003572:	d905      	bls.n	8003580 <_malloc_r+0x28>
 8003574:	230c      	movs	r3, #12
 8003576:	603b      	str	r3, [r7, #0]
 8003578:	2600      	movs	r6, #0
 800357a:	4630      	mov	r0, r6
 800357c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003580:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8003654 <_malloc_r+0xfc>
 8003584:	f000 f9f8 	bl	8003978 <__malloc_lock>
 8003588:	f8d8 3000 	ldr.w	r3, [r8]
 800358c:	461c      	mov	r4, r3
 800358e:	bb5c      	cbnz	r4, 80035e8 <_malloc_r+0x90>
 8003590:	4629      	mov	r1, r5
 8003592:	4638      	mov	r0, r7
 8003594:	f7ff ffc0 	bl	8003518 <sbrk_aligned>
 8003598:	1c43      	adds	r3, r0, #1
 800359a:	4604      	mov	r4, r0
 800359c:	d155      	bne.n	800364a <_malloc_r+0xf2>
 800359e:	f8d8 4000 	ldr.w	r4, [r8]
 80035a2:	4626      	mov	r6, r4
 80035a4:	2e00      	cmp	r6, #0
 80035a6:	d145      	bne.n	8003634 <_malloc_r+0xdc>
 80035a8:	2c00      	cmp	r4, #0
 80035aa:	d048      	beq.n	800363e <_malloc_r+0xe6>
 80035ac:	6823      	ldr	r3, [r4, #0]
 80035ae:	4631      	mov	r1, r6
 80035b0:	4638      	mov	r0, r7
 80035b2:	eb04 0903 	add.w	r9, r4, r3
 80035b6:	f000 fa35 	bl	8003a24 <_sbrk_r>
 80035ba:	4581      	cmp	r9, r0
 80035bc:	d13f      	bne.n	800363e <_malloc_r+0xe6>
 80035be:	6821      	ldr	r1, [r4, #0]
 80035c0:	1a6d      	subs	r5, r5, r1
 80035c2:	4629      	mov	r1, r5
 80035c4:	4638      	mov	r0, r7
 80035c6:	f7ff ffa7 	bl	8003518 <sbrk_aligned>
 80035ca:	3001      	adds	r0, #1
 80035cc:	d037      	beq.n	800363e <_malloc_r+0xe6>
 80035ce:	6823      	ldr	r3, [r4, #0]
 80035d0:	442b      	add	r3, r5
 80035d2:	6023      	str	r3, [r4, #0]
 80035d4:	f8d8 3000 	ldr.w	r3, [r8]
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d038      	beq.n	800364e <_malloc_r+0xf6>
 80035dc:	685a      	ldr	r2, [r3, #4]
 80035de:	42a2      	cmp	r2, r4
 80035e0:	d12b      	bne.n	800363a <_malloc_r+0xe2>
 80035e2:	2200      	movs	r2, #0
 80035e4:	605a      	str	r2, [r3, #4]
 80035e6:	e00f      	b.n	8003608 <_malloc_r+0xb0>
 80035e8:	6822      	ldr	r2, [r4, #0]
 80035ea:	1b52      	subs	r2, r2, r5
 80035ec:	d41f      	bmi.n	800362e <_malloc_r+0xd6>
 80035ee:	2a0b      	cmp	r2, #11
 80035f0:	d917      	bls.n	8003622 <_malloc_r+0xca>
 80035f2:	1961      	adds	r1, r4, r5
 80035f4:	42a3      	cmp	r3, r4
 80035f6:	6025      	str	r5, [r4, #0]
 80035f8:	bf18      	it	ne
 80035fa:	6059      	strne	r1, [r3, #4]
 80035fc:	6863      	ldr	r3, [r4, #4]
 80035fe:	bf08      	it	eq
 8003600:	f8c8 1000 	streq.w	r1, [r8]
 8003604:	5162      	str	r2, [r4, r5]
 8003606:	604b      	str	r3, [r1, #4]
 8003608:	4638      	mov	r0, r7
 800360a:	f104 060b 	add.w	r6, r4, #11
 800360e:	f000 f9b9 	bl	8003984 <__malloc_unlock>
 8003612:	f026 0607 	bic.w	r6, r6, #7
 8003616:	1d23      	adds	r3, r4, #4
 8003618:	1af2      	subs	r2, r6, r3
 800361a:	d0ae      	beq.n	800357a <_malloc_r+0x22>
 800361c:	1b9b      	subs	r3, r3, r6
 800361e:	50a3      	str	r3, [r4, r2]
 8003620:	e7ab      	b.n	800357a <_malloc_r+0x22>
 8003622:	42a3      	cmp	r3, r4
 8003624:	6862      	ldr	r2, [r4, #4]
 8003626:	d1dd      	bne.n	80035e4 <_malloc_r+0x8c>
 8003628:	f8c8 2000 	str.w	r2, [r8]
 800362c:	e7ec      	b.n	8003608 <_malloc_r+0xb0>
 800362e:	4623      	mov	r3, r4
 8003630:	6864      	ldr	r4, [r4, #4]
 8003632:	e7ac      	b.n	800358e <_malloc_r+0x36>
 8003634:	4634      	mov	r4, r6
 8003636:	6876      	ldr	r6, [r6, #4]
 8003638:	e7b4      	b.n	80035a4 <_malloc_r+0x4c>
 800363a:	4613      	mov	r3, r2
 800363c:	e7cc      	b.n	80035d8 <_malloc_r+0x80>
 800363e:	230c      	movs	r3, #12
 8003640:	603b      	str	r3, [r7, #0]
 8003642:	4638      	mov	r0, r7
 8003644:	f000 f99e 	bl	8003984 <__malloc_unlock>
 8003648:	e797      	b.n	800357a <_malloc_r+0x22>
 800364a:	6025      	str	r5, [r4, #0]
 800364c:	e7dc      	b.n	8003608 <_malloc_r+0xb0>
 800364e:	605b      	str	r3, [r3, #4]
 8003650:	deff      	udf	#255	; 0xff
 8003652:	bf00      	nop
 8003654:	2000030c 	.word	0x2000030c

08003658 <_printf_common>:
 8003658:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800365c:	4616      	mov	r6, r2
 800365e:	4699      	mov	r9, r3
 8003660:	688a      	ldr	r2, [r1, #8]
 8003662:	690b      	ldr	r3, [r1, #16]
 8003664:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003668:	4293      	cmp	r3, r2
 800366a:	bfb8      	it	lt
 800366c:	4613      	movlt	r3, r2
 800366e:	6033      	str	r3, [r6, #0]
 8003670:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003674:	4607      	mov	r7, r0
 8003676:	460c      	mov	r4, r1
 8003678:	b10a      	cbz	r2, 800367e <_printf_common+0x26>
 800367a:	3301      	adds	r3, #1
 800367c:	6033      	str	r3, [r6, #0]
 800367e:	6823      	ldr	r3, [r4, #0]
 8003680:	0699      	lsls	r1, r3, #26
 8003682:	bf42      	ittt	mi
 8003684:	6833      	ldrmi	r3, [r6, #0]
 8003686:	3302      	addmi	r3, #2
 8003688:	6033      	strmi	r3, [r6, #0]
 800368a:	6825      	ldr	r5, [r4, #0]
 800368c:	f015 0506 	ands.w	r5, r5, #6
 8003690:	d106      	bne.n	80036a0 <_printf_common+0x48>
 8003692:	f104 0a19 	add.w	sl, r4, #25
 8003696:	68e3      	ldr	r3, [r4, #12]
 8003698:	6832      	ldr	r2, [r6, #0]
 800369a:	1a9b      	subs	r3, r3, r2
 800369c:	42ab      	cmp	r3, r5
 800369e:	dc26      	bgt.n	80036ee <_printf_common+0x96>
 80036a0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80036a4:	1e13      	subs	r3, r2, #0
 80036a6:	6822      	ldr	r2, [r4, #0]
 80036a8:	bf18      	it	ne
 80036aa:	2301      	movne	r3, #1
 80036ac:	0692      	lsls	r2, r2, #26
 80036ae:	d42b      	bmi.n	8003708 <_printf_common+0xb0>
 80036b0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80036b4:	4649      	mov	r1, r9
 80036b6:	4638      	mov	r0, r7
 80036b8:	47c0      	blx	r8
 80036ba:	3001      	adds	r0, #1
 80036bc:	d01e      	beq.n	80036fc <_printf_common+0xa4>
 80036be:	6823      	ldr	r3, [r4, #0]
 80036c0:	6922      	ldr	r2, [r4, #16]
 80036c2:	f003 0306 	and.w	r3, r3, #6
 80036c6:	2b04      	cmp	r3, #4
 80036c8:	bf02      	ittt	eq
 80036ca:	68e5      	ldreq	r5, [r4, #12]
 80036cc:	6833      	ldreq	r3, [r6, #0]
 80036ce:	1aed      	subeq	r5, r5, r3
 80036d0:	68a3      	ldr	r3, [r4, #8]
 80036d2:	bf0c      	ite	eq
 80036d4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80036d8:	2500      	movne	r5, #0
 80036da:	4293      	cmp	r3, r2
 80036dc:	bfc4      	itt	gt
 80036de:	1a9b      	subgt	r3, r3, r2
 80036e0:	18ed      	addgt	r5, r5, r3
 80036e2:	2600      	movs	r6, #0
 80036e4:	341a      	adds	r4, #26
 80036e6:	42b5      	cmp	r5, r6
 80036e8:	d11a      	bne.n	8003720 <_printf_common+0xc8>
 80036ea:	2000      	movs	r0, #0
 80036ec:	e008      	b.n	8003700 <_printf_common+0xa8>
 80036ee:	2301      	movs	r3, #1
 80036f0:	4652      	mov	r2, sl
 80036f2:	4649      	mov	r1, r9
 80036f4:	4638      	mov	r0, r7
 80036f6:	47c0      	blx	r8
 80036f8:	3001      	adds	r0, #1
 80036fa:	d103      	bne.n	8003704 <_printf_common+0xac>
 80036fc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003700:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003704:	3501      	adds	r5, #1
 8003706:	e7c6      	b.n	8003696 <_printf_common+0x3e>
 8003708:	18e1      	adds	r1, r4, r3
 800370a:	1c5a      	adds	r2, r3, #1
 800370c:	2030      	movs	r0, #48	; 0x30
 800370e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003712:	4422      	add	r2, r4
 8003714:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003718:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800371c:	3302      	adds	r3, #2
 800371e:	e7c7      	b.n	80036b0 <_printf_common+0x58>
 8003720:	2301      	movs	r3, #1
 8003722:	4622      	mov	r2, r4
 8003724:	4649      	mov	r1, r9
 8003726:	4638      	mov	r0, r7
 8003728:	47c0      	blx	r8
 800372a:	3001      	adds	r0, #1
 800372c:	d0e6      	beq.n	80036fc <_printf_common+0xa4>
 800372e:	3601      	adds	r6, #1
 8003730:	e7d9      	b.n	80036e6 <_printf_common+0x8e>
	...

08003734 <_printf_i>:
 8003734:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003738:	7e0f      	ldrb	r7, [r1, #24]
 800373a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800373c:	2f78      	cmp	r7, #120	; 0x78
 800373e:	4691      	mov	r9, r2
 8003740:	4680      	mov	r8, r0
 8003742:	460c      	mov	r4, r1
 8003744:	469a      	mov	sl, r3
 8003746:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800374a:	d807      	bhi.n	800375c <_printf_i+0x28>
 800374c:	2f62      	cmp	r7, #98	; 0x62
 800374e:	d80a      	bhi.n	8003766 <_printf_i+0x32>
 8003750:	2f00      	cmp	r7, #0
 8003752:	f000 80d4 	beq.w	80038fe <_printf_i+0x1ca>
 8003756:	2f58      	cmp	r7, #88	; 0x58
 8003758:	f000 80c0 	beq.w	80038dc <_printf_i+0x1a8>
 800375c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003760:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003764:	e03a      	b.n	80037dc <_printf_i+0xa8>
 8003766:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800376a:	2b15      	cmp	r3, #21
 800376c:	d8f6      	bhi.n	800375c <_printf_i+0x28>
 800376e:	a101      	add	r1, pc, #4	; (adr r1, 8003774 <_printf_i+0x40>)
 8003770:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003774:	080037cd 	.word	0x080037cd
 8003778:	080037e1 	.word	0x080037e1
 800377c:	0800375d 	.word	0x0800375d
 8003780:	0800375d 	.word	0x0800375d
 8003784:	0800375d 	.word	0x0800375d
 8003788:	0800375d 	.word	0x0800375d
 800378c:	080037e1 	.word	0x080037e1
 8003790:	0800375d 	.word	0x0800375d
 8003794:	0800375d 	.word	0x0800375d
 8003798:	0800375d 	.word	0x0800375d
 800379c:	0800375d 	.word	0x0800375d
 80037a0:	080038e5 	.word	0x080038e5
 80037a4:	0800380d 	.word	0x0800380d
 80037a8:	0800389f 	.word	0x0800389f
 80037ac:	0800375d 	.word	0x0800375d
 80037b0:	0800375d 	.word	0x0800375d
 80037b4:	08003907 	.word	0x08003907
 80037b8:	0800375d 	.word	0x0800375d
 80037bc:	0800380d 	.word	0x0800380d
 80037c0:	0800375d 	.word	0x0800375d
 80037c4:	0800375d 	.word	0x0800375d
 80037c8:	080038a7 	.word	0x080038a7
 80037cc:	682b      	ldr	r3, [r5, #0]
 80037ce:	1d1a      	adds	r2, r3, #4
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	602a      	str	r2, [r5, #0]
 80037d4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80037d8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80037dc:	2301      	movs	r3, #1
 80037de:	e09f      	b.n	8003920 <_printf_i+0x1ec>
 80037e0:	6820      	ldr	r0, [r4, #0]
 80037e2:	682b      	ldr	r3, [r5, #0]
 80037e4:	0607      	lsls	r7, r0, #24
 80037e6:	f103 0104 	add.w	r1, r3, #4
 80037ea:	6029      	str	r1, [r5, #0]
 80037ec:	d501      	bpl.n	80037f2 <_printf_i+0xbe>
 80037ee:	681e      	ldr	r6, [r3, #0]
 80037f0:	e003      	b.n	80037fa <_printf_i+0xc6>
 80037f2:	0646      	lsls	r6, r0, #25
 80037f4:	d5fb      	bpl.n	80037ee <_printf_i+0xba>
 80037f6:	f9b3 6000 	ldrsh.w	r6, [r3]
 80037fa:	2e00      	cmp	r6, #0
 80037fc:	da03      	bge.n	8003806 <_printf_i+0xd2>
 80037fe:	232d      	movs	r3, #45	; 0x2d
 8003800:	4276      	negs	r6, r6
 8003802:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003806:	485a      	ldr	r0, [pc, #360]	; (8003970 <_printf_i+0x23c>)
 8003808:	230a      	movs	r3, #10
 800380a:	e012      	b.n	8003832 <_printf_i+0xfe>
 800380c:	682b      	ldr	r3, [r5, #0]
 800380e:	6820      	ldr	r0, [r4, #0]
 8003810:	1d19      	adds	r1, r3, #4
 8003812:	6029      	str	r1, [r5, #0]
 8003814:	0605      	lsls	r5, r0, #24
 8003816:	d501      	bpl.n	800381c <_printf_i+0xe8>
 8003818:	681e      	ldr	r6, [r3, #0]
 800381a:	e002      	b.n	8003822 <_printf_i+0xee>
 800381c:	0641      	lsls	r1, r0, #25
 800381e:	d5fb      	bpl.n	8003818 <_printf_i+0xe4>
 8003820:	881e      	ldrh	r6, [r3, #0]
 8003822:	4853      	ldr	r0, [pc, #332]	; (8003970 <_printf_i+0x23c>)
 8003824:	2f6f      	cmp	r7, #111	; 0x6f
 8003826:	bf0c      	ite	eq
 8003828:	2308      	moveq	r3, #8
 800382a:	230a      	movne	r3, #10
 800382c:	2100      	movs	r1, #0
 800382e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003832:	6865      	ldr	r5, [r4, #4]
 8003834:	60a5      	str	r5, [r4, #8]
 8003836:	2d00      	cmp	r5, #0
 8003838:	bfa2      	ittt	ge
 800383a:	6821      	ldrge	r1, [r4, #0]
 800383c:	f021 0104 	bicge.w	r1, r1, #4
 8003840:	6021      	strge	r1, [r4, #0]
 8003842:	b90e      	cbnz	r6, 8003848 <_printf_i+0x114>
 8003844:	2d00      	cmp	r5, #0
 8003846:	d04b      	beq.n	80038e0 <_printf_i+0x1ac>
 8003848:	4615      	mov	r5, r2
 800384a:	fbb6 f1f3 	udiv	r1, r6, r3
 800384e:	fb03 6711 	mls	r7, r3, r1, r6
 8003852:	5dc7      	ldrb	r7, [r0, r7]
 8003854:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003858:	4637      	mov	r7, r6
 800385a:	42bb      	cmp	r3, r7
 800385c:	460e      	mov	r6, r1
 800385e:	d9f4      	bls.n	800384a <_printf_i+0x116>
 8003860:	2b08      	cmp	r3, #8
 8003862:	d10b      	bne.n	800387c <_printf_i+0x148>
 8003864:	6823      	ldr	r3, [r4, #0]
 8003866:	07de      	lsls	r6, r3, #31
 8003868:	d508      	bpl.n	800387c <_printf_i+0x148>
 800386a:	6923      	ldr	r3, [r4, #16]
 800386c:	6861      	ldr	r1, [r4, #4]
 800386e:	4299      	cmp	r1, r3
 8003870:	bfde      	ittt	le
 8003872:	2330      	movle	r3, #48	; 0x30
 8003874:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003878:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800387c:	1b52      	subs	r2, r2, r5
 800387e:	6122      	str	r2, [r4, #16]
 8003880:	f8cd a000 	str.w	sl, [sp]
 8003884:	464b      	mov	r3, r9
 8003886:	aa03      	add	r2, sp, #12
 8003888:	4621      	mov	r1, r4
 800388a:	4640      	mov	r0, r8
 800388c:	f7ff fee4 	bl	8003658 <_printf_common>
 8003890:	3001      	adds	r0, #1
 8003892:	d14a      	bne.n	800392a <_printf_i+0x1f6>
 8003894:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003898:	b004      	add	sp, #16
 800389a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800389e:	6823      	ldr	r3, [r4, #0]
 80038a0:	f043 0320 	orr.w	r3, r3, #32
 80038a4:	6023      	str	r3, [r4, #0]
 80038a6:	4833      	ldr	r0, [pc, #204]	; (8003974 <_printf_i+0x240>)
 80038a8:	2778      	movs	r7, #120	; 0x78
 80038aa:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80038ae:	6823      	ldr	r3, [r4, #0]
 80038b0:	6829      	ldr	r1, [r5, #0]
 80038b2:	061f      	lsls	r7, r3, #24
 80038b4:	f851 6b04 	ldr.w	r6, [r1], #4
 80038b8:	d402      	bmi.n	80038c0 <_printf_i+0x18c>
 80038ba:	065f      	lsls	r7, r3, #25
 80038bc:	bf48      	it	mi
 80038be:	b2b6      	uxthmi	r6, r6
 80038c0:	07df      	lsls	r7, r3, #31
 80038c2:	bf48      	it	mi
 80038c4:	f043 0320 	orrmi.w	r3, r3, #32
 80038c8:	6029      	str	r1, [r5, #0]
 80038ca:	bf48      	it	mi
 80038cc:	6023      	strmi	r3, [r4, #0]
 80038ce:	b91e      	cbnz	r6, 80038d8 <_printf_i+0x1a4>
 80038d0:	6823      	ldr	r3, [r4, #0]
 80038d2:	f023 0320 	bic.w	r3, r3, #32
 80038d6:	6023      	str	r3, [r4, #0]
 80038d8:	2310      	movs	r3, #16
 80038da:	e7a7      	b.n	800382c <_printf_i+0xf8>
 80038dc:	4824      	ldr	r0, [pc, #144]	; (8003970 <_printf_i+0x23c>)
 80038de:	e7e4      	b.n	80038aa <_printf_i+0x176>
 80038e0:	4615      	mov	r5, r2
 80038e2:	e7bd      	b.n	8003860 <_printf_i+0x12c>
 80038e4:	682b      	ldr	r3, [r5, #0]
 80038e6:	6826      	ldr	r6, [r4, #0]
 80038e8:	6961      	ldr	r1, [r4, #20]
 80038ea:	1d18      	adds	r0, r3, #4
 80038ec:	6028      	str	r0, [r5, #0]
 80038ee:	0635      	lsls	r5, r6, #24
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	d501      	bpl.n	80038f8 <_printf_i+0x1c4>
 80038f4:	6019      	str	r1, [r3, #0]
 80038f6:	e002      	b.n	80038fe <_printf_i+0x1ca>
 80038f8:	0670      	lsls	r0, r6, #25
 80038fa:	d5fb      	bpl.n	80038f4 <_printf_i+0x1c0>
 80038fc:	8019      	strh	r1, [r3, #0]
 80038fe:	2300      	movs	r3, #0
 8003900:	6123      	str	r3, [r4, #16]
 8003902:	4615      	mov	r5, r2
 8003904:	e7bc      	b.n	8003880 <_printf_i+0x14c>
 8003906:	682b      	ldr	r3, [r5, #0]
 8003908:	1d1a      	adds	r2, r3, #4
 800390a:	602a      	str	r2, [r5, #0]
 800390c:	681d      	ldr	r5, [r3, #0]
 800390e:	6862      	ldr	r2, [r4, #4]
 8003910:	2100      	movs	r1, #0
 8003912:	4628      	mov	r0, r5
 8003914:	f7fc fc6c 	bl	80001f0 <memchr>
 8003918:	b108      	cbz	r0, 800391e <_printf_i+0x1ea>
 800391a:	1b40      	subs	r0, r0, r5
 800391c:	6060      	str	r0, [r4, #4]
 800391e:	6863      	ldr	r3, [r4, #4]
 8003920:	6123      	str	r3, [r4, #16]
 8003922:	2300      	movs	r3, #0
 8003924:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003928:	e7aa      	b.n	8003880 <_printf_i+0x14c>
 800392a:	6923      	ldr	r3, [r4, #16]
 800392c:	462a      	mov	r2, r5
 800392e:	4649      	mov	r1, r9
 8003930:	4640      	mov	r0, r8
 8003932:	47d0      	blx	sl
 8003934:	3001      	adds	r0, #1
 8003936:	d0ad      	beq.n	8003894 <_printf_i+0x160>
 8003938:	6823      	ldr	r3, [r4, #0]
 800393a:	079b      	lsls	r3, r3, #30
 800393c:	d413      	bmi.n	8003966 <_printf_i+0x232>
 800393e:	68e0      	ldr	r0, [r4, #12]
 8003940:	9b03      	ldr	r3, [sp, #12]
 8003942:	4298      	cmp	r0, r3
 8003944:	bfb8      	it	lt
 8003946:	4618      	movlt	r0, r3
 8003948:	e7a6      	b.n	8003898 <_printf_i+0x164>
 800394a:	2301      	movs	r3, #1
 800394c:	4632      	mov	r2, r6
 800394e:	4649      	mov	r1, r9
 8003950:	4640      	mov	r0, r8
 8003952:	47d0      	blx	sl
 8003954:	3001      	adds	r0, #1
 8003956:	d09d      	beq.n	8003894 <_printf_i+0x160>
 8003958:	3501      	adds	r5, #1
 800395a:	68e3      	ldr	r3, [r4, #12]
 800395c:	9903      	ldr	r1, [sp, #12]
 800395e:	1a5b      	subs	r3, r3, r1
 8003960:	42ab      	cmp	r3, r5
 8003962:	dcf2      	bgt.n	800394a <_printf_i+0x216>
 8003964:	e7eb      	b.n	800393e <_printf_i+0x20a>
 8003966:	2500      	movs	r5, #0
 8003968:	f104 0619 	add.w	r6, r4, #25
 800396c:	e7f5      	b.n	800395a <_printf_i+0x226>
 800396e:	bf00      	nop
 8003970:	08003bbd 	.word	0x08003bbd
 8003974:	08003bce 	.word	0x08003bce

08003978 <__malloc_lock>:
 8003978:	4801      	ldr	r0, [pc, #4]	; (8003980 <__malloc_lock+0x8>)
 800397a:	f7ff bc73 	b.w	8003264 <__retarget_lock_acquire_recursive>
 800397e:	bf00      	nop
 8003980:	20000308 	.word	0x20000308

08003984 <__malloc_unlock>:
 8003984:	4801      	ldr	r0, [pc, #4]	; (800398c <__malloc_unlock+0x8>)
 8003986:	f7ff bc6e 	b.w	8003266 <__retarget_lock_release_recursive>
 800398a:	bf00      	nop
 800398c:	20000308 	.word	0x20000308

08003990 <_realloc_r>:
 8003990:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003994:	4680      	mov	r8, r0
 8003996:	4614      	mov	r4, r2
 8003998:	460e      	mov	r6, r1
 800399a:	b921      	cbnz	r1, 80039a6 <_realloc_r+0x16>
 800399c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80039a0:	4611      	mov	r1, r2
 80039a2:	f7ff bdd9 	b.w	8003558 <_malloc_r>
 80039a6:	b92a      	cbnz	r2, 80039b4 <_realloc_r+0x24>
 80039a8:	f000 f85a 	bl	8003a60 <_free_r>
 80039ac:	4625      	mov	r5, r4
 80039ae:	4628      	mov	r0, r5
 80039b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80039b4:	f000 f8a0 	bl	8003af8 <_malloc_usable_size_r>
 80039b8:	4284      	cmp	r4, r0
 80039ba:	4607      	mov	r7, r0
 80039bc:	d802      	bhi.n	80039c4 <_realloc_r+0x34>
 80039be:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80039c2:	d812      	bhi.n	80039ea <_realloc_r+0x5a>
 80039c4:	4621      	mov	r1, r4
 80039c6:	4640      	mov	r0, r8
 80039c8:	f7ff fdc6 	bl	8003558 <_malloc_r>
 80039cc:	4605      	mov	r5, r0
 80039ce:	2800      	cmp	r0, #0
 80039d0:	d0ed      	beq.n	80039ae <_realloc_r+0x1e>
 80039d2:	42bc      	cmp	r4, r7
 80039d4:	4622      	mov	r2, r4
 80039d6:	4631      	mov	r1, r6
 80039d8:	bf28      	it	cs
 80039da:	463a      	movcs	r2, r7
 80039dc:	f000 f832 	bl	8003a44 <memcpy>
 80039e0:	4631      	mov	r1, r6
 80039e2:	4640      	mov	r0, r8
 80039e4:	f000 f83c 	bl	8003a60 <_free_r>
 80039e8:	e7e1      	b.n	80039ae <_realloc_r+0x1e>
 80039ea:	4635      	mov	r5, r6
 80039ec:	e7df      	b.n	80039ae <_realloc_r+0x1e>

080039ee <memmove>:
 80039ee:	4288      	cmp	r0, r1
 80039f0:	b510      	push	{r4, lr}
 80039f2:	eb01 0402 	add.w	r4, r1, r2
 80039f6:	d902      	bls.n	80039fe <memmove+0x10>
 80039f8:	4284      	cmp	r4, r0
 80039fa:	4623      	mov	r3, r4
 80039fc:	d807      	bhi.n	8003a0e <memmove+0x20>
 80039fe:	1e43      	subs	r3, r0, #1
 8003a00:	42a1      	cmp	r1, r4
 8003a02:	d008      	beq.n	8003a16 <memmove+0x28>
 8003a04:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003a08:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003a0c:	e7f8      	b.n	8003a00 <memmove+0x12>
 8003a0e:	4402      	add	r2, r0
 8003a10:	4601      	mov	r1, r0
 8003a12:	428a      	cmp	r2, r1
 8003a14:	d100      	bne.n	8003a18 <memmove+0x2a>
 8003a16:	bd10      	pop	{r4, pc}
 8003a18:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003a1c:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003a20:	e7f7      	b.n	8003a12 <memmove+0x24>
	...

08003a24 <_sbrk_r>:
 8003a24:	b538      	push	{r3, r4, r5, lr}
 8003a26:	4d06      	ldr	r5, [pc, #24]	; (8003a40 <_sbrk_r+0x1c>)
 8003a28:	2300      	movs	r3, #0
 8003a2a:	4604      	mov	r4, r0
 8003a2c:	4608      	mov	r0, r1
 8003a2e:	602b      	str	r3, [r5, #0]
 8003a30:	f7fd fd4c 	bl	80014cc <_sbrk>
 8003a34:	1c43      	adds	r3, r0, #1
 8003a36:	d102      	bne.n	8003a3e <_sbrk_r+0x1a>
 8003a38:	682b      	ldr	r3, [r5, #0]
 8003a3a:	b103      	cbz	r3, 8003a3e <_sbrk_r+0x1a>
 8003a3c:	6023      	str	r3, [r4, #0]
 8003a3e:	bd38      	pop	{r3, r4, r5, pc}
 8003a40:	20000314 	.word	0x20000314

08003a44 <memcpy>:
 8003a44:	440a      	add	r2, r1
 8003a46:	4291      	cmp	r1, r2
 8003a48:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8003a4c:	d100      	bne.n	8003a50 <memcpy+0xc>
 8003a4e:	4770      	bx	lr
 8003a50:	b510      	push	{r4, lr}
 8003a52:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003a56:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003a5a:	4291      	cmp	r1, r2
 8003a5c:	d1f9      	bne.n	8003a52 <memcpy+0xe>
 8003a5e:	bd10      	pop	{r4, pc}

08003a60 <_free_r>:
 8003a60:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003a62:	2900      	cmp	r1, #0
 8003a64:	d044      	beq.n	8003af0 <_free_r+0x90>
 8003a66:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003a6a:	9001      	str	r0, [sp, #4]
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	f1a1 0404 	sub.w	r4, r1, #4
 8003a72:	bfb8      	it	lt
 8003a74:	18e4      	addlt	r4, r4, r3
 8003a76:	f7ff ff7f 	bl	8003978 <__malloc_lock>
 8003a7a:	4a1e      	ldr	r2, [pc, #120]	; (8003af4 <_free_r+0x94>)
 8003a7c:	9801      	ldr	r0, [sp, #4]
 8003a7e:	6813      	ldr	r3, [r2, #0]
 8003a80:	b933      	cbnz	r3, 8003a90 <_free_r+0x30>
 8003a82:	6063      	str	r3, [r4, #4]
 8003a84:	6014      	str	r4, [r2, #0]
 8003a86:	b003      	add	sp, #12
 8003a88:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003a8c:	f7ff bf7a 	b.w	8003984 <__malloc_unlock>
 8003a90:	42a3      	cmp	r3, r4
 8003a92:	d908      	bls.n	8003aa6 <_free_r+0x46>
 8003a94:	6825      	ldr	r5, [r4, #0]
 8003a96:	1961      	adds	r1, r4, r5
 8003a98:	428b      	cmp	r3, r1
 8003a9a:	bf01      	itttt	eq
 8003a9c:	6819      	ldreq	r1, [r3, #0]
 8003a9e:	685b      	ldreq	r3, [r3, #4]
 8003aa0:	1949      	addeq	r1, r1, r5
 8003aa2:	6021      	streq	r1, [r4, #0]
 8003aa4:	e7ed      	b.n	8003a82 <_free_r+0x22>
 8003aa6:	461a      	mov	r2, r3
 8003aa8:	685b      	ldr	r3, [r3, #4]
 8003aaa:	b10b      	cbz	r3, 8003ab0 <_free_r+0x50>
 8003aac:	42a3      	cmp	r3, r4
 8003aae:	d9fa      	bls.n	8003aa6 <_free_r+0x46>
 8003ab0:	6811      	ldr	r1, [r2, #0]
 8003ab2:	1855      	adds	r5, r2, r1
 8003ab4:	42a5      	cmp	r5, r4
 8003ab6:	d10b      	bne.n	8003ad0 <_free_r+0x70>
 8003ab8:	6824      	ldr	r4, [r4, #0]
 8003aba:	4421      	add	r1, r4
 8003abc:	1854      	adds	r4, r2, r1
 8003abe:	42a3      	cmp	r3, r4
 8003ac0:	6011      	str	r1, [r2, #0]
 8003ac2:	d1e0      	bne.n	8003a86 <_free_r+0x26>
 8003ac4:	681c      	ldr	r4, [r3, #0]
 8003ac6:	685b      	ldr	r3, [r3, #4]
 8003ac8:	6053      	str	r3, [r2, #4]
 8003aca:	440c      	add	r4, r1
 8003acc:	6014      	str	r4, [r2, #0]
 8003ace:	e7da      	b.n	8003a86 <_free_r+0x26>
 8003ad0:	d902      	bls.n	8003ad8 <_free_r+0x78>
 8003ad2:	230c      	movs	r3, #12
 8003ad4:	6003      	str	r3, [r0, #0]
 8003ad6:	e7d6      	b.n	8003a86 <_free_r+0x26>
 8003ad8:	6825      	ldr	r5, [r4, #0]
 8003ada:	1961      	adds	r1, r4, r5
 8003adc:	428b      	cmp	r3, r1
 8003ade:	bf04      	itt	eq
 8003ae0:	6819      	ldreq	r1, [r3, #0]
 8003ae2:	685b      	ldreq	r3, [r3, #4]
 8003ae4:	6063      	str	r3, [r4, #4]
 8003ae6:	bf04      	itt	eq
 8003ae8:	1949      	addeq	r1, r1, r5
 8003aea:	6021      	streq	r1, [r4, #0]
 8003aec:	6054      	str	r4, [r2, #4]
 8003aee:	e7ca      	b.n	8003a86 <_free_r+0x26>
 8003af0:	b003      	add	sp, #12
 8003af2:	bd30      	pop	{r4, r5, pc}
 8003af4:	2000030c 	.word	0x2000030c

08003af8 <_malloc_usable_size_r>:
 8003af8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003afc:	1f18      	subs	r0, r3, #4
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	bfbc      	itt	lt
 8003b02:	580b      	ldrlt	r3, [r1, r0]
 8003b04:	18c0      	addlt	r0, r0, r3
 8003b06:	4770      	bx	lr

08003b08 <_init>:
 8003b08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b0a:	bf00      	nop
 8003b0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b0e:	bc08      	pop	{r3}
 8003b10:	469e      	mov	lr, r3
 8003b12:	4770      	bx	lr

08003b14 <_fini>:
 8003b14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b16:	bf00      	nop
 8003b18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b1a:	bc08      	pop	{r3}
 8003b1c:	469e      	mov	lr, r3
 8003b1e:	4770      	bx	lr
