
198.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004ccc  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000100  08004e6c  08004e6c  00014e6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004f6c  08004f6c  0002009c  2**0
                  CONTENTS
  4 .ARM          00000008  08004f6c  08004f6c  00014f6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004f74  08004f74  0002009c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004f74  08004f74  00014f74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004f78  08004f78  00014f78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000009c  20000000  08004f7c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000027c  2000009c  08005018  0002009c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000318  08005018  00020318  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200cc  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000d0ea  00000000  00000000  0002010f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002148  00000000  00000000  0002d1f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000e20  00000000  00000000  0002f348  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000af4  00000000  00000000  00030168  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00017bc8  00000000  00000000  00030c5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00010aa9  00000000  00000000  00048824  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008f6ab  00000000  00000000  000592cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004358  00000000  00000000  000e8978  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  000eccd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000009c 	.word	0x2000009c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08004e54 	.word	0x08004e54

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200000a0 	.word	0x200000a0
 80001dc:	08004e54 	.word	0x08004e54

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002a4:	f000 b970 	b.w	8000588 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9e08      	ldr	r6, [sp, #32]
 80002c6:	460d      	mov	r5, r1
 80002c8:	4604      	mov	r4, r0
 80002ca:	460f      	mov	r7, r1
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d14a      	bne.n	8000366 <__udivmoddi4+0xa6>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4694      	mov	ip, r2
 80002d4:	d965      	bls.n	80003a2 <__udivmoddi4+0xe2>
 80002d6:	fab2 f382 	clz	r3, r2
 80002da:	b143      	cbz	r3, 80002ee <__udivmoddi4+0x2e>
 80002dc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002e0:	f1c3 0220 	rsb	r2, r3, #32
 80002e4:	409f      	lsls	r7, r3
 80002e6:	fa20 f202 	lsr.w	r2, r0, r2
 80002ea:	4317      	orrs	r7, r2
 80002ec:	409c      	lsls	r4, r3
 80002ee:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002f2:	fa1f f58c 	uxth.w	r5, ip
 80002f6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002fa:	0c22      	lsrs	r2, r4, #16
 80002fc:	fb0e 7711 	mls	r7, lr, r1, r7
 8000300:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000304:	fb01 f005 	mul.w	r0, r1, r5
 8000308:	4290      	cmp	r0, r2
 800030a:	d90a      	bls.n	8000322 <__udivmoddi4+0x62>
 800030c:	eb1c 0202 	adds.w	r2, ip, r2
 8000310:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000314:	f080 811c 	bcs.w	8000550 <__udivmoddi4+0x290>
 8000318:	4290      	cmp	r0, r2
 800031a:	f240 8119 	bls.w	8000550 <__udivmoddi4+0x290>
 800031e:	3902      	subs	r1, #2
 8000320:	4462      	add	r2, ip
 8000322:	1a12      	subs	r2, r2, r0
 8000324:	b2a4      	uxth	r4, r4
 8000326:	fbb2 f0fe 	udiv	r0, r2, lr
 800032a:	fb0e 2210 	mls	r2, lr, r0, r2
 800032e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000332:	fb00 f505 	mul.w	r5, r0, r5
 8000336:	42a5      	cmp	r5, r4
 8000338:	d90a      	bls.n	8000350 <__udivmoddi4+0x90>
 800033a:	eb1c 0404 	adds.w	r4, ip, r4
 800033e:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000342:	f080 8107 	bcs.w	8000554 <__udivmoddi4+0x294>
 8000346:	42a5      	cmp	r5, r4
 8000348:	f240 8104 	bls.w	8000554 <__udivmoddi4+0x294>
 800034c:	4464      	add	r4, ip
 800034e:	3802      	subs	r0, #2
 8000350:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000354:	1b64      	subs	r4, r4, r5
 8000356:	2100      	movs	r1, #0
 8000358:	b11e      	cbz	r6, 8000362 <__udivmoddi4+0xa2>
 800035a:	40dc      	lsrs	r4, r3
 800035c:	2300      	movs	r3, #0
 800035e:	e9c6 4300 	strd	r4, r3, [r6]
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0xbc>
 800036a:	2e00      	cmp	r6, #0
 800036c:	f000 80ed 	beq.w	800054a <__udivmoddi4+0x28a>
 8000370:	2100      	movs	r1, #0
 8000372:	e9c6 0500 	strd	r0, r5, [r6]
 8000376:	4608      	mov	r0, r1
 8000378:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037c:	fab3 f183 	clz	r1, r3
 8000380:	2900      	cmp	r1, #0
 8000382:	d149      	bne.n	8000418 <__udivmoddi4+0x158>
 8000384:	42ab      	cmp	r3, r5
 8000386:	d302      	bcc.n	800038e <__udivmoddi4+0xce>
 8000388:	4282      	cmp	r2, r0
 800038a:	f200 80f8 	bhi.w	800057e <__udivmoddi4+0x2be>
 800038e:	1a84      	subs	r4, r0, r2
 8000390:	eb65 0203 	sbc.w	r2, r5, r3
 8000394:	2001      	movs	r0, #1
 8000396:	4617      	mov	r7, r2
 8000398:	2e00      	cmp	r6, #0
 800039a:	d0e2      	beq.n	8000362 <__udivmoddi4+0xa2>
 800039c:	e9c6 4700 	strd	r4, r7, [r6]
 80003a0:	e7df      	b.n	8000362 <__udivmoddi4+0xa2>
 80003a2:	b902      	cbnz	r2, 80003a6 <__udivmoddi4+0xe6>
 80003a4:	deff      	udf	#255	; 0xff
 80003a6:	fab2 f382 	clz	r3, r2
 80003aa:	2b00      	cmp	r3, #0
 80003ac:	f040 8090 	bne.w	80004d0 <__udivmoddi4+0x210>
 80003b0:	1a8a      	subs	r2, r1, r2
 80003b2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003b6:	fa1f fe8c 	uxth.w	lr, ip
 80003ba:	2101      	movs	r1, #1
 80003bc:	fbb2 f5f7 	udiv	r5, r2, r7
 80003c0:	fb07 2015 	mls	r0, r7, r5, r2
 80003c4:	0c22      	lsrs	r2, r4, #16
 80003c6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ca:	fb0e f005 	mul.w	r0, lr, r5
 80003ce:	4290      	cmp	r0, r2
 80003d0:	d908      	bls.n	80003e4 <__udivmoddi4+0x124>
 80003d2:	eb1c 0202 	adds.w	r2, ip, r2
 80003d6:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x122>
 80003dc:	4290      	cmp	r0, r2
 80003de:	f200 80cb 	bhi.w	8000578 <__udivmoddi4+0x2b8>
 80003e2:	4645      	mov	r5, r8
 80003e4:	1a12      	subs	r2, r2, r0
 80003e6:	b2a4      	uxth	r4, r4
 80003e8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003ec:	fb07 2210 	mls	r2, r7, r0, r2
 80003f0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003f4:	fb0e fe00 	mul.w	lr, lr, r0
 80003f8:	45a6      	cmp	lr, r4
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x14e>
 80003fc:	eb1c 0404 	adds.w	r4, ip, r4
 8000400:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000404:	d202      	bcs.n	800040c <__udivmoddi4+0x14c>
 8000406:	45a6      	cmp	lr, r4
 8000408:	f200 80bb 	bhi.w	8000582 <__udivmoddi4+0x2c2>
 800040c:	4610      	mov	r0, r2
 800040e:	eba4 040e 	sub.w	r4, r4, lr
 8000412:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000416:	e79f      	b.n	8000358 <__udivmoddi4+0x98>
 8000418:	f1c1 0720 	rsb	r7, r1, #32
 800041c:	408b      	lsls	r3, r1
 800041e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000422:	ea4c 0c03 	orr.w	ip, ip, r3
 8000426:	fa05 f401 	lsl.w	r4, r5, r1
 800042a:	fa20 f307 	lsr.w	r3, r0, r7
 800042e:	40fd      	lsrs	r5, r7
 8000430:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000434:	4323      	orrs	r3, r4
 8000436:	fbb5 f8f9 	udiv	r8, r5, r9
 800043a:	fa1f fe8c 	uxth.w	lr, ip
 800043e:	fb09 5518 	mls	r5, r9, r8, r5
 8000442:	0c1c      	lsrs	r4, r3, #16
 8000444:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000448:	fb08 f50e 	mul.w	r5, r8, lr
 800044c:	42a5      	cmp	r5, r4
 800044e:	fa02 f201 	lsl.w	r2, r2, r1
 8000452:	fa00 f001 	lsl.w	r0, r0, r1
 8000456:	d90b      	bls.n	8000470 <__udivmoddi4+0x1b0>
 8000458:	eb1c 0404 	adds.w	r4, ip, r4
 800045c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000460:	f080 8088 	bcs.w	8000574 <__udivmoddi4+0x2b4>
 8000464:	42a5      	cmp	r5, r4
 8000466:	f240 8085 	bls.w	8000574 <__udivmoddi4+0x2b4>
 800046a:	f1a8 0802 	sub.w	r8, r8, #2
 800046e:	4464      	add	r4, ip
 8000470:	1b64      	subs	r4, r4, r5
 8000472:	b29d      	uxth	r5, r3
 8000474:	fbb4 f3f9 	udiv	r3, r4, r9
 8000478:	fb09 4413 	mls	r4, r9, r3, r4
 800047c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000480:	fb03 fe0e 	mul.w	lr, r3, lr
 8000484:	45a6      	cmp	lr, r4
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x1da>
 8000488:	eb1c 0404 	adds.w	r4, ip, r4
 800048c:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000490:	d26c      	bcs.n	800056c <__udivmoddi4+0x2ac>
 8000492:	45a6      	cmp	lr, r4
 8000494:	d96a      	bls.n	800056c <__udivmoddi4+0x2ac>
 8000496:	3b02      	subs	r3, #2
 8000498:	4464      	add	r4, ip
 800049a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800049e:	fba3 9502 	umull	r9, r5, r3, r2
 80004a2:	eba4 040e 	sub.w	r4, r4, lr
 80004a6:	42ac      	cmp	r4, r5
 80004a8:	46c8      	mov	r8, r9
 80004aa:	46ae      	mov	lr, r5
 80004ac:	d356      	bcc.n	800055c <__udivmoddi4+0x29c>
 80004ae:	d053      	beq.n	8000558 <__udivmoddi4+0x298>
 80004b0:	b156      	cbz	r6, 80004c8 <__udivmoddi4+0x208>
 80004b2:	ebb0 0208 	subs.w	r2, r0, r8
 80004b6:	eb64 040e 	sbc.w	r4, r4, lr
 80004ba:	fa04 f707 	lsl.w	r7, r4, r7
 80004be:	40ca      	lsrs	r2, r1
 80004c0:	40cc      	lsrs	r4, r1
 80004c2:	4317      	orrs	r7, r2
 80004c4:	e9c6 7400 	strd	r7, r4, [r6]
 80004c8:	4618      	mov	r0, r3
 80004ca:	2100      	movs	r1, #0
 80004cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004d0:	f1c3 0120 	rsb	r1, r3, #32
 80004d4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004d8:	fa20 f201 	lsr.w	r2, r0, r1
 80004dc:	fa25 f101 	lsr.w	r1, r5, r1
 80004e0:	409d      	lsls	r5, r3
 80004e2:	432a      	orrs	r2, r5
 80004e4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e8:	fa1f fe8c 	uxth.w	lr, ip
 80004ec:	fbb1 f0f7 	udiv	r0, r1, r7
 80004f0:	fb07 1510 	mls	r5, r7, r0, r1
 80004f4:	0c11      	lsrs	r1, r2, #16
 80004f6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004fa:	fb00 f50e 	mul.w	r5, r0, lr
 80004fe:	428d      	cmp	r5, r1
 8000500:	fa04 f403 	lsl.w	r4, r4, r3
 8000504:	d908      	bls.n	8000518 <__udivmoddi4+0x258>
 8000506:	eb1c 0101 	adds.w	r1, ip, r1
 800050a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800050e:	d22f      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000510:	428d      	cmp	r5, r1
 8000512:	d92d      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000514:	3802      	subs	r0, #2
 8000516:	4461      	add	r1, ip
 8000518:	1b49      	subs	r1, r1, r5
 800051a:	b292      	uxth	r2, r2
 800051c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000520:	fb07 1115 	mls	r1, r7, r5, r1
 8000524:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000528:	fb05 f10e 	mul.w	r1, r5, lr
 800052c:	4291      	cmp	r1, r2
 800052e:	d908      	bls.n	8000542 <__udivmoddi4+0x282>
 8000530:	eb1c 0202 	adds.w	r2, ip, r2
 8000534:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000538:	d216      	bcs.n	8000568 <__udivmoddi4+0x2a8>
 800053a:	4291      	cmp	r1, r2
 800053c:	d914      	bls.n	8000568 <__udivmoddi4+0x2a8>
 800053e:	3d02      	subs	r5, #2
 8000540:	4462      	add	r2, ip
 8000542:	1a52      	subs	r2, r2, r1
 8000544:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000548:	e738      	b.n	80003bc <__udivmoddi4+0xfc>
 800054a:	4631      	mov	r1, r6
 800054c:	4630      	mov	r0, r6
 800054e:	e708      	b.n	8000362 <__udivmoddi4+0xa2>
 8000550:	4639      	mov	r1, r7
 8000552:	e6e6      	b.n	8000322 <__udivmoddi4+0x62>
 8000554:	4610      	mov	r0, r2
 8000556:	e6fb      	b.n	8000350 <__udivmoddi4+0x90>
 8000558:	4548      	cmp	r0, r9
 800055a:	d2a9      	bcs.n	80004b0 <__udivmoddi4+0x1f0>
 800055c:	ebb9 0802 	subs.w	r8, r9, r2
 8000560:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000564:	3b01      	subs	r3, #1
 8000566:	e7a3      	b.n	80004b0 <__udivmoddi4+0x1f0>
 8000568:	4645      	mov	r5, r8
 800056a:	e7ea      	b.n	8000542 <__udivmoddi4+0x282>
 800056c:	462b      	mov	r3, r5
 800056e:	e794      	b.n	800049a <__udivmoddi4+0x1da>
 8000570:	4640      	mov	r0, r8
 8000572:	e7d1      	b.n	8000518 <__udivmoddi4+0x258>
 8000574:	46d0      	mov	r8, sl
 8000576:	e77b      	b.n	8000470 <__udivmoddi4+0x1b0>
 8000578:	3d02      	subs	r5, #2
 800057a:	4462      	add	r2, ip
 800057c:	e732      	b.n	80003e4 <__udivmoddi4+0x124>
 800057e:	4608      	mov	r0, r1
 8000580:	e70a      	b.n	8000398 <__udivmoddi4+0xd8>
 8000582:	4464      	add	r4, ip
 8000584:	3802      	subs	r0, #2
 8000586:	e742      	b.n	800040e <__udivmoddi4+0x14e>

08000588 <__aeabi_idiv0>:
 8000588:	4770      	bx	lr
 800058a:	bf00      	nop

0800058c <MX_GPIO_Init>:
        * EVENT_OUT
        * EXTI
     PA3   ------> USART2_RX
*/
void MX_GPIO_Init(void)
{
 800058c:	b580      	push	{r7, lr}
 800058e:	b08a      	sub	sp, #40	; 0x28
 8000590:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000592:	f107 0314 	add.w	r3, r7, #20
 8000596:	2200      	movs	r2, #0
 8000598:	601a      	str	r2, [r3, #0]
 800059a:	605a      	str	r2, [r3, #4]
 800059c:	609a      	str	r2, [r3, #8]
 800059e:	60da      	str	r2, [r3, #12]
 80005a0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005a2:	2300      	movs	r3, #0
 80005a4:	613b      	str	r3, [r7, #16]
 80005a6:	4b48      	ldr	r3, [pc, #288]	; (80006c8 <MX_GPIO_Init+0x13c>)
 80005a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005aa:	4a47      	ldr	r2, [pc, #284]	; (80006c8 <MX_GPIO_Init+0x13c>)
 80005ac:	f043 0304 	orr.w	r3, r3, #4
 80005b0:	6313      	str	r3, [r2, #48]	; 0x30
 80005b2:	4b45      	ldr	r3, [pc, #276]	; (80006c8 <MX_GPIO_Init+0x13c>)
 80005b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005b6:	f003 0304 	and.w	r3, r3, #4
 80005ba:	613b      	str	r3, [r7, #16]
 80005bc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80005be:	2300      	movs	r3, #0
 80005c0:	60fb      	str	r3, [r7, #12]
 80005c2:	4b41      	ldr	r3, [pc, #260]	; (80006c8 <MX_GPIO_Init+0x13c>)
 80005c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005c6:	4a40      	ldr	r2, [pc, #256]	; (80006c8 <MX_GPIO_Init+0x13c>)
 80005c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80005cc:	6313      	str	r3, [r2, #48]	; 0x30
 80005ce:	4b3e      	ldr	r3, [pc, #248]	; (80006c8 <MX_GPIO_Init+0x13c>)
 80005d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80005d6:	60fb      	str	r3, [r7, #12]
 80005d8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005da:	2300      	movs	r3, #0
 80005dc:	60bb      	str	r3, [r7, #8]
 80005de:	4b3a      	ldr	r3, [pc, #232]	; (80006c8 <MX_GPIO_Init+0x13c>)
 80005e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005e2:	4a39      	ldr	r2, [pc, #228]	; (80006c8 <MX_GPIO_Init+0x13c>)
 80005e4:	f043 0301 	orr.w	r3, r3, #1
 80005e8:	6313      	str	r3, [r2, #48]	; 0x30
 80005ea:	4b37      	ldr	r3, [pc, #220]	; (80006c8 <MX_GPIO_Init+0x13c>)
 80005ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ee:	f003 0301 	and.w	r3, r3, #1
 80005f2:	60bb      	str	r3, [r7, #8]
 80005f4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005f6:	2300      	movs	r3, #0
 80005f8:	607b      	str	r3, [r7, #4]
 80005fa:	4b33      	ldr	r3, [pc, #204]	; (80006c8 <MX_GPIO_Init+0x13c>)
 80005fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005fe:	4a32      	ldr	r2, [pc, #200]	; (80006c8 <MX_GPIO_Init+0x13c>)
 8000600:	f043 0302 	orr.w	r3, r3, #2
 8000604:	6313      	str	r3, [r2, #48]	; 0x30
 8000606:	4b30      	ldr	r3, [pc, #192]	; (80006c8 <MX_GPIO_Init+0x13c>)
 8000608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800060a:	f003 0302 	and.w	r3, r3, #2
 800060e:	607b      	str	r3, [r7, #4]
 8000610:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5|GPIO_Outpue___lcd_Pin
 8000612:	2200      	movs	r2, #0
 8000614:	21f4      	movs	r1, #244	; 0xf4
 8000616:	482d      	ldr	r0, [pc, #180]	; (80006cc <MX_GPIO_Init+0x140>)
 8000618:	f001 fb48 	bl	8001cac <HAL_GPIO_WritePin>
                          |GPIO_Out___lcd_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIO_Output___lcd_GPIO_Port, GPIO_Output___lcd_Pin, GPIO_PIN_RESET);
 800061c:	2200      	movs	r2, #0
 800061e:	2180      	movs	r1, #128	; 0x80
 8000620:	482b      	ldr	r0, [pc, #172]	; (80006d0 <MX_GPIO_Init+0x144>)
 8000622:	f001 fb43 	bl	8001cac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_Output___lcdB4_Pin|GPIO_Output___lcdB5_Pin|GPIO_Output___lcdB6_Pin, GPIO_PIN_RESET);
 8000626:	2200      	movs	r2, #0
 8000628:	2170      	movs	r1, #112	; 0x70
 800062a:	482a      	ldr	r0, [pc, #168]	; (80006d4 <MX_GPIO_Init+0x148>)
 800062c:	f001 fb3e 	bl	8001cac <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000630:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000634:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000636:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800063a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800063c:	2300      	movs	r3, #0
 800063e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000640:	f107 0314 	add.w	r3, r7, #20
 8000644:	4619      	mov	r1, r3
 8000646:	4822      	ldr	r0, [pc, #136]	; (80006d0 <MX_GPIO_Init+0x144>)
 8000648:	f001 f9ac 	bl	80019a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA2 PA4 PA5 PAPin
                           PAPin */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5|GPIO_Outpue___lcd_Pin
 800064c:	23f4      	movs	r3, #244	; 0xf4
 800064e:	617b      	str	r3, [r7, #20]
                          |GPIO_Out___lcd_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000650:	2301      	movs	r3, #1
 8000652:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000654:	2300      	movs	r3, #0
 8000656:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000658:	2300      	movs	r3, #0
 800065a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800065c:	f107 0314 	add.w	r3, r7, #20
 8000660:	4619      	mov	r1, r3
 8000662:	481a      	ldr	r0, [pc, #104]	; (80006cc <MX_GPIO_Init+0x140>)
 8000664:	f001 f99e 	bl	80019a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USART_RX_Pin;
 8000668:	2308      	movs	r3, #8
 800066a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800066c:	2302      	movs	r3, #2
 800066e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000670:	2300      	movs	r3, #0
 8000672:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000674:	2300      	movs	r3, #0
 8000676:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000678:	2307      	movs	r3, #7
 800067a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USART_RX_GPIO_Port, &GPIO_InitStruct);
 800067c:	f107 0314 	add.w	r3, r7, #20
 8000680:	4619      	mov	r1, r3
 8000682:	4812      	ldr	r0, [pc, #72]	; (80006cc <MX_GPIO_Init+0x140>)
 8000684:	f001 f98e 	bl	80019a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = GPIO_Output___lcd_Pin;
 8000688:	2380      	movs	r3, #128	; 0x80
 800068a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800068c:	2301      	movs	r3, #1
 800068e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000690:	2300      	movs	r3, #0
 8000692:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000694:	2300      	movs	r3, #0
 8000696:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIO_Output___lcd_GPIO_Port, &GPIO_InitStruct);
 8000698:	f107 0314 	add.w	r3, r7, #20
 800069c:	4619      	mov	r1, r3
 800069e:	480c      	ldr	r0, [pc, #48]	; (80006d0 <MX_GPIO_Init+0x144>)
 80006a0:	f001 f980 	bl	80019a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = GPIO_Output___lcdB4_Pin|GPIO_Output___lcdB5_Pin|GPIO_Output___lcdB6_Pin;
 80006a4:	2370      	movs	r3, #112	; 0x70
 80006a6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006a8:	2301      	movs	r3, #1
 80006aa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ac:	2300      	movs	r3, #0
 80006ae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006b0:	2300      	movs	r3, #0
 80006b2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006b4:	f107 0314 	add.w	r3, r7, #20
 80006b8:	4619      	mov	r1, r3
 80006ba:	4806      	ldr	r0, [pc, #24]	; (80006d4 <MX_GPIO_Init+0x148>)
 80006bc:	f001 f972 	bl	80019a4 <HAL_GPIO_Init>

}
 80006c0:	bf00      	nop
 80006c2:	3728      	adds	r7, #40	; 0x28
 80006c4:	46bd      	mov	sp, r7
 80006c6:	bd80      	pop	{r7, pc}
 80006c8:	40023800 	.word	0x40023800
 80006cc:	40020000 	.word	0x40020000
 80006d0:	40020800 	.word	0x40020800
 80006d4:	40020400 	.word	0x40020400

080006d8 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80006dc:	4b12      	ldr	r3, [pc, #72]	; (8000728 <MX_I2C1_Init+0x50>)
 80006de:	4a13      	ldr	r2, [pc, #76]	; (800072c <MX_I2C1_Init+0x54>)
 80006e0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80006e2:	4b11      	ldr	r3, [pc, #68]	; (8000728 <MX_I2C1_Init+0x50>)
 80006e4:	4a12      	ldr	r2, [pc, #72]	; (8000730 <MX_I2C1_Init+0x58>)
 80006e6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80006e8:	4b0f      	ldr	r3, [pc, #60]	; (8000728 <MX_I2C1_Init+0x50>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80006ee:	4b0e      	ldr	r3, [pc, #56]	; (8000728 <MX_I2C1_Init+0x50>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80006f4:	4b0c      	ldr	r3, [pc, #48]	; (8000728 <MX_I2C1_Init+0x50>)
 80006f6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80006fa:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80006fc:	4b0a      	ldr	r3, [pc, #40]	; (8000728 <MX_I2C1_Init+0x50>)
 80006fe:	2200      	movs	r2, #0
 8000700:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000702:	4b09      	ldr	r3, [pc, #36]	; (8000728 <MX_I2C1_Init+0x50>)
 8000704:	2200      	movs	r2, #0
 8000706:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000708:	4b07      	ldr	r3, [pc, #28]	; (8000728 <MX_I2C1_Init+0x50>)
 800070a:	2200      	movs	r2, #0
 800070c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800070e:	4b06      	ldr	r3, [pc, #24]	; (8000728 <MX_I2C1_Init+0x50>)
 8000710:	2200      	movs	r2, #0
 8000712:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000714:	4804      	ldr	r0, [pc, #16]	; (8000728 <MX_I2C1_Init+0x50>)
 8000716:	f001 fae3 	bl	8001ce0 <HAL_I2C_Init>
 800071a:	4603      	mov	r3, r0
 800071c:	2b00      	cmp	r3, #0
 800071e:	d001      	beq.n	8000724 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000720:	f000 fddc 	bl	80012dc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000724:	bf00      	nop
 8000726:	bd80      	pop	{r7, pc}
 8000728:	200000b8 	.word	0x200000b8
 800072c:	40005400 	.word	0x40005400
 8000730:	000186a0 	.word	0x000186a0

08000734 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	b08a      	sub	sp, #40	; 0x28
 8000738:	af00      	add	r7, sp, #0
 800073a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800073c:	f107 0314 	add.w	r3, r7, #20
 8000740:	2200      	movs	r2, #0
 8000742:	601a      	str	r2, [r3, #0]
 8000744:	605a      	str	r2, [r3, #4]
 8000746:	609a      	str	r2, [r3, #8]
 8000748:	60da      	str	r2, [r3, #12]
 800074a:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	4a19      	ldr	r2, [pc, #100]	; (80007b8 <HAL_I2C_MspInit+0x84>)
 8000752:	4293      	cmp	r3, r2
 8000754:	d12c      	bne.n	80007b0 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000756:	2300      	movs	r3, #0
 8000758:	613b      	str	r3, [r7, #16]
 800075a:	4b18      	ldr	r3, [pc, #96]	; (80007bc <HAL_I2C_MspInit+0x88>)
 800075c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800075e:	4a17      	ldr	r2, [pc, #92]	; (80007bc <HAL_I2C_MspInit+0x88>)
 8000760:	f043 0302 	orr.w	r3, r3, #2
 8000764:	6313      	str	r3, [r2, #48]	; 0x30
 8000766:	4b15      	ldr	r3, [pc, #84]	; (80007bc <HAL_I2C_MspInit+0x88>)
 8000768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800076a:	f003 0302 	and.w	r3, r3, #2
 800076e:	613b      	str	r3, [r7, #16]
 8000770:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000772:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000776:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000778:	2312      	movs	r3, #18
 800077a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800077c:	2300      	movs	r3, #0
 800077e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000780:	2303      	movs	r3, #3
 8000782:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000784:	2304      	movs	r3, #4
 8000786:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000788:	f107 0314 	add.w	r3, r7, #20
 800078c:	4619      	mov	r1, r3
 800078e:	480c      	ldr	r0, [pc, #48]	; (80007c0 <HAL_I2C_MspInit+0x8c>)
 8000790:	f001 f908 	bl	80019a4 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000794:	2300      	movs	r3, #0
 8000796:	60fb      	str	r3, [r7, #12]
 8000798:	4b08      	ldr	r3, [pc, #32]	; (80007bc <HAL_I2C_MspInit+0x88>)
 800079a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800079c:	4a07      	ldr	r2, [pc, #28]	; (80007bc <HAL_I2C_MspInit+0x88>)
 800079e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80007a2:	6413      	str	r3, [r2, #64]	; 0x40
 80007a4:	4b05      	ldr	r3, [pc, #20]	; (80007bc <HAL_I2C_MspInit+0x88>)
 80007a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007a8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80007ac:	60fb      	str	r3, [r7, #12]
 80007ae:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80007b0:	bf00      	nop
 80007b2:	3728      	adds	r7, #40	; 0x28
 80007b4:	46bd      	mov	sp, r7
 80007b6:	bd80      	pop	{r7, pc}
 80007b8:	40005400 	.word	0x40005400
 80007bc:	40023800 	.word	0x40023800
 80007c0:	40020400 	.word	0x40020400

080007c4 <Lcd_create>:
 */
Lcd_HandleTypeDef Lcd_create(
		Lcd_PortType port[], Lcd_PinType pin[],
		Lcd_PortType rs_port, Lcd_PinType rs_pin,
		Lcd_PortType en_port, Lcd_PinType en_pin, Lcd_ModeTypeDef mode)
{
 80007c4:	b5b0      	push	{r4, r5, r7, lr}
 80007c6:	b08a      	sub	sp, #40	; 0x28
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	60f8      	str	r0, [r7, #12]
 80007cc:	60b9      	str	r1, [r7, #8]
 80007ce:	607a      	str	r2, [r7, #4]
 80007d0:	603b      	str	r3, [r7, #0]
	Lcd_HandleTypeDef lcd;

	lcd.mode = mode;
 80007d2:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 80007d6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	lcd.en_pin = en_pin;
 80007da:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80007de:	84bb      	strh	r3, [r7, #36]	; 0x24
	lcd.en_port = en_port;
 80007e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80007e2:	623b      	str	r3, [r7, #32]

	lcd.rs_pin = rs_pin;
 80007e4:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80007e6:	83bb      	strh	r3, [r7, #28]
	lcd.rs_port = rs_port;
 80007e8:	683b      	ldr	r3, [r7, #0]
 80007ea:	61bb      	str	r3, [r7, #24]

	lcd.data_pin = pin;
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	617b      	str	r3, [r7, #20]
	lcd.data_port = port;
 80007f0:	68bb      	ldr	r3, [r7, #8]
 80007f2:	613b      	str	r3, [r7, #16]

	Lcd_init(&lcd);
 80007f4:	f107 0310 	add.w	r3, r7, #16
 80007f8:	4618      	mov	r0, r3
 80007fa:	f000 f80e 	bl	800081a <Lcd_init>

	return lcd;
 80007fe:	68fb      	ldr	r3, [r7, #12]
 8000800:	461d      	mov	r5, r3
 8000802:	f107 0410 	add.w	r4, r7, #16
 8000806:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000808:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800080a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800080e:	e885 0003 	stmia.w	r5, {r0, r1}
}
 8000812:	68f8      	ldr	r0, [r7, #12]
 8000814:	3728      	adds	r7, #40	; 0x28
 8000816:	46bd      	mov	sp, r7
 8000818:	bdb0      	pop	{r4, r5, r7, pc}

0800081a <Lcd_init>:

/**
 * Initialize 16x2-lcd without cursor
 */
void Lcd_init(Lcd_HandleTypeDef * lcd)
{
 800081a:	b580      	push	{r7, lr}
 800081c:	b082      	sub	sp, #8
 800081e:	af00      	add	r7, sp, #0
 8000820:	6078      	str	r0, [r7, #4]
	if(lcd->mode == LCD_4_BIT_MODE)
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	7d9b      	ldrb	r3, [r3, #22]
 8000826:	2b00      	cmp	r3, #0
 8000828:	d10c      	bne.n	8000844 <Lcd_init+0x2a>
	{
			lcd_write_command(lcd, 0x33);
 800082a:	2133      	movs	r1, #51	; 0x33
 800082c:	6878      	ldr	r0, [r7, #4]
 800082e:	f000 f87b 	bl	8000928 <lcd_write_command>
			lcd_write_command(lcd, 0x32);
 8000832:	2132      	movs	r1, #50	; 0x32
 8000834:	6878      	ldr	r0, [r7, #4]
 8000836:	f000 f877 	bl	8000928 <lcd_write_command>
			lcd_write_command(lcd, FUNCTION_SET | OPT_N);				// 4-bit mode
 800083a:	2128      	movs	r1, #40	; 0x28
 800083c:	6878      	ldr	r0, [r7, #4]
 800083e:	f000 f873 	bl	8000928 <lcd_write_command>
 8000842:	e003      	b.n	800084c <Lcd_init+0x32>
	}
	else
		lcd_write_command(lcd, FUNCTION_SET | OPT_DL | OPT_N);
 8000844:	2138      	movs	r1, #56	; 0x38
 8000846:	6878      	ldr	r0, [r7, #4]
 8000848:	f000 f86e 	bl	8000928 <lcd_write_command>


	lcd_write_command(lcd, CLEAR_DISPLAY);						// Clear screen
 800084c:	2101      	movs	r1, #1
 800084e:	6878      	ldr	r0, [r7, #4]
 8000850:	f000 f86a 	bl	8000928 <lcd_write_command>
	lcd_write_command(lcd, DISPLAY_ON_OFF_CONTROL | OPT_D);		// Lcd-on, cursor-off, no-blink
 8000854:	210c      	movs	r1, #12
 8000856:	6878      	ldr	r0, [r7, #4]
 8000858:	f000 f866 	bl	8000928 <lcd_write_command>
	lcd_write_command(lcd, ENTRY_MODE_SET | OPT_INC);			// Increment cursor
 800085c:	2106      	movs	r1, #6
 800085e:	6878      	ldr	r0, [r7, #4]
 8000860:	f000 f862 	bl	8000928 <lcd_write_command>
}
 8000864:	bf00      	nop
 8000866:	3708      	adds	r7, #8
 8000868:	46bd      	mov	sp, r7
 800086a:	bd80      	pop	{r7, pc}

0800086c <Lcd_int>:

/**
 * Write a number on the current position
 */
void Lcd_int(Lcd_HandleTypeDef * lcd, int number)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	b086      	sub	sp, #24
 8000870:	af00      	add	r7, sp, #0
 8000872:	6078      	str	r0, [r7, #4]
 8000874:	6039      	str	r1, [r7, #0]
	char buffer[11];
	sprintf(buffer, "%d", number);
 8000876:	f107 030c 	add.w	r3, r7, #12
 800087a:	683a      	ldr	r2, [r7, #0]
 800087c:	4906      	ldr	r1, [pc, #24]	; (8000898 <Lcd_int+0x2c>)
 800087e:	4618      	mov	r0, r3
 8000880:	f003 fad4 	bl	8003e2c <siprintf>

	Lcd_string(lcd, buffer);
 8000884:	f107 030c 	add.w	r3, r7, #12
 8000888:	4619      	mov	r1, r3
 800088a:	6878      	ldr	r0, [r7, #4]
 800088c:	f000 f806 	bl	800089c <Lcd_string>
}
 8000890:	bf00      	nop
 8000892:	3718      	adds	r7, #24
 8000894:	46bd      	mov	sp, r7
 8000896:	bd80      	pop	{r7, pc}
 8000898:	08004e6c 	.word	0x08004e6c

0800089c <Lcd_string>:

/**
 * Write a string on the current position
 */
void Lcd_string(Lcd_HandleTypeDef * lcd, char * string)
{
 800089c:	b590      	push	{r4, r7, lr}
 800089e:	b085      	sub	sp, #20
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	6078      	str	r0, [r7, #4]
 80008a4:	6039      	str	r1, [r7, #0]
	for(uint8_t i = 0; i < strlen(string); i++)
 80008a6:	2300      	movs	r3, #0
 80008a8:	73fb      	strb	r3, [r7, #15]
 80008aa:	e00a      	b.n	80008c2 <Lcd_string+0x26>
	{
		lcd_write_data(lcd, string[i]);
 80008ac:	7bfb      	ldrb	r3, [r7, #15]
 80008ae:	683a      	ldr	r2, [r7, #0]
 80008b0:	4413      	add	r3, r2
 80008b2:	781b      	ldrb	r3, [r3, #0]
 80008b4:	4619      	mov	r1, r3
 80008b6:	6878      	ldr	r0, [r7, #4]
 80008b8:	f000 f864 	bl	8000984 <lcd_write_data>
	for(uint8_t i = 0; i < strlen(string); i++)
 80008bc:	7bfb      	ldrb	r3, [r7, #15]
 80008be:	3301      	adds	r3, #1
 80008c0:	73fb      	strb	r3, [r7, #15]
 80008c2:	7bfc      	ldrb	r4, [r7, #15]
 80008c4:	6838      	ldr	r0, [r7, #0]
 80008c6:	f7ff fc8b 	bl	80001e0 <strlen>
 80008ca:	4603      	mov	r3, r0
 80008cc:	429c      	cmp	r4, r3
 80008ce:	d3ed      	bcc.n	80008ac <Lcd_string+0x10>
	}
}
 80008d0:	bf00      	nop
 80008d2:	bf00      	nop
 80008d4:	3714      	adds	r7, #20
 80008d6:	46bd      	mov	sp, r7
 80008d8:	bd90      	pop	{r4, r7, pc}
	...

080008dc <Lcd_cursor>:

/**
 * Set the cursor position
 */
void Lcd_cursor(Lcd_HandleTypeDef * lcd, uint8_t row, uint8_t col)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	b082      	sub	sp, #8
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	6078      	str	r0, [r7, #4]
 80008e4:	460b      	mov	r3, r1
 80008e6:	70fb      	strb	r3, [r7, #3]
 80008e8:	4613      	mov	r3, r2
 80008ea:	70bb      	strb	r3, [r7, #2]
	#ifdef LCD20xN
	lcd_write_command(lcd, SET_DDRAM_ADDR + ROW_20[row] + col);
	#endif

	#ifdef LCD16xN
	lcd_write_command(lcd, SET_DDRAM_ADDR + ROW_16[row] + col);
 80008ec:	78fb      	ldrb	r3, [r7, #3]
 80008ee:	4a07      	ldr	r2, [pc, #28]	; (800090c <Lcd_cursor+0x30>)
 80008f0:	5cd2      	ldrb	r2, [r2, r3]
 80008f2:	78bb      	ldrb	r3, [r7, #2]
 80008f4:	4413      	add	r3, r2
 80008f6:	b2db      	uxtb	r3, r3
 80008f8:	3b80      	subs	r3, #128	; 0x80
 80008fa:	b2db      	uxtb	r3, r3
 80008fc:	4619      	mov	r1, r3
 80008fe:	6878      	ldr	r0, [r7, #4]
 8000900:	f000 f812 	bl	8000928 <lcd_write_command>
	#endif
}
 8000904:	bf00      	nop
 8000906:	3708      	adds	r7, #8
 8000908:	46bd      	mov	sp, r7
 800090a:	bd80      	pop	{r7, pc}
 800090c:	08004f1c 	.word	0x08004f1c

08000910 <Lcd_clear>:

/**
 * Clear the screen
 */
void Lcd_clear(Lcd_HandleTypeDef * lcd) {
 8000910:	b580      	push	{r7, lr}
 8000912:	b082      	sub	sp, #8
 8000914:	af00      	add	r7, sp, #0
 8000916:	6078      	str	r0, [r7, #4]
	lcd_write_command(lcd, CLEAR_DISPLAY);
 8000918:	2101      	movs	r1, #1
 800091a:	6878      	ldr	r0, [r7, #4]
 800091c:	f000 f804 	bl	8000928 <lcd_write_command>
}
 8000920:	bf00      	nop
 8000922:	3708      	adds	r7, #8
 8000924:	46bd      	mov	sp, r7
 8000926:	bd80      	pop	{r7, pc}

08000928 <lcd_write_command>:

/**
 * Write a byte to the command register
 */
void lcd_write_command(Lcd_HandleTypeDef * lcd, uint8_t command)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	b082      	sub	sp, #8
 800092c:	af00      	add	r7, sp, #0
 800092e:	6078      	str	r0, [r7, #4]
 8000930:	460b      	mov	r3, r1
 8000932:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(lcd->rs_port, lcd->rs_pin, LCD_COMMAND_REG);		// Write to command register
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	6898      	ldr	r0, [r3, #8]
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	899b      	ldrh	r3, [r3, #12]
 800093c:	2200      	movs	r2, #0
 800093e:	4619      	mov	r1, r3
 8000940:	f001 f9b4 	bl	8001cac <HAL_GPIO_WritePin>

	if(lcd->mode == LCD_4_BIT_MODE)
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	7d9b      	ldrb	r3, [r3, #22]
 8000948:	2b00      	cmp	r3, #0
 800094a:	d111      	bne.n	8000970 <lcd_write_command+0x48>
	{
		lcd_write(lcd, (command >> 4), LCD_NIB);
 800094c:	78fb      	ldrb	r3, [r7, #3]
 800094e:	091b      	lsrs	r3, r3, #4
 8000950:	b2db      	uxtb	r3, r3
 8000952:	2204      	movs	r2, #4
 8000954:	4619      	mov	r1, r3
 8000956:	6878      	ldr	r0, [r7, #4]
 8000958:	f000 f842 	bl	80009e0 <lcd_write>
		lcd_write(lcd, command & 0x0F, LCD_NIB);
 800095c:	78fb      	ldrb	r3, [r7, #3]
 800095e:	f003 030f 	and.w	r3, r3, #15
 8000962:	b2db      	uxtb	r3, r3
 8000964:	2204      	movs	r2, #4
 8000966:	4619      	mov	r1, r3
 8000968:	6878      	ldr	r0, [r7, #4]
 800096a:	f000 f839 	bl	80009e0 <lcd_write>
	else
	{
		lcd_write(lcd, command, LCD_BYTE);
	}

}
 800096e:	e005      	b.n	800097c <lcd_write_command+0x54>
		lcd_write(lcd, command, LCD_BYTE);
 8000970:	78fb      	ldrb	r3, [r7, #3]
 8000972:	2208      	movs	r2, #8
 8000974:	4619      	mov	r1, r3
 8000976:	6878      	ldr	r0, [r7, #4]
 8000978:	f000 f832 	bl	80009e0 <lcd_write>
}
 800097c:	bf00      	nop
 800097e:	3708      	adds	r7, #8
 8000980:	46bd      	mov	sp, r7
 8000982:	bd80      	pop	{r7, pc}

08000984 <lcd_write_data>:

/**
 * Write a byte to the data register
 */
void lcd_write_data(Lcd_HandleTypeDef * lcd, uint8_t data)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	b082      	sub	sp, #8
 8000988:	af00      	add	r7, sp, #0
 800098a:	6078      	str	r0, [r7, #4]
 800098c:	460b      	mov	r3, r1
 800098e:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(lcd->rs_port, lcd->rs_pin, LCD_DATA_REG);			// Write to data register
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	6898      	ldr	r0, [r3, #8]
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	899b      	ldrh	r3, [r3, #12]
 8000998:	2201      	movs	r2, #1
 800099a:	4619      	mov	r1, r3
 800099c:	f001 f986 	bl	8001cac <HAL_GPIO_WritePin>

	if(lcd->mode == LCD_4_BIT_MODE)
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	7d9b      	ldrb	r3, [r3, #22]
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	d111      	bne.n	80009cc <lcd_write_data+0x48>
	{
		lcd_write(lcd, data >> 4, LCD_NIB);
 80009a8:	78fb      	ldrb	r3, [r7, #3]
 80009aa:	091b      	lsrs	r3, r3, #4
 80009ac:	b2db      	uxtb	r3, r3
 80009ae:	2204      	movs	r2, #4
 80009b0:	4619      	mov	r1, r3
 80009b2:	6878      	ldr	r0, [r7, #4]
 80009b4:	f000 f814 	bl	80009e0 <lcd_write>
		lcd_write(lcd, data & 0x0F, LCD_NIB);
 80009b8:	78fb      	ldrb	r3, [r7, #3]
 80009ba:	f003 030f 	and.w	r3, r3, #15
 80009be:	b2db      	uxtb	r3, r3
 80009c0:	2204      	movs	r2, #4
 80009c2:	4619      	mov	r1, r3
 80009c4:	6878      	ldr	r0, [r7, #4]
 80009c6:	f000 f80b 	bl	80009e0 <lcd_write>
	else
	{
		lcd_write(lcd, data, LCD_BYTE);
	}

}
 80009ca:	e005      	b.n	80009d8 <lcd_write_data+0x54>
		lcd_write(lcd, data, LCD_BYTE);
 80009cc:	78fb      	ldrb	r3, [r7, #3]
 80009ce:	2208      	movs	r2, #8
 80009d0:	4619      	mov	r1, r3
 80009d2:	6878      	ldr	r0, [r7, #4]
 80009d4:	f000 f804 	bl	80009e0 <lcd_write>
}
 80009d8:	bf00      	nop
 80009da:	3708      	adds	r7, #8
 80009dc:	46bd      	mov	sp, r7
 80009de:	bd80      	pop	{r7, pc}

080009e0 <lcd_write>:

/**
 * Set len bits on the bus and toggle the enable line
 */
void lcd_write(Lcd_HandleTypeDef * lcd, uint8_t data, uint8_t len)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b084      	sub	sp, #16
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	6078      	str	r0, [r7, #4]
 80009e8:	460b      	mov	r3, r1
 80009ea:	70fb      	strb	r3, [r7, #3]
 80009ec:	4613      	mov	r3, r2
 80009ee:	70bb      	strb	r3, [r7, #2]
	for(uint8_t i = 0; i < len; i++)
 80009f0:	2300      	movs	r3, #0
 80009f2:	73fb      	strb	r3, [r7, #15]
 80009f4:	e019      	b.n	8000a2a <lcd_write+0x4a>
	{
		HAL_GPIO_WritePin(lcd->data_port[i], lcd->data_pin[i], (data >> i) & 0x01);
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	681a      	ldr	r2, [r3, #0]
 80009fa:	7bfb      	ldrb	r3, [r7, #15]
 80009fc:	009b      	lsls	r3, r3, #2
 80009fe:	4413      	add	r3, r2
 8000a00:	6818      	ldr	r0, [r3, #0]
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	685a      	ldr	r2, [r3, #4]
 8000a06:	7bfb      	ldrb	r3, [r7, #15]
 8000a08:	005b      	lsls	r3, r3, #1
 8000a0a:	4413      	add	r3, r2
 8000a0c:	8819      	ldrh	r1, [r3, #0]
 8000a0e:	78fa      	ldrb	r2, [r7, #3]
 8000a10:	7bfb      	ldrb	r3, [r7, #15]
 8000a12:	fa42 f303 	asr.w	r3, r2, r3
 8000a16:	b2db      	uxtb	r3, r3
 8000a18:	f003 0301 	and.w	r3, r3, #1
 8000a1c:	b2db      	uxtb	r3, r3
 8000a1e:	461a      	mov	r2, r3
 8000a20:	f001 f944 	bl	8001cac <HAL_GPIO_WritePin>
	for(uint8_t i = 0; i < len; i++)
 8000a24:	7bfb      	ldrb	r3, [r7, #15]
 8000a26:	3301      	adds	r3, #1
 8000a28:	73fb      	strb	r3, [r7, #15]
 8000a2a:	7bfa      	ldrb	r2, [r7, #15]
 8000a2c:	78bb      	ldrb	r3, [r7, #2]
 8000a2e:	429a      	cmp	r2, r3
 8000a30:	d3e1      	bcc.n	80009f6 <lcd_write+0x16>
	}

	HAL_GPIO_WritePin(lcd->en_port, lcd->en_pin, 1);
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	6918      	ldr	r0, [r3, #16]
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	8a9b      	ldrh	r3, [r3, #20]
 8000a3a:	2201      	movs	r2, #1
 8000a3c:	4619      	mov	r1, r3
 8000a3e:	f001 f935 	bl	8001cac <HAL_GPIO_WritePin>
	DELAY(1);
 8000a42:	2001      	movs	r0, #1
 8000a44:	f000 fea4 	bl	8001790 <HAL_Delay>
	HAL_GPIO_WritePin(lcd->en_port, lcd->en_pin, 0); 		// Data receive on falling edge
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	6918      	ldr	r0, [r3, #16]
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	8a9b      	ldrh	r3, [r3, #20]
 8000a50:	2200      	movs	r2, #0
 8000a52:	4619      	mov	r1, r3
 8000a54:	f001 f92a 	bl	8001cac <HAL_GPIO_WritePin>
}
 8000a58:	bf00      	nop
 8000a5a:	3710      	adds	r7, #16
 8000a5c:	46bd      	mov	sp, r7
 8000a5e:	bd80      	pop	{r7, pc}

08000a60 <set_speaker_state>:

// ---
void set_speaker_state(bool);


void set_speaker_state(bool state){
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b082      	sub	sp, #8
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	4603      	mov	r3, r0
 8000a68:	71fb      	strb	r3, [r7, #7]
	SPEAKER_ACTIVE = state;
 8000a6a:	4a0f      	ldr	r2, [pc, #60]	; (8000aa8 <set_speaker_state+0x48>)
 8000a6c:	79fb      	ldrb	r3, [r7, #7]
 8000a6e:	7013      	strb	r3, [r2, #0]
	// check if active
	if(state){
 8000a70:	79fb      	ldrb	r3, [r7, #7]
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	d00d      	beq.n	8000a92 <set_speaker_state+0x32>
		printf("ACTIVE | SPEAKER\n");
 8000a76:	480d      	ldr	r0, [pc, #52]	; (8000aac <set_speaker_state+0x4c>)
 8000a78:	f003 fb0e 	bl	8004098 <puts>
		htim2.Instance->CCR1 = SPEAKER_HERTZ;
 8000a7c:	4b0c      	ldr	r3, [pc, #48]	; (8000ab0 <set_speaker_state+0x50>)
 8000a7e:	681a      	ldr	r2, [r3, #0]
 8000a80:	4b0c      	ldr	r3, [pc, #48]	; (8000ab4 <set_speaker_state+0x54>)
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	635a      	str	r2, [r3, #52]	; 0x34
		SPEAKER_ACTIVE_START_TIME = CURRENT_TIME;
 8000a86:	4b0c      	ldr	r3, [pc, #48]	; (8000ab8 <set_speaker_state+0x58>)
 8000a88:	681b      	ldr	r3, [r3, #0]
 8000a8a:	461a      	mov	r2, r3
 8000a8c:	4b0b      	ldr	r3, [pc, #44]	; (8000abc <set_speaker_state+0x5c>)
 8000a8e:	601a      	str	r2, [r3, #0]
	}else{
		printf("DEACTIVED | SPEAKER\n");
		htim2.Instance->CCR1 = 0;
	}
}
 8000a90:	e006      	b.n	8000aa0 <set_speaker_state+0x40>
		printf("DEACTIVED | SPEAKER\n");
 8000a92:	480b      	ldr	r0, [pc, #44]	; (8000ac0 <set_speaker_state+0x60>)
 8000a94:	f003 fb00 	bl	8004098 <puts>
		htim2.Instance->CCR1 = 0;
 8000a98:	4b06      	ldr	r3, [pc, #24]	; (8000ab4 <set_speaker_state+0x54>)
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000aa0:	bf00      	nop
 8000aa2:	3708      	adds	r7, #8
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	bd80      	pop	{r7, pc}
 8000aa8:	20000134 	.word	0x20000134
 8000aac:	08004ea0 	.word	0x08004ea0
 8000ab0:	20000030 	.word	0x20000030
 8000ab4:	20000180 	.word	0x20000180
 8000ab8:	20000110 	.word	0x20000110
 8000abc:	20000138 	.word	0x20000138
 8000ac0:	08004eb4 	.word	0x08004eb4

08000ac4 <set_alarm>:
	HAS_TIMER = true;
	int a = data[0], b = data[1], c = data[2];
	set_alarm(a, b, c);
}

void set_alarm(int ss, int mm, int hh){
 8000ac4:	b480      	push	{r7}
 8000ac6:	b085      	sub	sp, #20
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	60f8      	str	r0, [r7, #12]
 8000acc:	60b9      	str	r1, [r7, #8]
 8000ace:	607a      	str	r2, [r7, #4]
	HAS_TIMER = true;
 8000ad0:	4b38      	ldr	r3, [pc, #224]	; (8000bb4 <set_alarm+0xf0>)
 8000ad2:	2201      	movs	r2, #1
 8000ad4:	701a      	strb	r2, [r3, #0]
	ALARM[SEC] = ss;
 8000ad6:	2100      	movs	r1, #0
 8000ad8:	4a37      	ldr	r2, [pc, #220]	; (8000bb8 <set_alarm+0xf4>)
 8000ada:	68fb      	ldr	r3, [r7, #12]
 8000adc:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	ALARM[MIN] = mm;
 8000ae0:	2101      	movs	r1, #1
 8000ae2:	4a35      	ldr	r2, [pc, #212]	; (8000bb8 <set_alarm+0xf4>)
 8000ae4:	68bb      	ldr	r3, [r7, #8]
 8000ae6:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	ALARM[HRR] = hh;
 8000aea:	2102      	movs	r1, #2
 8000aec:	4a32      	ldr	r2, [pc, #200]	; (8000bb8 <set_alarm+0xf4>)
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	// set the rest to be next day and current year / month
	// if next day is greater than month limit, and if next month is greater than year limit
	// move to next year, first day
	if(CLOCK[DAY] + 1 > D_MONTHS[CLOCK[MON]]){
 8000af4:	2203      	movs	r2, #3
 8000af6:	4b31      	ldr	r3, [pc, #196]	; (8000bbc <set_alarm+0xf8>)
 8000af8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000afc:	3301      	adds	r3, #1
 8000afe:	4619      	mov	r1, r3
 8000b00:	2204      	movs	r2, #4
 8000b02:	4b2e      	ldr	r3, [pc, #184]	; (8000bbc <set_alarm+0xf8>)
 8000b04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000b08:	4a2d      	ldr	r2, [pc, #180]	; (8000bc0 <set_alarm+0xfc>)
 8000b0a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b0e:	4299      	cmp	r1, r3
 8000b10:	d931      	bls.n	8000b76 <set_alarm+0xb2>
		// check if new year
		if(CLOCK[MON] + 1 > 12){
 8000b12:	2204      	movs	r2, #4
 8000b14:	4b29      	ldr	r3, [pc, #164]	; (8000bbc <set_alarm+0xf8>)
 8000b16:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000b1a:	2b0b      	cmp	r3, #11
 8000b1c:	dd14      	ble.n	8000b48 <set_alarm+0x84>
			ALARM[YRR] = CLOCK[YRR] + 1;
 8000b1e:	2205      	movs	r2, #5
 8000b20:	4b26      	ldr	r3, [pc, #152]	; (8000bbc <set_alarm+0xf8>)
 8000b22:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000b26:	2105      	movs	r1, #5
 8000b28:	3301      	adds	r3, #1
 8000b2a:	4a23      	ldr	r2, [pc, #140]	; (8000bb8 <set_alarm+0xf4>)
 8000b2c:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
			ALARM[MON] = JAN;
 8000b30:	2300      	movs	r3, #0
 8000b32:	2204      	movs	r2, #4
 8000b34:	4619      	mov	r1, r3
 8000b36:	4b20      	ldr	r3, [pc, #128]	; (8000bb8 <set_alarm+0xf4>)
 8000b38:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			ALARM[DAY] = 1;
 8000b3c:	2203      	movs	r2, #3
 8000b3e:	4b1e      	ldr	r3, [pc, #120]	; (8000bb8 <set_alarm+0xf4>)
 8000b40:	2101      	movs	r1, #1
 8000b42:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		// if NOT illegal, just move to next day
		ALARM[YRR] = CLOCK[YRR];
		ALARM[MON] = CLOCK[MON];
		ALARM[DAY] = CLOCK[DAY] + 1;
	}
}
 8000b46:	e02f      	b.n	8000ba8 <set_alarm+0xe4>
			ALARM[YRR] = CLOCK[YRR];
 8000b48:	2205      	movs	r2, #5
 8000b4a:	2105      	movs	r1, #5
 8000b4c:	4b1b      	ldr	r3, [pc, #108]	; (8000bbc <set_alarm+0xf8>)
 8000b4e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000b52:	4a19      	ldr	r2, [pc, #100]	; (8000bb8 <set_alarm+0xf4>)
 8000b54:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
			ALARM[MON] = CLOCK[MON] + 1;
 8000b58:	2204      	movs	r2, #4
 8000b5a:	4b18      	ldr	r3, [pc, #96]	; (8000bbc <set_alarm+0xf8>)
 8000b5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000b60:	2104      	movs	r1, #4
 8000b62:	3301      	adds	r3, #1
 8000b64:	4a14      	ldr	r2, [pc, #80]	; (8000bb8 <set_alarm+0xf4>)
 8000b66:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
			ALARM[DAY] = 1;
 8000b6a:	2203      	movs	r2, #3
 8000b6c:	4b12      	ldr	r3, [pc, #72]	; (8000bb8 <set_alarm+0xf4>)
 8000b6e:	2101      	movs	r1, #1
 8000b70:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 8000b74:	e018      	b.n	8000ba8 <set_alarm+0xe4>
		ALARM[YRR] = CLOCK[YRR];
 8000b76:	2205      	movs	r2, #5
 8000b78:	2105      	movs	r1, #5
 8000b7a:	4b10      	ldr	r3, [pc, #64]	; (8000bbc <set_alarm+0xf8>)
 8000b7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000b80:	4a0d      	ldr	r2, [pc, #52]	; (8000bb8 <set_alarm+0xf4>)
 8000b82:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
		ALARM[MON] = CLOCK[MON];
 8000b86:	2204      	movs	r2, #4
 8000b88:	2104      	movs	r1, #4
 8000b8a:	4b0c      	ldr	r3, [pc, #48]	; (8000bbc <set_alarm+0xf8>)
 8000b8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000b90:	4a09      	ldr	r2, [pc, #36]	; (8000bb8 <set_alarm+0xf4>)
 8000b92:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
		ALARM[DAY] = CLOCK[DAY] + 1;
 8000b96:	2203      	movs	r2, #3
 8000b98:	4b08      	ldr	r3, [pc, #32]	; (8000bbc <set_alarm+0xf8>)
 8000b9a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000b9e:	2103      	movs	r1, #3
 8000ba0:	3301      	adds	r3, #1
 8000ba2:	4a05      	ldr	r2, [pc, #20]	; (8000bb8 <set_alarm+0xf4>)
 8000ba4:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
}
 8000ba8:	bf00      	nop
 8000baa:	3714      	adds	r7, #20
 8000bac:	46bd      	mov	sp, r7
 8000bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb2:	4770      	bx	lr
 8000bb4:	2000016c 	.word	0x2000016c
 8000bb8:	2000013c 	.word	0x2000013c
 8000bbc:	2000011c 	.word	0x2000011c
 8000bc0:	20000000 	.word	0x20000000

08000bc4 <update_speaker_limit>:
		// alarm go off
		set_speaker_state(true);
	}
}

void update_speaker_limit(){
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	af00      	add	r7, sp, #0
	// limits all speaker time lengths to 15s
	if(SPEAKER_ACTIVE){
 8000bc8:	4b12      	ldr	r3, [pc, #72]	; (8000c14 <update_speaker_limit+0x50>)
 8000bca:	781b      	ldrb	r3, [r3, #0]
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	d01e      	beq.n	8000c0e <update_speaker_limit+0x4a>
		SPEAKER_ACTIVE_TIMER[SEC] = CURRENT_TIME - SPEAKER_ACTIVE_START_TIME;
 8000bd0:	4b11      	ldr	r3, [pc, #68]	; (8000c18 <update_speaker_limit+0x54>)
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	4a11      	ldr	r2, [pc, #68]	; (8000c1c <update_speaker_limit+0x58>)
 8000bd6:	6812      	ldr	r2, [r2, #0]
 8000bd8:	1a9b      	subs	r3, r3, r2
 8000bda:	2200      	movs	r2, #0
 8000bdc:	4619      	mov	r1, r3
 8000bde:	4b10      	ldr	r3, [pc, #64]	; (8000c20 <update_speaker_limit+0x5c>)
 8000be0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		// TODO REMOTE THIS NEXT LINE
		SPEAKER_ACTIVE_TIMER[MIN] = SPEAKER_ACTIVE_TIMER[SEC];
 8000be4:	2200      	movs	r2, #0
 8000be6:	2101      	movs	r1, #1
 8000be8:	4b0d      	ldr	r3, [pc, #52]	; (8000c20 <update_speaker_limit+0x5c>)
 8000bea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000bee:	4a0c      	ldr	r2, [pc, #48]	; (8000c20 <update_speaker_limit+0x5c>)
 8000bf0:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
		if(SPEAKER_ACTIVE_TIMER[SEC] > ALARM_MAX_LENGTH){
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	4b0a      	ldr	r3, [pc, #40]	; (8000c20 <update_speaker_limit+0x5c>)
 8000bf8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000bfc:	220f      	movs	r2, #15
 8000bfe:	4293      	cmp	r3, r2
 8000c00:	dd05      	ble.n	8000c0e <update_speaker_limit+0x4a>
			set_speaker_state(false);
 8000c02:	2000      	movs	r0, #0
 8000c04:	f7ff ff2c 	bl	8000a60 <set_speaker_state>
			delete_clock(SPEAKER_ACTIVE_TIMER);
 8000c08:	4805      	ldr	r0, [pc, #20]	; (8000c20 <update_speaker_limit+0x5c>)
 8000c0a:	f000 f80b 	bl	8000c24 <delete_clock>
		}
	}
}
 8000c0e:	bf00      	nop
 8000c10:	bd80      	pop	{r7, pc}
 8000c12:	bf00      	nop
 8000c14:	20000134 	.word	0x20000134
 8000c18:	20000110 	.word	0x20000110
 8000c1c:	20000138 	.word	0x20000138
 8000c20:	20000154 	.word	0x20000154

08000c24 <delete_clock>:
int get_display_pos(uint, uint);
int get_int_length(int);
void delete_clock(int*);

// -----
void delete_clock(int* clock){
 8000c24:	b480      	push	{r7}
 8000c26:	b085      	sub	sp, #20
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	6078      	str	r0, [r7, #4]
	for (int i = 0; i < CLOCK_SIZE; i++){
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	60fb      	str	r3, [r7, #12]
 8000c30:	e007      	b.n	8000c42 <delete_clock+0x1e>
		ALARM[i] = 0;
 8000c32:	4a09      	ldr	r2, [pc, #36]	; (8000c58 <delete_clock+0x34>)
 8000c34:	68fb      	ldr	r3, [r7, #12]
 8000c36:	2100      	movs	r1, #0
 8000c38:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int i = 0; i < CLOCK_SIZE; i++){
 8000c3c:	68fb      	ldr	r3, [r7, #12]
 8000c3e:	3301      	adds	r3, #1
 8000c40:	60fb      	str	r3, [r7, #12]
 8000c42:	68fb      	ldr	r3, [r7, #12]
 8000c44:	2206      	movs	r2, #6
 8000c46:	4293      	cmp	r3, r2
 8000c48:	d3f3      	bcc.n	8000c32 <delete_clock+0xe>
	}
}
 8000c4a:	bf00      	nop
 8000c4c:	bf00      	nop
 8000c4e:	3714      	adds	r7, #20
 8000c50:	46bd      	mov	sp, r7
 8000c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c56:	4770      	bx	lr
 8000c58:	2000013c 	.word	0x2000013c

08000c5c <set_clock_time_arr>:

void set_clock_time_arr(int* time){
 8000c5c:	b480      	push	{r7}
 8000c5e:	b085      	sub	sp, #20
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	6078      	str	r0, [r7, #4]
	for(int i = 0; i < CLOCK_SIZE; i++){
 8000c64:	2300      	movs	r3, #0
 8000c66:	60fb      	str	r3, [r7, #12]
 8000c68:	e00b      	b.n	8000c82 <set_clock_time_arr+0x26>
		CLOCK[i] = time[i];
 8000c6a:	68fb      	ldr	r3, [r7, #12]
 8000c6c:	009b      	lsls	r3, r3, #2
 8000c6e:	687a      	ldr	r2, [r7, #4]
 8000c70:	4413      	add	r3, r2
 8000c72:	681a      	ldr	r2, [r3, #0]
 8000c74:	4908      	ldr	r1, [pc, #32]	; (8000c98 <set_clock_time_arr+0x3c>)
 8000c76:	68fb      	ldr	r3, [r7, #12]
 8000c78:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for(int i = 0; i < CLOCK_SIZE; i++){
 8000c7c:	68fb      	ldr	r3, [r7, #12]
 8000c7e:	3301      	adds	r3, #1
 8000c80:	60fb      	str	r3, [r7, #12]
 8000c82:	68fb      	ldr	r3, [r7, #12]
 8000c84:	2206      	movs	r2, #6
 8000c86:	4293      	cmp	r3, r2
 8000c88:	d3ef      	bcc.n	8000c6a <set_clock_time_arr+0xe>
	}
}
 8000c8a:	bf00      	nop
 8000c8c:	bf00      	nop
 8000c8e:	3714      	adds	r7, #20
 8000c90:	46bd      	mov	sp, r7
 8000c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c96:	4770      	bx	lr
 8000c98:	2000011c 	.word	0x2000011c

08000c9c <second_update_clock>:
	CLOCK[DAY] = DD;
	CLOCK[MON] = MM;
	CLOCK[YRR] = YY;
}

void second_update_clock(int* clock){
 8000c9c:	b480      	push	{r7}
 8000c9e:	b083      	sub	sp, #12
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	6078      	str	r0, [r7, #4]
	// if ms > 1000ms  / 1 s
	if(DELTA_TIME < 1000) return;
 8000ca4:	4b55      	ldr	r3, [pc, #340]	; (8000dfc <second_update_clock+0x160>)
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000cac:	f0c0 80a0 	bcc.w	8000df0 <second_update_clock+0x154>
	DELTA_TIME -= 1000;
 8000cb0:	4b52      	ldr	r3, [pc, #328]	; (8000dfc <second_update_clock+0x160>)
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 8000cb8:	4a50      	ldr	r2, [pc, #320]	; (8000dfc <second_update_clock+0x160>)
 8000cba:	6013      	str	r3, [r2, #0]
	clock[SEC] ++;
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	009b      	lsls	r3, r3, #2
 8000cc0:	687a      	ldr	r2, [r7, #4]
 8000cc2:	4413      	add	r3, r2
 8000cc4:	681a      	ldr	r2, [r3, #0]
 8000cc6:	3201      	adds	r2, #1
 8000cc8:	601a      	str	r2, [r3, #0]
	// end
	if(clock[SEC] >= 60){
 8000cca:	2300      	movs	r3, #0
 8000ccc:	009b      	lsls	r3, r3, #2
 8000cce:	687a      	ldr	r2, [r7, #4]
 8000cd0:	4413      	add	r3, r2
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	2b3b      	cmp	r3, #59	; 0x3b
 8000cd6:	dd0c      	ble.n	8000cf2 <second_update_clock+0x56>
		clock[SEC] = 0;
 8000cd8:	2300      	movs	r3, #0
 8000cda:	009b      	lsls	r3, r3, #2
 8000cdc:	687a      	ldr	r2, [r7, #4]
 8000cde:	4413      	add	r3, r2
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	601a      	str	r2, [r3, #0]
		clock[MIN] ++;
 8000ce4:	2301      	movs	r3, #1
 8000ce6:	009b      	lsls	r3, r3, #2
 8000ce8:	687a      	ldr	r2, [r7, #4]
 8000cea:	4413      	add	r3, r2
 8000cec:	681a      	ldr	r2, [r3, #0]
 8000cee:	3201      	adds	r2, #1
 8000cf0:	601a      	str	r2, [r3, #0]
	}
	if(clock[MIN] >= 60){
 8000cf2:	2301      	movs	r3, #1
 8000cf4:	009b      	lsls	r3, r3, #2
 8000cf6:	687a      	ldr	r2, [r7, #4]
 8000cf8:	4413      	add	r3, r2
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	2b3b      	cmp	r3, #59	; 0x3b
 8000cfe:	dd0c      	ble.n	8000d1a <second_update_clock+0x7e>
		clock[MIN] = 0;
 8000d00:	2301      	movs	r3, #1
 8000d02:	009b      	lsls	r3, r3, #2
 8000d04:	687a      	ldr	r2, [r7, #4]
 8000d06:	4413      	add	r3, r2
 8000d08:	2200      	movs	r2, #0
 8000d0a:	601a      	str	r2, [r3, #0]
		clock[HRR]++;
 8000d0c:	2302      	movs	r3, #2
 8000d0e:	009b      	lsls	r3, r3, #2
 8000d10:	687a      	ldr	r2, [r7, #4]
 8000d12:	4413      	add	r3, r2
 8000d14:	681a      	ldr	r2, [r3, #0]
 8000d16:	3201      	adds	r2, #1
 8000d18:	601a      	str	r2, [r3, #0]
	}
	if(clock[HRR] >= 24){
 8000d1a:	2302      	movs	r3, #2
 8000d1c:	009b      	lsls	r3, r3, #2
 8000d1e:	687a      	ldr	r2, [r7, #4]
 8000d20:	4413      	add	r3, r2
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	2b17      	cmp	r3, #23
 8000d26:	dd0c      	ble.n	8000d42 <second_update_clock+0xa6>
		clock[HRR] = 0;
 8000d28:	2302      	movs	r3, #2
 8000d2a:	009b      	lsls	r3, r3, #2
 8000d2c:	687a      	ldr	r2, [r7, #4]
 8000d2e:	4413      	add	r3, r2
 8000d30:	2200      	movs	r2, #0
 8000d32:	601a      	str	r2, [r3, #0]
		clock[DAY]++;
 8000d34:	2303      	movs	r3, #3
 8000d36:	009b      	lsls	r3, r3, #2
 8000d38:	687a      	ldr	r2, [r7, #4]
 8000d3a:	4413      	add	r3, r2
 8000d3c:	681a      	ldr	r2, [r3, #0]
 8000d3e:	3201      	adds	r2, #1
 8000d40:	601a      	str	r2, [r3, #0]
	}
	//c check if feb / leap year and is feb
	if(clock[YRR]% 4 == 0 && clock[MON]== 2){
 8000d42:	2305      	movs	r3, #5
 8000d44:	009b      	lsls	r3, r3, #2
 8000d46:	687a      	ldr	r2, [r7, #4]
 8000d48:	4413      	add	r3, r2
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	f003 0303 	and.w	r3, r3, #3
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d11b      	bne.n	8000d8c <second_update_clock+0xf0>
 8000d54:	2304      	movs	r3, #4
 8000d56:	009b      	lsls	r3, r3, #2
 8000d58:	687a      	ldr	r2, [r7, #4]
 8000d5a:	4413      	add	r3, r2
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	2b02      	cmp	r3, #2
 8000d60:	d114      	bne.n	8000d8c <second_update_clock+0xf0>
		if(clock[DAY] >= 29){
 8000d62:	2303      	movs	r3, #3
 8000d64:	009b      	lsls	r3, r3, #2
 8000d66:	687a      	ldr	r2, [r7, #4]
 8000d68:	4413      	add	r3, r2
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	2b1c      	cmp	r3, #28
 8000d6e:	dd2a      	ble.n	8000dc6 <second_update_clock+0x12a>
			clock[DAY] = 1;
 8000d70:	2303      	movs	r3, #3
 8000d72:	009b      	lsls	r3, r3, #2
 8000d74:	687a      	ldr	r2, [r7, #4]
 8000d76:	4413      	add	r3, r2
 8000d78:	2201      	movs	r2, #1
 8000d7a:	601a      	str	r2, [r3, #0]
			clock[MON]++;
 8000d7c:	2304      	movs	r3, #4
 8000d7e:	009b      	lsls	r3, r3, #2
 8000d80:	687a      	ldr	r2, [r7, #4]
 8000d82:	4413      	add	r3, r2
 8000d84:	681a      	ldr	r2, [r3, #0]
 8000d86:	3201      	adds	r2, #1
 8000d88:	601a      	str	r2, [r3, #0]
		if(clock[DAY] >= 29){
 8000d8a:	e01c      	b.n	8000dc6 <second_update_clock+0x12a>
		}
	}else{
		// if not a leap year - do a normal check
		if(clock[DAY] >= D_MONTHS[clock[MON]]){
 8000d8c:	2303      	movs	r3, #3
 8000d8e:	009b      	lsls	r3, r3, #2
 8000d90:	687a      	ldr	r2, [r7, #4]
 8000d92:	4413      	add	r3, r2
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	4619      	mov	r1, r3
 8000d98:	2304      	movs	r3, #4
 8000d9a:	009b      	lsls	r3, r3, #2
 8000d9c:	687a      	ldr	r2, [r7, #4]
 8000d9e:	4413      	add	r3, r2
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	4a17      	ldr	r2, [pc, #92]	; (8000e00 <second_update_clock+0x164>)
 8000da4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000da8:	4299      	cmp	r1, r3
 8000daa:	d30c      	bcc.n	8000dc6 <second_update_clock+0x12a>
			clock[DAY] = 1;
 8000dac:	2303      	movs	r3, #3
 8000dae:	009b      	lsls	r3, r3, #2
 8000db0:	687a      	ldr	r2, [r7, #4]
 8000db2:	4413      	add	r3, r2
 8000db4:	2201      	movs	r2, #1
 8000db6:	601a      	str	r2, [r3, #0]
			clock[MON]++;
 8000db8:	2304      	movs	r3, #4
 8000dba:	009b      	lsls	r3, r3, #2
 8000dbc:	687a      	ldr	r2, [r7, #4]
 8000dbe:	4413      	add	r3, r2
 8000dc0:	681a      	ldr	r2, [r3, #0]
 8000dc2:	3201      	adds	r2, #1
 8000dc4:	601a      	str	r2, [r3, #0]
		}
	}
	if(clock[MON] >= 12){
 8000dc6:	2304      	movs	r3, #4
 8000dc8:	009b      	lsls	r3, r3, #2
 8000dca:	687a      	ldr	r2, [r7, #4]
 8000dcc:	4413      	add	r3, r2
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	2b0b      	cmp	r3, #11
 8000dd2:	dd0e      	ble.n	8000df2 <second_update_clock+0x156>
		clock[MON]= 1;
 8000dd4:	2304      	movs	r3, #4
 8000dd6:	009b      	lsls	r3, r3, #2
 8000dd8:	687a      	ldr	r2, [r7, #4]
 8000dda:	4413      	add	r3, r2
 8000ddc:	2201      	movs	r2, #1
 8000dde:	601a      	str	r2, [r3, #0]
		clock[YRR]++;
 8000de0:	2305      	movs	r3, #5
 8000de2:	009b      	lsls	r3, r3, #2
 8000de4:	687a      	ldr	r2, [r7, #4]
 8000de6:	4413      	add	r3, r2
 8000de8:	681a      	ldr	r2, [r3, #0]
 8000dea:	3201      	adds	r2, #1
 8000dec:	601a      	str	r2, [r3, #0]
 8000dee:	e000      	b.n	8000df2 <second_update_clock+0x156>
	if(DELTA_TIME < 1000) return;
 8000df0:	bf00      	nop
	}
}
 8000df2:	370c      	adds	r7, #12
 8000df4:	46bd      	mov	sp, r7
 8000df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfa:	4770      	bx	lr
 8000dfc:	20000118 	.word	0x20000118
 8000e00:	20000000 	.word	0x20000000

08000e04 <display_info_i>:
	Lcd_string(lcd, data2);

	// end
}

void display_info_i(Lcd_HandleTypeDef* lcd, uint align1, int data1, uint align2, int data2){
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b086      	sub	sp, #24
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	60f8      	str	r0, [r7, #12]
 8000e0c:	60b9      	str	r1, [r7, #8]
 8000e0e:	607a      	str	r2, [r7, #4]
 8000e10:	603b      	str	r3, [r7, #0]
	// get cursor position for each row
	int left1 = get_display_pos(align1, get_int_length(data1));
 8000e12:	6878      	ldr	r0, [r7, #4]
 8000e14:	f000 f846 	bl	8000ea4 <get_int_length>
 8000e18:	4603      	mov	r3, r0
 8000e1a:	4619      	mov	r1, r3
 8000e1c:	68b8      	ldr	r0, [r7, #8]
 8000e1e:	f000 f824 	bl	8000e6a <get_display_pos>
 8000e22:	6178      	str	r0, [r7, #20]
	int left2 = get_display_pos(align2, get_int_length(data2));
 8000e24:	6a38      	ldr	r0, [r7, #32]
 8000e26:	f000 f83d 	bl	8000ea4 <get_int_length>
 8000e2a:	4603      	mov	r3, r0
 8000e2c:	4619      	mov	r1, r3
 8000e2e:	6838      	ldr	r0, [r7, #0]
 8000e30:	f000 f81b 	bl	8000e6a <get_display_pos>
 8000e34:	6138      	str	r0, [r7, #16]

	// set cursor to position and draw
	Lcd_cursor(lcd, 0, left1);
 8000e36:	697b      	ldr	r3, [r7, #20]
 8000e38:	b2db      	uxtb	r3, r3
 8000e3a:	461a      	mov	r2, r3
 8000e3c:	2100      	movs	r1, #0
 8000e3e:	68f8      	ldr	r0, [r7, #12]
 8000e40:	f7ff fd4c 	bl	80008dc <Lcd_cursor>
	Lcd_int(lcd, data1);
 8000e44:	6879      	ldr	r1, [r7, #4]
 8000e46:	68f8      	ldr	r0, [r7, #12]
 8000e48:	f7ff fd10 	bl	800086c <Lcd_int>
	Lcd_cursor(lcd, 1, left2);
 8000e4c:	693b      	ldr	r3, [r7, #16]
 8000e4e:	b2db      	uxtb	r3, r3
 8000e50:	461a      	mov	r2, r3
 8000e52:	2101      	movs	r1, #1
 8000e54:	68f8      	ldr	r0, [r7, #12]
 8000e56:	f7ff fd41 	bl	80008dc <Lcd_cursor>
	Lcd_int(lcd, data2);
 8000e5a:	6a39      	ldr	r1, [r7, #32]
 8000e5c:	68f8      	ldr	r0, [r7, #12]
 8000e5e:	f7ff fd05 	bl	800086c <Lcd_int>

	// end
}
 8000e62:	bf00      	nop
 8000e64:	3718      	adds	r7, #24
 8000e66:	46bd      	mov	sp, r7
 8000e68:	bd80      	pop	{r7, pc}

08000e6a <get_display_pos>:
	if (a[MIN] > b[MIN]) return true;
	if (a[SEC] > b[SEC]) return true;
	return false;
}

int get_display_pos(uint align, uint length){
 8000e6a:	b480      	push	{r7}
 8000e6c:	b083      	sub	sp, #12
 8000e6e:	af00      	add	r7, sp, #0
 8000e70:	6078      	str	r0, [r7, #4]
 8000e72:	6039      	str	r1, [r7, #0]
	if (align == A_LEFT){
 8000e74:	2200      	movs	r2, #0
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	4293      	cmp	r3, r2
 8000e7a:	d101      	bne.n	8000e80 <get_display_pos+0x16>
		return 0;
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	e00b      	b.n	8000e98 <get_display_pos+0x2e>
	} else if(align == A_RIGHT){
 8000e80:	2202      	movs	r2, #2
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	4293      	cmp	r3, r2
 8000e86:	d103      	bne.n	8000e90 <get_display_pos+0x26>
		return 16 - length - 1;
 8000e88:	683b      	ldr	r3, [r7, #0]
 8000e8a:	f1c3 030f 	rsb	r3, r3, #15
 8000e8e:	e003      	b.n	8000e98 <get_display_pos+0x2e>
	}
	return 7 - (length / 2);
 8000e90:	683b      	ldr	r3, [r7, #0]
 8000e92:	085b      	lsrs	r3, r3, #1
 8000e94:	f1c3 0307 	rsb	r3, r3, #7
}
 8000e98:	4618      	mov	r0, r3
 8000e9a:	370c      	adds	r7, #12
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea2:	4770      	bx	lr

08000ea4 <get_int_length>:

int get_int_length(int num){
 8000ea4:	b480      	push	{r7}
 8000ea6:	b085      	sub	sp, #20
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]
	if (num < 0){
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	da01      	bge.n	8000eb6 <get_int_length+0x12>
		return 0;
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	e012      	b.n	8000edc <get_int_length+0x38>
	}
	int i = 1;
 8000eb6:	2301      	movs	r3, #1
 8000eb8:	60fb      	str	r3, [r7, #12]
	int c = 0;
 8000eba:	2300      	movs	r3, #0
 8000ebc:	60bb      	str	r3, [r7, #8]
	while(i <= num){
 8000ebe:	e008      	b.n	8000ed2 <get_int_length+0x2e>
		i *= 10;
 8000ec0:	68fa      	ldr	r2, [r7, #12]
 8000ec2:	4613      	mov	r3, r2
 8000ec4:	009b      	lsls	r3, r3, #2
 8000ec6:	4413      	add	r3, r2
 8000ec8:	005b      	lsls	r3, r3, #1
 8000eca:	60fb      	str	r3, [r7, #12]
		c ++;
 8000ecc:	68bb      	ldr	r3, [r7, #8]
 8000ece:	3301      	adds	r3, #1
 8000ed0:	60bb      	str	r3, [r7, #8]
	while(i <= num){
 8000ed2:	68fa      	ldr	r2, [r7, #12]
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	429a      	cmp	r2, r3
 8000ed8:	ddf2      	ble.n	8000ec0 <get_int_length+0x1c>
	}
	return c;
 8000eda:	68bb      	ldr	r3, [r7, #8]
}
 8000edc:	4618      	mov	r0, r3
 8000ede:	3714      	adds	r7, #20
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee6:	4770      	bx	lr

08000ee8 <init_accel>:
// ---
void init_accel(I2C_HandleTypeDef*);



void init_accel(I2C_HandleTypeDef *hw){
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b088      	sub	sp, #32
 8000eec:	af04      	add	r7, sp, #16
 8000eee:	6078      	str	r0, [r7, #4]
	uint8_t check;

	// -- check if ready
	// check if hal accelerometer is ready --> yeet to a specific address + wait 100ms
//	result = HAL_I2C_IsDeviceReady(hw, MPUWHO_AM_I_REG, 1, 100);
	HAL_I2C_Mem_Read(hw, MPU6050_ADDR, WHO_AM_I_REG, 1, &check, 1, 100);
 8000ef0:	2364      	movs	r3, #100	; 0x64
 8000ef2:	9302      	str	r3, [sp, #8]
 8000ef4:	2301      	movs	r3, #1
 8000ef6:	9301      	str	r3, [sp, #4]
 8000ef8:	f107 030f 	add.w	r3, r7, #15
 8000efc:	9300      	str	r3, [sp, #0]
 8000efe:	2301      	movs	r3, #1
 8000f00:	2275      	movs	r2, #117	; 0x75
 8000f02:	21d0      	movs	r1, #208	; 0xd0
 8000f04:	6878      	ldr	r0, [r7, #4]
 8000f06:	f001 f929 	bl	800215c <HAL_I2C_Mem_Read>
	if(check == 0x68){
 8000f0a:	7bfb      	ldrb	r3, [r7, #15]
 8000f0c:	2b68      	cmp	r3, #104	; 0x68
 8000f0e:	d139      	bne.n	8000f84 <init_accel+0x9c>
		set_speaker_state(true);
 8000f10:	2001      	movs	r0, #1
 8000f12:	f7ff fda5 	bl	8000a60 <set_speaker_state>
		HAL_Delay(100);
 8000f16:	2064      	movs	r0, #100	; 0x64
 8000f18:	f000 fc3a 	bl	8001790 <HAL_Delay>
		set_speaker_state(false);
 8000f1c:	2000      	movs	r0, #0
 8000f1e:	f7ff fd9f 	bl	8000a60 <set_speaker_state>

		// idk what this is for but its important
		check = 0;
 8000f22:	2300      	movs	r3, #0
 8000f24:	73fb      	strb	r3, [r7, #15]
		HAL_I2C_Mem_Write(hw, MPU6050_ADDR, PWR_MGMT_1_REG, 1, &check, 1, 100);
 8000f26:	2364      	movs	r3, #100	; 0x64
 8000f28:	9302      	str	r3, [sp, #8]
 8000f2a:	2301      	movs	r3, #1
 8000f2c:	9301      	str	r3, [sp, #4]
 8000f2e:	f107 030f 	add.w	r3, r7, #15
 8000f32:	9300      	str	r3, [sp, #0]
 8000f34:	2301      	movs	r3, #1
 8000f36:	226b      	movs	r2, #107	; 0x6b
 8000f38:	21d0      	movs	r1, #208	; 0xd0
 8000f3a:	6878      	ldr	r0, [r7, #4]
 8000f3c:	f001 f814 	bl	8001f68 <HAL_I2C_Mem_Write>

		check = 0x07;
 8000f40:	2307      	movs	r3, #7
 8000f42:	73fb      	strb	r3, [r7, #15]
		HAL_I2C_Mem_Write(hw, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &check, 1, 100);
 8000f44:	2364      	movs	r3, #100	; 0x64
 8000f46:	9302      	str	r3, [sp, #8]
 8000f48:	2301      	movs	r3, #1
 8000f4a:	9301      	str	r3, [sp, #4]
 8000f4c:	f107 030f 	add.w	r3, r7, #15
 8000f50:	9300      	str	r3, [sp, #0]
 8000f52:	2301      	movs	r3, #1
 8000f54:	2219      	movs	r2, #25
 8000f56:	21d0      	movs	r1, #208	; 0xd0
 8000f58:	6878      	ldr	r0, [r7, #4]
 8000f5a:	f001 f805 	bl	8001f68 <HAL_I2C_Mem_Write>

		check = RS_ACC_4G;
 8000f5e:	2308      	movs	r3, #8
 8000f60:	73fb      	strb	r3, [r7, #15]
		HAL_I2C_Mem_Write(hw, MPU6050_ADDR, REG_CONFIG_ACC, 1, &check, 1, 100);
 8000f62:	2364      	movs	r3, #100	; 0x64
 8000f64:	9302      	str	r3, [sp, #8]
 8000f66:	2301      	movs	r3, #1
 8000f68:	9301      	str	r3, [sp, #4]
 8000f6a:	f107 030f 	add.w	r3, r7, #15
 8000f6e:	9300      	str	r3, [sp, #0]
 8000f70:	2301      	movs	r3, #1
 8000f72:	221c      	movs	r2, #28
 8000f74:	21d0      	movs	r1, #208	; 0xd0
 8000f76:	6878      	ldr	r0, [r7, #4]
 8000f78:	f000 fff6 	bl	8001f68 <HAL_I2C_Mem_Write>
//		// configuring the accelerometer
//		uint8_t td = RS_ACC_4G;
////		result = HAL_I2C_Mem_Write(hw, (DEVICE_ADDRESS << 1), REG_CONFIG_ACC, 1, &td, 1, 100);
//        HAL_I2C_Mem_Write(hw, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &td, 1, 50);

        ACCEL_ACTIVATED = true;
 8000f7c:	4b05      	ldr	r3, [pc, #20]	; (8000f94 <init_accel+0xac>)
 8000f7e:	2201      	movs	r2, #1
 8000f80:	701a      	strb	r2, [r3, #0]
//		printf("Writing to register 28\n");
//	}else{
//		printf("Failed to write\n");
//	}

}
 8000f82:	e002      	b.n	8000f8a <init_accel+0xa2>
		printf("The device is not ready \n");
 8000f84:	4804      	ldr	r0, [pc, #16]	; (8000f98 <init_accel+0xb0>)
 8000f86:	f003 f887 	bl	8004098 <puts>
}
 8000f8a:	bf00      	nop
 8000f8c:	3710      	adds	r7, #16
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	bd80      	pop	{r7, pc}
 8000f92:	bf00      	nop
 8000f94:	2000017a 	.word	0x2000017a
 8000f98:	08004edc 	.word	0x08004edc

08000f9c <read_accel>:

void read_accel(I2C_HandleTypeDef *hw){
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b088      	sub	sp, #32
 8000fa0:	af04      	add	r7, sp, #16
 8000fa2:	6078      	str	r0, [r7, #4]
//	printf("x axis acceleration %d \n", x_acc);


	uint8_t recData[6];
	//for(int i=0;i<6;i++) recData[i] = 0;
	memset(recData, 0, sizeof(recData));
 8000fa4:	f107 0308 	add.w	r3, r7, #8
 8000fa8:	2206      	movs	r2, #6
 8000faa:	2100      	movs	r1, #0
 8000fac:	4618      	mov	r0, r3
 8000fae:	f003 f87b 	bl	80040a8 <memset>

	HAL_I2C_Mem_Read(hw, MPU6050_ADDR, ACCEL_XOUT_H_REG, I2C_MEMADD_SIZE_8BIT, recData, 6, 100);
 8000fb2:	2364      	movs	r3, #100	; 0x64
 8000fb4:	9302      	str	r3, [sp, #8]
 8000fb6:	2306      	movs	r3, #6
 8000fb8:	9301      	str	r3, [sp, #4]
 8000fba:	f107 0308 	add.w	r3, r7, #8
 8000fbe:	9300      	str	r3, [sp, #0]
 8000fc0:	2301      	movs	r3, #1
 8000fc2:	223b      	movs	r2, #59	; 0x3b
 8000fc4:	21d0      	movs	r1, #208	; 0xd0
 8000fc6:	6878      	ldr	r0, [r7, #4]
 8000fc8:	f001 f8c8 	bl	800215c <HAL_I2C_Mem_Read>
	HAL_Delay(50);
 8000fcc:	2032      	movs	r0, #50	; 0x32
 8000fce:	f000 fbdf 	bl	8001790 <HAL_Delay>

	RAW_AX = (int16_t)(recData[0] << 8 | recData[1]);
 8000fd2:	7a3b      	ldrb	r3, [r7, #8]
 8000fd4:	021b      	lsls	r3, r3, #8
 8000fd6:	b21a      	sxth	r2, r3
 8000fd8:	7a7b      	ldrb	r3, [r7, #9]
 8000fda:	b21b      	sxth	r3, r3
 8000fdc:	4313      	orrs	r3, r2
 8000fde:	b21a      	sxth	r2, r3
 8000fe0:	4b1d      	ldr	r3, [pc, #116]	; (8001058 <read_accel+0xbc>)
 8000fe2:	801a      	strh	r2, [r3, #0]
	RAW_AY = (int16_t)(recData[2] << 8 | recData[3]);
 8000fe4:	7abb      	ldrb	r3, [r7, #10]
 8000fe6:	021b      	lsls	r3, r3, #8
 8000fe8:	b21a      	sxth	r2, r3
 8000fea:	7afb      	ldrb	r3, [r7, #11]
 8000fec:	b21b      	sxth	r3, r3
 8000fee:	4313      	orrs	r3, r2
 8000ff0:	b21a      	sxth	r2, r3
 8000ff2:	4b1a      	ldr	r3, [pc, #104]	; (800105c <read_accel+0xc0>)
 8000ff4:	801a      	strh	r2, [r3, #0]
	RAW_AZ = (int16_t)(recData[4] << 8 | recData[5]);
 8000ff6:	7b3b      	ldrb	r3, [r7, #12]
 8000ff8:	021b      	lsls	r3, r3, #8
 8000ffa:	b21a      	sxth	r2, r3
 8000ffc:	7b7b      	ldrb	r3, [r7, #13]
 8000ffe:	b21b      	sxth	r3, r3
 8001000:	4313      	orrs	r3, r2
 8001002:	b21a      	sxth	r2, r3
 8001004:	4b16      	ldr	r3, [pc, #88]	; (8001060 <read_accel+0xc4>)
 8001006:	801a      	strh	r2, [r3, #0]

	AX = (int16_t)(RAW_AX / 16384);
 8001008:	4b13      	ldr	r3, [pc, #76]	; (8001058 <read_accel+0xbc>)
 800100a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800100e:	2b00      	cmp	r3, #0
 8001010:	da02      	bge.n	8001018 <read_accel+0x7c>
 8001012:	f503 537f 	add.w	r3, r3, #16320	; 0x3fc0
 8001016:	333f      	adds	r3, #63	; 0x3f
 8001018:	139b      	asrs	r3, r3, #14
 800101a:	b21a      	sxth	r2, r3
 800101c:	4b11      	ldr	r3, [pc, #68]	; (8001064 <read_accel+0xc8>)
 800101e:	801a      	strh	r2, [r3, #0]
	AY = (int16_t)(RAW_AY / 16384);
 8001020:	4b0e      	ldr	r3, [pc, #56]	; (800105c <read_accel+0xc0>)
 8001022:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001026:	2b00      	cmp	r3, #0
 8001028:	da02      	bge.n	8001030 <read_accel+0x94>
 800102a:	f503 537f 	add.w	r3, r3, #16320	; 0x3fc0
 800102e:	333f      	adds	r3, #63	; 0x3f
 8001030:	139b      	asrs	r3, r3, #14
 8001032:	b21a      	sxth	r2, r3
 8001034:	4b0c      	ldr	r3, [pc, #48]	; (8001068 <read_accel+0xcc>)
 8001036:	801a      	strh	r2, [r3, #0]
	AZ = (int16_t)(RAW_AZ / 16384);
 8001038:	4b09      	ldr	r3, [pc, #36]	; (8001060 <read_accel+0xc4>)
 800103a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800103e:	2b00      	cmp	r3, #0
 8001040:	da02      	bge.n	8001048 <read_accel+0xac>
 8001042:	f503 537f 	add.w	r3, r3, #16320	; 0x3fc0
 8001046:	333f      	adds	r3, #63	; 0x3f
 8001048:	139b      	asrs	r3, r3, #14
 800104a:	b21a      	sxth	r2, r3
 800104c:	4b07      	ldr	r3, [pc, #28]	; (800106c <read_accel+0xd0>)
 800104e:	801a      	strh	r2, [r3, #0]
}
 8001050:	bf00      	nop
 8001052:	3710      	adds	r7, #16
 8001054:	46bd      	mov	sp, r7
 8001056:	bd80      	pop	{r7, pc}
 8001058:	2000016e 	.word	0x2000016e
 800105c:	20000170 	.word	0x20000170
 8001060:	20000172 	.word	0x20000172
 8001064:	20000174 	.word	0x20000174
 8001068:	20000176 	.word	0x20000176
 800106c:	20000178 	.word	0x20000178

08001070 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001070:	b5b0      	push	{r4, r5, r7, lr}
 8001072:	b09c      	sub	sp, #112	; 0x70
 8001074:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001076:	f000 fb19 	bl	80016ac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800107a:	f000 f8c3 	bl	8001204 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800107e:	f7ff fa85 	bl	800058c <MX_GPIO_Init>
  MX_TIM2_Init();
 8001082:	f000 fa39 	bl	80014f8 <MX_TIM2_Init>
  MX_I2C1_Init();
 8001086:	f7ff fb27 	bl	80006d8 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

	// ----------------------------------- pins for lcd

	// Lcd_PortType ports[] = { D4_GPIO_Port, D5_GPIO_Port, D6_GPIO_Port, D7_GPIO_Port };
	Lcd_PortType ports[] = { GPIOC, GPIOB, GPIOA, GPIOA };
 800108a:	4b4e      	ldr	r3, [pc, #312]	; (80011c4 <main+0x154>)
 800108c:	f107 0450 	add.w	r4, r7, #80	; 0x50
 8001090:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001092:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	// Lcd_PinType pins[] = {D4_Pin, D5_Pin, D6_Pin, D7_Pin};
	Lcd_PinType pins[] = {GPIO_PIN_7, GPIO_PIN_6, GPIO_PIN_7, GPIO_PIN_6};
 8001096:	4a4c      	ldr	r2, [pc, #304]	; (80011c8 <main+0x158>)
 8001098:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800109c:	e892 0003 	ldmia.w	r2, {r0, r1}
 80010a0:	e883 0003 	stmia.w	r3, {r0, r1}
	Lcd_HandleTypeDef lcd;
	// Lcd_create(ports, pins, RS_GPIO_Port, RS_Pin, EN_GPIO_Port, EN_Pin, LCD_4_BIT_MODE);
	lcd = Lcd_create(ports, pins, GPIOB, GPIO_PIN_5, GPIOB, GPIO_PIN_4, LCD_4_BIT_MODE);
 80010a4:	4638      	mov	r0, r7
 80010a6:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80010aa:	f107 0150 	add.w	r1, r7, #80	; 0x50
 80010ae:	2300      	movs	r3, #0
 80010b0:	9303      	str	r3, [sp, #12]
 80010b2:	2310      	movs	r3, #16
 80010b4:	9302      	str	r3, [sp, #8]
 80010b6:	4b45      	ldr	r3, [pc, #276]	; (80011cc <main+0x15c>)
 80010b8:	9301      	str	r3, [sp, #4]
 80010ba:	2320      	movs	r3, #32
 80010bc:	9300      	str	r3, [sp, #0]
 80010be:	4b43      	ldr	r3, [pc, #268]	; (80011cc <main+0x15c>)
 80010c0:	f7ff fb80 	bl	80007c4 <Lcd_create>
 80010c4:	f107 0430 	add.w	r4, r7, #48	; 0x30
 80010c8:	463d      	mov	r5, r7
 80010ca:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80010cc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80010ce:	e895 0003 	ldmia.w	r5, {r0, r1}
 80010d2:	e884 0003 	stmia.w	r4, {r0, r1}
	Lcd_cursor(&lcd, 0,1);
 80010d6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80010da:	2201      	movs	r2, #1
 80010dc:	2100      	movs	r1, #0
 80010de:	4618      	mov	r0, r3
 80010e0:	f7ff fbfc 	bl	80008dc <Lcd_cursor>
	Lcd_string(&lcd, "Peter Zhang");
 80010e4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80010e8:	4939      	ldr	r1, [pc, #228]	; (80011d0 <main+0x160>)
 80010ea:	4618      	mov	r0, r3
 80010ec:	f7ff fbd6 	bl	800089c <Lcd_string>


	// ----------------------------------- pwm for speaker
	// turn on pwm
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 80010f0:	2100      	movs	r1, #0
 80010f2:	4838      	ldr	r0, [pc, #224]	; (80011d4 <main+0x164>)
 80010f4:	f002 fa88 	bl	8003608 <HAL_TIM_PWM_Start>

	// don't let value = 255 (otherwise is 100% of the duty cycle + we just get 0, 1 // high or low

	// ----------------------------------- speaker + clock

  	set_speaker_state(false);
 80010f8:	2000      	movs	r0, #0
 80010fa:	f7ff fcb1 	bl	8000a60 <set_speaker_state>

	// create clock object
  	  // sec, min, hrr, day, mon, year
  	// int clock[6] = {0, 0, 0, 0, 0, 0};
	int clock[6] = {0, 19, 15, 16, NOV, 2023};
 80010fe:	2300      	movs	r3, #0
 8001100:	61bb      	str	r3, [r7, #24]
 8001102:	2313      	movs	r3, #19
 8001104:	61fb      	str	r3, [r7, #28]
 8001106:	230f      	movs	r3, #15
 8001108:	623b      	str	r3, [r7, #32]
 800110a:	2310      	movs	r3, #16
 800110c:	627b      	str	r3, [r7, #36]	; 0x24
 800110e:	230a      	movs	r3, #10
 8001110:	62bb      	str	r3, [r7, #40]	; 0x28
 8001112:	f240 73e7 	movw	r3, #2023	; 0x7e7
 8001116:	62fb      	str	r3, [r7, #44]	; 0x2c

	set_clock_time_arr(clock);
 8001118:	f107 0318 	add.w	r3, r7, #24
 800111c:	4618      	mov	r0, r3
 800111e:	f7ff fd9d 	bl	8000c5c <set_clock_time_arr>
	C_START_TIME = HAL_GetTick();
 8001122:	f000 fb29 	bl	8001778 <HAL_GetTick>
 8001126:	4603      	mov	r3, r0
 8001128:	4a2b      	ldr	r2, [pc, #172]	; (80011d8 <main+0x168>)
 800112a:	6013      	str	r3, [r2, #0]


	Lcd_clear(&lcd);
 800112c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001130:	4618      	mov	r0, r3
 8001132:	f7ff fbed 	bl	8000910 <Lcd_clear>


	//TODO - SPEAKER TESTING
	set_alarm(0, 0, 0);
 8001136:	2200      	movs	r2, #0
 8001138:	2100      	movs	r1, #0
 800113a:	2000      	movs	r0, #0
 800113c:	f7ff fcc2 	bl	8000ac4 <set_alarm>
	set_speaker_state(true);
 8001140:	2001      	movs	r0, #1
 8001142:	f7ff fc8d 	bl	8000a60 <set_speaker_state>


	// ------------------------------------ accelerometer
	init_accel(&hi2c1);
 8001146:	4825      	ldr	r0, [pc, #148]	; (80011dc <main+0x16c>)
 8001148:	f7ff fece 	bl	8000ee8 <init_accel>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	// --- time
	PREV_TIME = CURRENT_TIME;
 800114c:	4b24      	ldr	r3, [pc, #144]	; (80011e0 <main+0x170>)
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	4a24      	ldr	r2, [pc, #144]	; (80011e4 <main+0x174>)
 8001152:	6013      	str	r3, [r2, #0]
	CURRENT_TIME = HAL_GetTick();
 8001154:	f000 fb10 	bl	8001778 <HAL_GetTick>
 8001158:	4603      	mov	r3, r0
 800115a:	4a21      	ldr	r2, [pc, #132]	; (80011e0 <main+0x170>)
 800115c:	6013      	str	r3, [r2, #0]
	DELTA_TIME += CURRENT_TIME - PREV_TIME;
 800115e:	4b20      	ldr	r3, [pc, #128]	; (80011e0 <main+0x170>)
 8001160:	681a      	ldr	r2, [r3, #0]
 8001162:	4b20      	ldr	r3, [pc, #128]	; (80011e4 <main+0x174>)
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	1ad2      	subs	r2, r2, r3
 8001168:	4b1f      	ldr	r3, [pc, #124]	; (80011e8 <main+0x178>)
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	4413      	add	r3, r2
 800116e:	4a1e      	ldr	r2, [pc, #120]	; (80011e8 <main+0x178>)
 8001170:	6013      	str	r3, [r2, #0]
	//	update_speaker_limit();


	// --- speaker
	// TODO - something is going wrong here :(((
	update_speaker_limit();
 8001172:	f7ff fd27 	bl	8000bc4 <update_speaker_limit>
	ALARM[MIN] = SPEAKER_ACTIVE_TIMER[SEC];
 8001176:	2200      	movs	r2, #0
 8001178:	2101      	movs	r1, #1
 800117a:	4b1c      	ldr	r3, [pc, #112]	; (80011ec <main+0x17c>)
 800117c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001180:	4a1b      	ldr	r2, [pc, #108]	; (80011f0 <main+0x180>)
 8001182:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	ALARM[HRR] = (int) SPEAKER_ACTIVE;
 8001186:	4b1b      	ldr	r3, [pc, #108]	; (80011f4 <main+0x184>)
 8001188:	781b      	ldrb	r3, [r3, #0]
 800118a:	2202      	movs	r2, #2
 800118c:	4619      	mov	r1, r3
 800118e:	4b18      	ldr	r3, [pc, #96]	; (80011f0 <main+0x180>)
 8001190:	f843 1022 	str.w	r1, [r3, r2, lsl #2]


	// --- clock
	second_update_clock(CLOCK);
 8001194:	4818      	ldr	r0, [pc, #96]	; (80011f8 <main+0x188>)
 8001196:	f7ff fd81 	bl	8000c9c <second_update_clock>
//	Lcd_cursor(&lcd, 0, 7);
//	Lcd_int(&lcd, clock[0]);


	// --- accelerometer
	read_accel(&hi2c1);
 800119a:	4810      	ldr	r0, [pc, #64]	; (80011dc <main+0x16c>)
 800119c:	f7ff fefe 	bl	8000f9c <read_accel>
////		Lcd_clear(&lcd);
//		Lcd_cursor(&lcd, 0, 1);
//		Lcd_string(&lcd, "cringe cringe");
//	}else{
		// output acc values onto lcd
		display_info_i(&lcd, A_LEFT, AX, A_LEFT, AY);
 80011a0:	2100      	movs	r1, #0
 80011a2:	4b16      	ldr	r3, [pc, #88]	; (80011fc <main+0x18c>)
 80011a4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80011a8:	461c      	mov	r4, r3
 80011aa:	2200      	movs	r2, #0
 80011ac:	4b14      	ldr	r3, [pc, #80]	; (8001200 <main+0x190>)
 80011ae:	f9b3 3000 	ldrsh.w	r3, [r3]
 80011b2:	f107 0030 	add.w	r0, r7, #48	; 0x30
 80011b6:	9300      	str	r3, [sp, #0]
 80011b8:	4613      	mov	r3, r2
 80011ba:	4622      	mov	r2, r4
 80011bc:	f7ff fe22 	bl	8000e04 <display_info_i>
	PREV_TIME = CURRENT_TIME;
 80011c0:	e7c4      	b.n	800114c <main+0xdc>
 80011c2:	bf00      	nop
 80011c4:	08004f04 	.word	0x08004f04
 80011c8:	08004f14 	.word	0x08004f14
 80011cc:	40020400 	.word	0x40020400
 80011d0:	08004ef8 	.word	0x08004ef8
 80011d4:	20000180 	.word	0x20000180
 80011d8:	2000010c 	.word	0x2000010c
 80011dc:	200000b8 	.word	0x200000b8
 80011e0:	20000110 	.word	0x20000110
 80011e4:	20000114 	.word	0x20000114
 80011e8:	20000118 	.word	0x20000118
 80011ec:	20000154 	.word	0x20000154
 80011f0:	2000013c 	.word	0x2000013c
 80011f4:	20000134 	.word	0x20000134
 80011f8:	2000011c 	.word	0x2000011c
 80011fc:	20000174 	.word	0x20000174
 8001200:	20000176 	.word	0x20000176

08001204 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b094      	sub	sp, #80	; 0x50
 8001208:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800120a:	f107 0320 	add.w	r3, r7, #32
 800120e:	2230      	movs	r2, #48	; 0x30
 8001210:	2100      	movs	r1, #0
 8001212:	4618      	mov	r0, r3
 8001214:	f002 ff48 	bl	80040a8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001218:	f107 030c 	add.w	r3, r7, #12
 800121c:	2200      	movs	r2, #0
 800121e:	601a      	str	r2, [r3, #0]
 8001220:	605a      	str	r2, [r3, #4]
 8001222:	609a      	str	r2, [r3, #8]
 8001224:	60da      	str	r2, [r3, #12]
 8001226:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001228:	2300      	movs	r3, #0
 800122a:	60bb      	str	r3, [r7, #8]
 800122c:	4b29      	ldr	r3, [pc, #164]	; (80012d4 <SystemClock_Config+0xd0>)
 800122e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001230:	4a28      	ldr	r2, [pc, #160]	; (80012d4 <SystemClock_Config+0xd0>)
 8001232:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001236:	6413      	str	r3, [r2, #64]	; 0x40
 8001238:	4b26      	ldr	r3, [pc, #152]	; (80012d4 <SystemClock_Config+0xd0>)
 800123a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800123c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001240:	60bb      	str	r3, [r7, #8]
 8001242:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001244:	2300      	movs	r3, #0
 8001246:	607b      	str	r3, [r7, #4]
 8001248:	4b23      	ldr	r3, [pc, #140]	; (80012d8 <SystemClock_Config+0xd4>)
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001250:	4a21      	ldr	r2, [pc, #132]	; (80012d8 <SystemClock_Config+0xd4>)
 8001252:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001256:	6013      	str	r3, [r2, #0]
 8001258:	4b1f      	ldr	r3, [pc, #124]	; (80012d8 <SystemClock_Config+0xd4>)
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001260:	607b      	str	r3, [r7, #4]
 8001262:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001264:	2302      	movs	r3, #2
 8001266:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001268:	2301      	movs	r3, #1
 800126a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800126c:	2310      	movs	r3, #16
 800126e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001270:	2302      	movs	r3, #2
 8001272:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001274:	2300      	movs	r3, #0
 8001276:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001278:	2308      	movs	r3, #8
 800127a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 80;
 800127c:	2350      	movs	r3, #80	; 0x50
 800127e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001280:	2302      	movs	r3, #2
 8001282:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001284:	2307      	movs	r3, #7
 8001286:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001288:	f107 0320 	add.w	r3, r7, #32
 800128c:	4618      	mov	r0, r3
 800128e:	f001 fce7 	bl	8002c60 <HAL_RCC_OscConfig>
 8001292:	4603      	mov	r3, r0
 8001294:	2b00      	cmp	r3, #0
 8001296:	d001      	beq.n	800129c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001298:	f000 f820 	bl	80012dc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800129c:	230f      	movs	r3, #15
 800129e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80012a0:	2302      	movs	r3, #2
 80012a2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012a4:	2300      	movs	r3, #0
 80012a6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80012a8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012ac:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV16;
 80012ae:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80012b2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80012b4:	f107 030c 	add.w	r3, r7, #12
 80012b8:	2102      	movs	r1, #2
 80012ba:	4618      	mov	r0, r3
 80012bc:	f001 ff48 	bl	8003150 <HAL_RCC_ClockConfig>
 80012c0:	4603      	mov	r3, r0
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d001      	beq.n	80012ca <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80012c6:	f000 f809 	bl	80012dc <Error_Handler>
  }
}
 80012ca:	bf00      	nop
 80012cc:	3750      	adds	r7, #80	; 0x50
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bd80      	pop	{r7, pc}
 80012d2:	bf00      	nop
 80012d4:	40023800 	.word	0x40023800
 80012d8:	40007000 	.word	0x40007000

080012dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012dc:	b480      	push	{r7}
 80012de:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012e0:	b672      	cpsid	i
}
 80012e2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80012e4:	e7fe      	b.n	80012e4 <Error_Handler+0x8>
	...

080012e8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b082      	sub	sp, #8
 80012ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012ee:	2300      	movs	r3, #0
 80012f0:	607b      	str	r3, [r7, #4]
 80012f2:	4b10      	ldr	r3, [pc, #64]	; (8001334 <HAL_MspInit+0x4c>)
 80012f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012f6:	4a0f      	ldr	r2, [pc, #60]	; (8001334 <HAL_MspInit+0x4c>)
 80012f8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012fc:	6453      	str	r3, [r2, #68]	; 0x44
 80012fe:	4b0d      	ldr	r3, [pc, #52]	; (8001334 <HAL_MspInit+0x4c>)
 8001300:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001302:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001306:	607b      	str	r3, [r7, #4]
 8001308:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800130a:	2300      	movs	r3, #0
 800130c:	603b      	str	r3, [r7, #0]
 800130e:	4b09      	ldr	r3, [pc, #36]	; (8001334 <HAL_MspInit+0x4c>)
 8001310:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001312:	4a08      	ldr	r2, [pc, #32]	; (8001334 <HAL_MspInit+0x4c>)
 8001314:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001318:	6413      	str	r3, [r2, #64]	; 0x40
 800131a:	4b06      	ldr	r3, [pc, #24]	; (8001334 <HAL_MspInit+0x4c>)
 800131c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800131e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001322:	603b      	str	r3, [r7, #0]
 8001324:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001326:	2007      	movs	r0, #7
 8001328:	f000 fb08 	bl	800193c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800132c:	bf00      	nop
 800132e:	3708      	adds	r7, #8
 8001330:	46bd      	mov	sp, r7
 8001332:	bd80      	pop	{r7, pc}
 8001334:	40023800 	.word	0x40023800

08001338 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001338:	b480      	push	{r7}
 800133a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800133c:	e7fe      	b.n	800133c <NMI_Handler+0x4>

0800133e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800133e:	b480      	push	{r7}
 8001340:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001342:	e7fe      	b.n	8001342 <HardFault_Handler+0x4>

08001344 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001344:	b480      	push	{r7}
 8001346:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001348:	e7fe      	b.n	8001348 <MemManage_Handler+0x4>

0800134a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800134a:	b480      	push	{r7}
 800134c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800134e:	e7fe      	b.n	800134e <BusFault_Handler+0x4>

08001350 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001350:	b480      	push	{r7}
 8001352:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001354:	e7fe      	b.n	8001354 <UsageFault_Handler+0x4>

08001356 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001356:	b480      	push	{r7}
 8001358:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800135a:	bf00      	nop
 800135c:	46bd      	mov	sp, r7
 800135e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001362:	4770      	bx	lr

08001364 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001364:	b480      	push	{r7}
 8001366:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001368:	bf00      	nop
 800136a:	46bd      	mov	sp, r7
 800136c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001370:	4770      	bx	lr

08001372 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001372:	b480      	push	{r7}
 8001374:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001376:	bf00      	nop
 8001378:	46bd      	mov	sp, r7
 800137a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137e:	4770      	bx	lr

08001380 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001384:	f000 f9e4 	bl	8001750 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001388:	bf00      	nop
 800138a:	bd80      	pop	{r7, pc}

0800138c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	b086      	sub	sp, #24
 8001390:	af00      	add	r7, sp, #0
 8001392:	60f8      	str	r0, [r7, #12]
 8001394:	60b9      	str	r1, [r7, #8]
 8001396:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001398:	2300      	movs	r3, #0
 800139a:	617b      	str	r3, [r7, #20]
 800139c:	e00a      	b.n	80013b4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800139e:	f3af 8000 	nop.w
 80013a2:	4601      	mov	r1, r0
 80013a4:	68bb      	ldr	r3, [r7, #8]
 80013a6:	1c5a      	adds	r2, r3, #1
 80013a8:	60ba      	str	r2, [r7, #8]
 80013aa:	b2ca      	uxtb	r2, r1
 80013ac:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013ae:	697b      	ldr	r3, [r7, #20]
 80013b0:	3301      	adds	r3, #1
 80013b2:	617b      	str	r3, [r7, #20]
 80013b4:	697a      	ldr	r2, [r7, #20]
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	429a      	cmp	r2, r3
 80013ba:	dbf0      	blt.n	800139e <_read+0x12>
  }

  return len;
 80013bc:	687b      	ldr	r3, [r7, #4]
}
 80013be:	4618      	mov	r0, r3
 80013c0:	3718      	adds	r7, #24
 80013c2:	46bd      	mov	sp, r7
 80013c4:	bd80      	pop	{r7, pc}

080013c6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80013c6:	b580      	push	{r7, lr}
 80013c8:	b086      	sub	sp, #24
 80013ca:	af00      	add	r7, sp, #0
 80013cc:	60f8      	str	r0, [r7, #12]
 80013ce:	60b9      	str	r1, [r7, #8]
 80013d0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013d2:	2300      	movs	r3, #0
 80013d4:	617b      	str	r3, [r7, #20]
 80013d6:	e009      	b.n	80013ec <_write+0x26>
  {
    __io_putchar(*ptr++);
 80013d8:	68bb      	ldr	r3, [r7, #8]
 80013da:	1c5a      	adds	r2, r3, #1
 80013dc:	60ba      	str	r2, [r7, #8]
 80013de:	781b      	ldrb	r3, [r3, #0]
 80013e0:	4618      	mov	r0, r3
 80013e2:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013e6:	697b      	ldr	r3, [r7, #20]
 80013e8:	3301      	adds	r3, #1
 80013ea:	617b      	str	r3, [r7, #20]
 80013ec:	697a      	ldr	r2, [r7, #20]
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	429a      	cmp	r2, r3
 80013f2:	dbf1      	blt.n	80013d8 <_write+0x12>
  }
  return len;
 80013f4:	687b      	ldr	r3, [r7, #4]
}
 80013f6:	4618      	mov	r0, r3
 80013f8:	3718      	adds	r7, #24
 80013fa:	46bd      	mov	sp, r7
 80013fc:	bd80      	pop	{r7, pc}

080013fe <_close>:

int _close(int file)
{
 80013fe:	b480      	push	{r7}
 8001400:	b083      	sub	sp, #12
 8001402:	af00      	add	r7, sp, #0
 8001404:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001406:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800140a:	4618      	mov	r0, r3
 800140c:	370c      	adds	r7, #12
 800140e:	46bd      	mov	sp, r7
 8001410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001414:	4770      	bx	lr

08001416 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001416:	b480      	push	{r7}
 8001418:	b083      	sub	sp, #12
 800141a:	af00      	add	r7, sp, #0
 800141c:	6078      	str	r0, [r7, #4]
 800141e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001420:	683b      	ldr	r3, [r7, #0]
 8001422:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001426:	605a      	str	r2, [r3, #4]
  return 0;
 8001428:	2300      	movs	r3, #0
}
 800142a:	4618      	mov	r0, r3
 800142c:	370c      	adds	r7, #12
 800142e:	46bd      	mov	sp, r7
 8001430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001434:	4770      	bx	lr

08001436 <_isatty>:

int _isatty(int file)
{
 8001436:	b480      	push	{r7}
 8001438:	b083      	sub	sp, #12
 800143a:	af00      	add	r7, sp, #0
 800143c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800143e:	2301      	movs	r3, #1
}
 8001440:	4618      	mov	r0, r3
 8001442:	370c      	adds	r7, #12
 8001444:	46bd      	mov	sp, r7
 8001446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144a:	4770      	bx	lr

0800144c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800144c:	b480      	push	{r7}
 800144e:	b085      	sub	sp, #20
 8001450:	af00      	add	r7, sp, #0
 8001452:	60f8      	str	r0, [r7, #12]
 8001454:	60b9      	str	r1, [r7, #8]
 8001456:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001458:	2300      	movs	r3, #0
}
 800145a:	4618      	mov	r0, r3
 800145c:	3714      	adds	r7, #20
 800145e:	46bd      	mov	sp, r7
 8001460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001464:	4770      	bx	lr
	...

08001468 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	b086      	sub	sp, #24
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001470:	4a14      	ldr	r2, [pc, #80]	; (80014c4 <_sbrk+0x5c>)
 8001472:	4b15      	ldr	r3, [pc, #84]	; (80014c8 <_sbrk+0x60>)
 8001474:	1ad3      	subs	r3, r2, r3
 8001476:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001478:	697b      	ldr	r3, [r7, #20]
 800147a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800147c:	4b13      	ldr	r3, [pc, #76]	; (80014cc <_sbrk+0x64>)
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	2b00      	cmp	r3, #0
 8001482:	d102      	bne.n	800148a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001484:	4b11      	ldr	r3, [pc, #68]	; (80014cc <_sbrk+0x64>)
 8001486:	4a12      	ldr	r2, [pc, #72]	; (80014d0 <_sbrk+0x68>)
 8001488:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800148a:	4b10      	ldr	r3, [pc, #64]	; (80014cc <_sbrk+0x64>)
 800148c:	681a      	ldr	r2, [r3, #0]
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	4413      	add	r3, r2
 8001492:	693a      	ldr	r2, [r7, #16]
 8001494:	429a      	cmp	r2, r3
 8001496:	d207      	bcs.n	80014a8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001498:	f002 fe0e 	bl	80040b8 <__errno>
 800149c:	4603      	mov	r3, r0
 800149e:	220c      	movs	r2, #12
 80014a0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80014a2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80014a6:	e009      	b.n	80014bc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80014a8:	4b08      	ldr	r3, [pc, #32]	; (80014cc <_sbrk+0x64>)
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80014ae:	4b07      	ldr	r3, [pc, #28]	; (80014cc <_sbrk+0x64>)
 80014b0:	681a      	ldr	r2, [r3, #0]
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	4413      	add	r3, r2
 80014b6:	4a05      	ldr	r2, [pc, #20]	; (80014cc <_sbrk+0x64>)
 80014b8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80014ba:	68fb      	ldr	r3, [r7, #12]
}
 80014bc:	4618      	mov	r0, r3
 80014be:	3718      	adds	r7, #24
 80014c0:	46bd      	mov	sp, r7
 80014c2:	bd80      	pop	{r7, pc}
 80014c4:	20018000 	.word	0x20018000
 80014c8:	00000400 	.word	0x00000400
 80014cc:	2000017c 	.word	0x2000017c
 80014d0:	20000318 	.word	0x20000318

080014d4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80014d4:	b480      	push	{r7}
 80014d6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80014d8:	4b06      	ldr	r3, [pc, #24]	; (80014f4 <SystemInit+0x20>)
 80014da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80014de:	4a05      	ldr	r2, [pc, #20]	; (80014f4 <SystemInit+0x20>)
 80014e0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80014e4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80014e8:	bf00      	nop
 80014ea:	46bd      	mov	sp, r7
 80014ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f0:	4770      	bx	lr
 80014f2:	bf00      	nop
 80014f4:	e000ed00 	.word	0xe000ed00

080014f8 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b08a      	sub	sp, #40	; 0x28
 80014fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014fe:	f107 0320 	add.w	r3, r7, #32
 8001502:	2200      	movs	r2, #0
 8001504:	601a      	str	r2, [r3, #0]
 8001506:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001508:	1d3b      	adds	r3, r7, #4
 800150a:	2200      	movs	r2, #0
 800150c:	601a      	str	r2, [r3, #0]
 800150e:	605a      	str	r2, [r3, #4]
 8001510:	609a      	str	r2, [r3, #8]
 8001512:	60da      	str	r2, [r3, #12]
 8001514:	611a      	str	r2, [r3, #16]
 8001516:	615a      	str	r2, [r3, #20]
 8001518:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800151a:	4b22      	ldr	r3, [pc, #136]	; (80015a4 <MX_TIM2_Init+0xac>)
 800151c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001520:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 692-1;
 8001522:	4b20      	ldr	r3, [pc, #128]	; (80015a4 <MX_TIM2_Init+0xac>)
 8001524:	f240 22b3 	movw	r2, #691	; 0x2b3
 8001528:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800152a:	4b1e      	ldr	r3, [pc, #120]	; (80015a4 <MX_TIM2_Init+0xac>)
 800152c:	2200      	movs	r2, #0
 800152e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 255-1;
 8001530:	4b1c      	ldr	r3, [pc, #112]	; (80015a4 <MX_TIM2_Init+0xac>)
 8001532:	22fe      	movs	r2, #254	; 0xfe
 8001534:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001536:	4b1b      	ldr	r3, [pc, #108]	; (80015a4 <MX_TIM2_Init+0xac>)
 8001538:	2200      	movs	r2, #0
 800153a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800153c:	4b19      	ldr	r3, [pc, #100]	; (80015a4 <MX_TIM2_Init+0xac>)
 800153e:	2200      	movs	r2, #0
 8001540:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001542:	4818      	ldr	r0, [pc, #96]	; (80015a4 <MX_TIM2_Init+0xac>)
 8001544:	f002 f810 	bl	8003568 <HAL_TIM_PWM_Init>
 8001548:	4603      	mov	r3, r0
 800154a:	2b00      	cmp	r3, #0
 800154c:	d001      	beq.n	8001552 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 800154e:	f7ff fec5 	bl	80012dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001552:	2300      	movs	r3, #0
 8001554:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001556:	2300      	movs	r3, #0
 8001558:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800155a:	f107 0320 	add.w	r3, r7, #32
 800155e:	4619      	mov	r1, r3
 8001560:	4810      	ldr	r0, [pc, #64]	; (80015a4 <MX_TIM2_Init+0xac>)
 8001562:	f002 fbf5 	bl	8003d50 <HAL_TIMEx_MasterConfigSynchronization>
 8001566:	4603      	mov	r3, r0
 8001568:	2b00      	cmp	r3, #0
 800156a:	d001      	beq.n	8001570 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 800156c:	f7ff feb6 	bl	80012dc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001570:	2360      	movs	r3, #96	; 0x60
 8001572:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001574:	2300      	movs	r3, #0
 8001576:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001578:	2300      	movs	r3, #0
 800157a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800157c:	2300      	movs	r3, #0
 800157e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001580:	1d3b      	adds	r3, r7, #4
 8001582:	2200      	movs	r2, #0
 8001584:	4619      	mov	r1, r3
 8001586:	4807      	ldr	r0, [pc, #28]	; (80015a4 <MX_TIM2_Init+0xac>)
 8001588:	f002 f8ee 	bl	8003768 <HAL_TIM_PWM_ConfigChannel>
 800158c:	4603      	mov	r3, r0
 800158e:	2b00      	cmp	r3, #0
 8001590:	d001      	beq.n	8001596 <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 8001592:	f7ff fea3 	bl	80012dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001596:	4803      	ldr	r0, [pc, #12]	; (80015a4 <MX_TIM2_Init+0xac>)
 8001598:	f000 f826 	bl	80015e8 <HAL_TIM_MspPostInit>

}
 800159c:	bf00      	nop
 800159e:	3728      	adds	r7, #40	; 0x28
 80015a0:	46bd      	mov	sp, r7
 80015a2:	bd80      	pop	{r7, pc}
 80015a4:	20000180 	.word	0x20000180

080015a8 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 80015a8:	b480      	push	{r7}
 80015aa:	b085      	sub	sp, #20
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80015b8:	d10d      	bne.n	80015d6 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80015ba:	2300      	movs	r3, #0
 80015bc:	60fb      	str	r3, [r7, #12]
 80015be:	4b09      	ldr	r3, [pc, #36]	; (80015e4 <HAL_TIM_PWM_MspInit+0x3c>)
 80015c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015c2:	4a08      	ldr	r2, [pc, #32]	; (80015e4 <HAL_TIM_PWM_MspInit+0x3c>)
 80015c4:	f043 0301 	orr.w	r3, r3, #1
 80015c8:	6413      	str	r3, [r2, #64]	; 0x40
 80015ca:	4b06      	ldr	r3, [pc, #24]	; (80015e4 <HAL_TIM_PWM_MspInit+0x3c>)
 80015cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ce:	f003 0301 	and.w	r3, r3, #1
 80015d2:	60fb      	str	r3, [r7, #12]
 80015d4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 80015d6:	bf00      	nop
 80015d8:	3714      	adds	r7, #20
 80015da:	46bd      	mov	sp, r7
 80015dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e0:	4770      	bx	lr
 80015e2:	bf00      	nop
 80015e4:	40023800 	.word	0x40023800

080015e8 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b088      	sub	sp, #32
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015f0:	f107 030c 	add.w	r3, r7, #12
 80015f4:	2200      	movs	r2, #0
 80015f6:	601a      	str	r2, [r3, #0]
 80015f8:	605a      	str	r2, [r3, #4]
 80015fa:	609a      	str	r2, [r3, #8]
 80015fc:	60da      	str	r2, [r3, #12]
 80015fe:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001608:	d11d      	bne.n	8001646 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800160a:	2300      	movs	r3, #0
 800160c:	60bb      	str	r3, [r7, #8]
 800160e:	4b10      	ldr	r3, [pc, #64]	; (8001650 <HAL_TIM_MspPostInit+0x68>)
 8001610:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001612:	4a0f      	ldr	r2, [pc, #60]	; (8001650 <HAL_TIM_MspPostInit+0x68>)
 8001614:	f043 0301 	orr.w	r3, r3, #1
 8001618:	6313      	str	r3, [r2, #48]	; 0x30
 800161a:	4b0d      	ldr	r3, [pc, #52]	; (8001650 <HAL_TIM_MspPostInit+0x68>)
 800161c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800161e:	f003 0301 	and.w	r3, r3, #1
 8001622:	60bb      	str	r3, [r7, #8]
 8001624:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001626:	2301      	movs	r3, #1
 8001628:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800162a:	2302      	movs	r3, #2
 800162c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800162e:	2300      	movs	r3, #0
 8001630:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001632:	2300      	movs	r3, #0
 8001634:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001636:	2301      	movs	r3, #1
 8001638:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800163a:	f107 030c 	add.w	r3, r7, #12
 800163e:	4619      	mov	r1, r3
 8001640:	4804      	ldr	r0, [pc, #16]	; (8001654 <HAL_TIM_MspPostInit+0x6c>)
 8001642:	f000 f9af 	bl	80019a4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001646:	bf00      	nop
 8001648:	3720      	adds	r7, #32
 800164a:	46bd      	mov	sp, r7
 800164c:	bd80      	pop	{r7, pc}
 800164e:	bf00      	nop
 8001650:	40023800 	.word	0x40023800
 8001654:	40020000 	.word	0x40020000

08001658 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001658:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001690 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800165c:	480d      	ldr	r0, [pc, #52]	; (8001694 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800165e:	490e      	ldr	r1, [pc, #56]	; (8001698 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001660:	4a0e      	ldr	r2, [pc, #56]	; (800169c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001662:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001664:	e002      	b.n	800166c <LoopCopyDataInit>

08001666 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001666:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001668:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800166a:	3304      	adds	r3, #4

0800166c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800166c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800166e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001670:	d3f9      	bcc.n	8001666 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001672:	4a0b      	ldr	r2, [pc, #44]	; (80016a0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001674:	4c0b      	ldr	r4, [pc, #44]	; (80016a4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001676:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001678:	e001      	b.n	800167e <LoopFillZerobss>

0800167a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800167a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800167c:	3204      	adds	r2, #4

0800167e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800167e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001680:	d3fb      	bcc.n	800167a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001682:	f7ff ff27 	bl	80014d4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001686:	f002 fd1d 	bl	80040c4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800168a:	f7ff fcf1 	bl	8001070 <main>
  bx  lr    
 800168e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001690:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001694:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001698:	2000009c 	.word	0x2000009c
  ldr r2, =_sidata
 800169c:	08004f7c 	.word	0x08004f7c
  ldr r2, =_sbss
 80016a0:	2000009c 	.word	0x2000009c
  ldr r4, =_ebss
 80016a4:	20000318 	.word	0x20000318

080016a8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80016a8:	e7fe      	b.n	80016a8 <ADC_IRQHandler>
	...

080016ac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80016b0:	4b0e      	ldr	r3, [pc, #56]	; (80016ec <HAL_Init+0x40>)
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	4a0d      	ldr	r2, [pc, #52]	; (80016ec <HAL_Init+0x40>)
 80016b6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80016ba:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80016bc:	4b0b      	ldr	r3, [pc, #44]	; (80016ec <HAL_Init+0x40>)
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	4a0a      	ldr	r2, [pc, #40]	; (80016ec <HAL_Init+0x40>)
 80016c2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80016c6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80016c8:	4b08      	ldr	r3, [pc, #32]	; (80016ec <HAL_Init+0x40>)
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	4a07      	ldr	r2, [pc, #28]	; (80016ec <HAL_Init+0x40>)
 80016ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016d2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80016d4:	2003      	movs	r0, #3
 80016d6:	f000 f931 	bl	800193c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80016da:	2000      	movs	r0, #0
 80016dc:	f000 f808 	bl	80016f0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80016e0:	f7ff fe02 	bl	80012e8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80016e4:	2300      	movs	r3, #0
}
 80016e6:	4618      	mov	r0, r3
 80016e8:	bd80      	pop	{r7, pc}
 80016ea:	bf00      	nop
 80016ec:	40023c00 	.word	0x40023c00

080016f0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b082      	sub	sp, #8
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80016f8:	4b12      	ldr	r3, [pc, #72]	; (8001744 <HAL_InitTick+0x54>)
 80016fa:	681a      	ldr	r2, [r3, #0]
 80016fc:	4b12      	ldr	r3, [pc, #72]	; (8001748 <HAL_InitTick+0x58>)
 80016fe:	781b      	ldrb	r3, [r3, #0]
 8001700:	4619      	mov	r1, r3
 8001702:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001706:	fbb3 f3f1 	udiv	r3, r3, r1
 800170a:	fbb2 f3f3 	udiv	r3, r2, r3
 800170e:	4618      	mov	r0, r3
 8001710:	f000 f93b 	bl	800198a <HAL_SYSTICK_Config>
 8001714:	4603      	mov	r3, r0
 8001716:	2b00      	cmp	r3, #0
 8001718:	d001      	beq.n	800171e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800171a:	2301      	movs	r3, #1
 800171c:	e00e      	b.n	800173c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	2b0f      	cmp	r3, #15
 8001722:	d80a      	bhi.n	800173a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001724:	2200      	movs	r2, #0
 8001726:	6879      	ldr	r1, [r7, #4]
 8001728:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800172c:	f000 f911 	bl	8001952 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001730:	4a06      	ldr	r2, [pc, #24]	; (800174c <HAL_InitTick+0x5c>)
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001736:	2300      	movs	r3, #0
 8001738:	e000      	b.n	800173c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800173a:	2301      	movs	r3, #1
}
 800173c:	4618      	mov	r0, r3
 800173e:	3708      	adds	r7, #8
 8001740:	46bd      	mov	sp, r7
 8001742:	bd80      	pop	{r7, pc}
 8001744:	20000034 	.word	0x20000034
 8001748:	2000003c 	.word	0x2000003c
 800174c:	20000038 	.word	0x20000038

08001750 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001750:	b480      	push	{r7}
 8001752:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001754:	4b06      	ldr	r3, [pc, #24]	; (8001770 <HAL_IncTick+0x20>)
 8001756:	781b      	ldrb	r3, [r3, #0]
 8001758:	461a      	mov	r2, r3
 800175a:	4b06      	ldr	r3, [pc, #24]	; (8001774 <HAL_IncTick+0x24>)
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	4413      	add	r3, r2
 8001760:	4a04      	ldr	r2, [pc, #16]	; (8001774 <HAL_IncTick+0x24>)
 8001762:	6013      	str	r3, [r2, #0]
}
 8001764:	bf00      	nop
 8001766:	46bd      	mov	sp, r7
 8001768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176c:	4770      	bx	lr
 800176e:	bf00      	nop
 8001770:	2000003c 	.word	0x2000003c
 8001774:	200001c8 	.word	0x200001c8

08001778 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001778:	b480      	push	{r7}
 800177a:	af00      	add	r7, sp, #0
  return uwTick;
 800177c:	4b03      	ldr	r3, [pc, #12]	; (800178c <HAL_GetTick+0x14>)
 800177e:	681b      	ldr	r3, [r3, #0]
}
 8001780:	4618      	mov	r0, r3
 8001782:	46bd      	mov	sp, r7
 8001784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001788:	4770      	bx	lr
 800178a:	bf00      	nop
 800178c:	200001c8 	.word	0x200001c8

08001790 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	b084      	sub	sp, #16
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001798:	f7ff ffee 	bl	8001778 <HAL_GetTick>
 800179c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80017a8:	d005      	beq.n	80017b6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80017aa:	4b0a      	ldr	r3, [pc, #40]	; (80017d4 <HAL_Delay+0x44>)
 80017ac:	781b      	ldrb	r3, [r3, #0]
 80017ae:	461a      	mov	r2, r3
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	4413      	add	r3, r2
 80017b4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80017b6:	bf00      	nop
 80017b8:	f7ff ffde 	bl	8001778 <HAL_GetTick>
 80017bc:	4602      	mov	r2, r0
 80017be:	68bb      	ldr	r3, [r7, #8]
 80017c0:	1ad3      	subs	r3, r2, r3
 80017c2:	68fa      	ldr	r2, [r7, #12]
 80017c4:	429a      	cmp	r2, r3
 80017c6:	d8f7      	bhi.n	80017b8 <HAL_Delay+0x28>
  {
  }
}
 80017c8:	bf00      	nop
 80017ca:	bf00      	nop
 80017cc:	3710      	adds	r7, #16
 80017ce:	46bd      	mov	sp, r7
 80017d0:	bd80      	pop	{r7, pc}
 80017d2:	bf00      	nop
 80017d4:	2000003c 	.word	0x2000003c

080017d8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017d8:	b480      	push	{r7}
 80017da:	b085      	sub	sp, #20
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	f003 0307 	and.w	r3, r3, #7
 80017e6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80017e8:	4b0c      	ldr	r3, [pc, #48]	; (800181c <__NVIC_SetPriorityGrouping+0x44>)
 80017ea:	68db      	ldr	r3, [r3, #12]
 80017ec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80017ee:	68ba      	ldr	r2, [r7, #8]
 80017f0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80017f4:	4013      	ands	r3, r2
 80017f6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80017fc:	68bb      	ldr	r3, [r7, #8]
 80017fe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001800:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001804:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001808:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800180a:	4a04      	ldr	r2, [pc, #16]	; (800181c <__NVIC_SetPriorityGrouping+0x44>)
 800180c:	68bb      	ldr	r3, [r7, #8]
 800180e:	60d3      	str	r3, [r2, #12]
}
 8001810:	bf00      	nop
 8001812:	3714      	adds	r7, #20
 8001814:	46bd      	mov	sp, r7
 8001816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181a:	4770      	bx	lr
 800181c:	e000ed00 	.word	0xe000ed00

08001820 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001820:	b480      	push	{r7}
 8001822:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001824:	4b04      	ldr	r3, [pc, #16]	; (8001838 <__NVIC_GetPriorityGrouping+0x18>)
 8001826:	68db      	ldr	r3, [r3, #12]
 8001828:	0a1b      	lsrs	r3, r3, #8
 800182a:	f003 0307 	and.w	r3, r3, #7
}
 800182e:	4618      	mov	r0, r3
 8001830:	46bd      	mov	sp, r7
 8001832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001836:	4770      	bx	lr
 8001838:	e000ed00 	.word	0xe000ed00

0800183c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800183c:	b480      	push	{r7}
 800183e:	b083      	sub	sp, #12
 8001840:	af00      	add	r7, sp, #0
 8001842:	4603      	mov	r3, r0
 8001844:	6039      	str	r1, [r7, #0]
 8001846:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001848:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800184c:	2b00      	cmp	r3, #0
 800184e:	db0a      	blt.n	8001866 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001850:	683b      	ldr	r3, [r7, #0]
 8001852:	b2da      	uxtb	r2, r3
 8001854:	490c      	ldr	r1, [pc, #48]	; (8001888 <__NVIC_SetPriority+0x4c>)
 8001856:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800185a:	0112      	lsls	r2, r2, #4
 800185c:	b2d2      	uxtb	r2, r2
 800185e:	440b      	add	r3, r1
 8001860:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001864:	e00a      	b.n	800187c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001866:	683b      	ldr	r3, [r7, #0]
 8001868:	b2da      	uxtb	r2, r3
 800186a:	4908      	ldr	r1, [pc, #32]	; (800188c <__NVIC_SetPriority+0x50>)
 800186c:	79fb      	ldrb	r3, [r7, #7]
 800186e:	f003 030f 	and.w	r3, r3, #15
 8001872:	3b04      	subs	r3, #4
 8001874:	0112      	lsls	r2, r2, #4
 8001876:	b2d2      	uxtb	r2, r2
 8001878:	440b      	add	r3, r1
 800187a:	761a      	strb	r2, [r3, #24]
}
 800187c:	bf00      	nop
 800187e:	370c      	adds	r7, #12
 8001880:	46bd      	mov	sp, r7
 8001882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001886:	4770      	bx	lr
 8001888:	e000e100 	.word	0xe000e100
 800188c:	e000ed00 	.word	0xe000ed00

08001890 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001890:	b480      	push	{r7}
 8001892:	b089      	sub	sp, #36	; 0x24
 8001894:	af00      	add	r7, sp, #0
 8001896:	60f8      	str	r0, [r7, #12]
 8001898:	60b9      	str	r1, [r7, #8]
 800189a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	f003 0307 	and.w	r3, r3, #7
 80018a2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80018a4:	69fb      	ldr	r3, [r7, #28]
 80018a6:	f1c3 0307 	rsb	r3, r3, #7
 80018aa:	2b04      	cmp	r3, #4
 80018ac:	bf28      	it	cs
 80018ae:	2304      	movcs	r3, #4
 80018b0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018b2:	69fb      	ldr	r3, [r7, #28]
 80018b4:	3304      	adds	r3, #4
 80018b6:	2b06      	cmp	r3, #6
 80018b8:	d902      	bls.n	80018c0 <NVIC_EncodePriority+0x30>
 80018ba:	69fb      	ldr	r3, [r7, #28]
 80018bc:	3b03      	subs	r3, #3
 80018be:	e000      	b.n	80018c2 <NVIC_EncodePriority+0x32>
 80018c0:	2300      	movs	r3, #0
 80018c2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018c4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80018c8:	69bb      	ldr	r3, [r7, #24]
 80018ca:	fa02 f303 	lsl.w	r3, r2, r3
 80018ce:	43da      	mvns	r2, r3
 80018d0:	68bb      	ldr	r3, [r7, #8]
 80018d2:	401a      	ands	r2, r3
 80018d4:	697b      	ldr	r3, [r7, #20]
 80018d6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80018d8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80018dc:	697b      	ldr	r3, [r7, #20]
 80018de:	fa01 f303 	lsl.w	r3, r1, r3
 80018e2:	43d9      	mvns	r1, r3
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018e8:	4313      	orrs	r3, r2
         );
}
 80018ea:	4618      	mov	r0, r3
 80018ec:	3724      	adds	r7, #36	; 0x24
 80018ee:	46bd      	mov	sp, r7
 80018f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f4:	4770      	bx	lr
	...

080018f8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b082      	sub	sp, #8
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	3b01      	subs	r3, #1
 8001904:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001908:	d301      	bcc.n	800190e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800190a:	2301      	movs	r3, #1
 800190c:	e00f      	b.n	800192e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800190e:	4a0a      	ldr	r2, [pc, #40]	; (8001938 <SysTick_Config+0x40>)
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	3b01      	subs	r3, #1
 8001914:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001916:	210f      	movs	r1, #15
 8001918:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800191c:	f7ff ff8e 	bl	800183c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001920:	4b05      	ldr	r3, [pc, #20]	; (8001938 <SysTick_Config+0x40>)
 8001922:	2200      	movs	r2, #0
 8001924:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001926:	4b04      	ldr	r3, [pc, #16]	; (8001938 <SysTick_Config+0x40>)
 8001928:	2207      	movs	r2, #7
 800192a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800192c:	2300      	movs	r3, #0
}
 800192e:	4618      	mov	r0, r3
 8001930:	3708      	adds	r7, #8
 8001932:	46bd      	mov	sp, r7
 8001934:	bd80      	pop	{r7, pc}
 8001936:	bf00      	nop
 8001938:	e000e010 	.word	0xe000e010

0800193c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	b082      	sub	sp, #8
 8001940:	af00      	add	r7, sp, #0
 8001942:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001944:	6878      	ldr	r0, [r7, #4]
 8001946:	f7ff ff47 	bl	80017d8 <__NVIC_SetPriorityGrouping>
}
 800194a:	bf00      	nop
 800194c:	3708      	adds	r7, #8
 800194e:	46bd      	mov	sp, r7
 8001950:	bd80      	pop	{r7, pc}

08001952 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001952:	b580      	push	{r7, lr}
 8001954:	b086      	sub	sp, #24
 8001956:	af00      	add	r7, sp, #0
 8001958:	4603      	mov	r3, r0
 800195a:	60b9      	str	r1, [r7, #8]
 800195c:	607a      	str	r2, [r7, #4]
 800195e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001960:	2300      	movs	r3, #0
 8001962:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001964:	f7ff ff5c 	bl	8001820 <__NVIC_GetPriorityGrouping>
 8001968:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800196a:	687a      	ldr	r2, [r7, #4]
 800196c:	68b9      	ldr	r1, [r7, #8]
 800196e:	6978      	ldr	r0, [r7, #20]
 8001970:	f7ff ff8e 	bl	8001890 <NVIC_EncodePriority>
 8001974:	4602      	mov	r2, r0
 8001976:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800197a:	4611      	mov	r1, r2
 800197c:	4618      	mov	r0, r3
 800197e:	f7ff ff5d 	bl	800183c <__NVIC_SetPriority>
}
 8001982:	bf00      	nop
 8001984:	3718      	adds	r7, #24
 8001986:	46bd      	mov	sp, r7
 8001988:	bd80      	pop	{r7, pc}

0800198a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800198a:	b580      	push	{r7, lr}
 800198c:	b082      	sub	sp, #8
 800198e:	af00      	add	r7, sp, #0
 8001990:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001992:	6878      	ldr	r0, [r7, #4]
 8001994:	f7ff ffb0 	bl	80018f8 <SysTick_Config>
 8001998:	4603      	mov	r3, r0
}
 800199a:	4618      	mov	r0, r3
 800199c:	3708      	adds	r7, #8
 800199e:	46bd      	mov	sp, r7
 80019a0:	bd80      	pop	{r7, pc}
	...

080019a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80019a4:	b480      	push	{r7}
 80019a6:	b089      	sub	sp, #36	; 0x24
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
 80019ac:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80019ae:	2300      	movs	r3, #0
 80019b0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80019b2:	2300      	movs	r3, #0
 80019b4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80019b6:	2300      	movs	r3, #0
 80019b8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80019ba:	2300      	movs	r3, #0
 80019bc:	61fb      	str	r3, [r7, #28]
 80019be:	e159      	b.n	8001c74 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80019c0:	2201      	movs	r2, #1
 80019c2:	69fb      	ldr	r3, [r7, #28]
 80019c4:	fa02 f303 	lsl.w	r3, r2, r3
 80019c8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80019ca:	683b      	ldr	r3, [r7, #0]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	697a      	ldr	r2, [r7, #20]
 80019d0:	4013      	ands	r3, r2
 80019d2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80019d4:	693a      	ldr	r2, [r7, #16]
 80019d6:	697b      	ldr	r3, [r7, #20]
 80019d8:	429a      	cmp	r2, r3
 80019da:	f040 8148 	bne.w	8001c6e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80019de:	683b      	ldr	r3, [r7, #0]
 80019e0:	685b      	ldr	r3, [r3, #4]
 80019e2:	f003 0303 	and.w	r3, r3, #3
 80019e6:	2b01      	cmp	r3, #1
 80019e8:	d005      	beq.n	80019f6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80019ea:	683b      	ldr	r3, [r7, #0]
 80019ec:	685b      	ldr	r3, [r3, #4]
 80019ee:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80019f2:	2b02      	cmp	r3, #2
 80019f4:	d130      	bne.n	8001a58 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	689b      	ldr	r3, [r3, #8]
 80019fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80019fc:	69fb      	ldr	r3, [r7, #28]
 80019fe:	005b      	lsls	r3, r3, #1
 8001a00:	2203      	movs	r2, #3
 8001a02:	fa02 f303 	lsl.w	r3, r2, r3
 8001a06:	43db      	mvns	r3, r3
 8001a08:	69ba      	ldr	r2, [r7, #24]
 8001a0a:	4013      	ands	r3, r2
 8001a0c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001a0e:	683b      	ldr	r3, [r7, #0]
 8001a10:	68da      	ldr	r2, [r3, #12]
 8001a12:	69fb      	ldr	r3, [r7, #28]
 8001a14:	005b      	lsls	r3, r3, #1
 8001a16:	fa02 f303 	lsl.w	r3, r2, r3
 8001a1a:	69ba      	ldr	r2, [r7, #24]
 8001a1c:	4313      	orrs	r3, r2
 8001a1e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	69ba      	ldr	r2, [r7, #24]
 8001a24:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	685b      	ldr	r3, [r3, #4]
 8001a2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001a2c:	2201      	movs	r2, #1
 8001a2e:	69fb      	ldr	r3, [r7, #28]
 8001a30:	fa02 f303 	lsl.w	r3, r2, r3
 8001a34:	43db      	mvns	r3, r3
 8001a36:	69ba      	ldr	r2, [r7, #24]
 8001a38:	4013      	ands	r3, r2
 8001a3a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001a3c:	683b      	ldr	r3, [r7, #0]
 8001a3e:	685b      	ldr	r3, [r3, #4]
 8001a40:	091b      	lsrs	r3, r3, #4
 8001a42:	f003 0201 	and.w	r2, r3, #1
 8001a46:	69fb      	ldr	r3, [r7, #28]
 8001a48:	fa02 f303 	lsl.w	r3, r2, r3
 8001a4c:	69ba      	ldr	r2, [r7, #24]
 8001a4e:	4313      	orrs	r3, r2
 8001a50:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	69ba      	ldr	r2, [r7, #24]
 8001a56:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001a58:	683b      	ldr	r3, [r7, #0]
 8001a5a:	685b      	ldr	r3, [r3, #4]
 8001a5c:	f003 0303 	and.w	r3, r3, #3
 8001a60:	2b03      	cmp	r3, #3
 8001a62:	d017      	beq.n	8001a94 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	68db      	ldr	r3, [r3, #12]
 8001a68:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001a6a:	69fb      	ldr	r3, [r7, #28]
 8001a6c:	005b      	lsls	r3, r3, #1
 8001a6e:	2203      	movs	r2, #3
 8001a70:	fa02 f303 	lsl.w	r3, r2, r3
 8001a74:	43db      	mvns	r3, r3
 8001a76:	69ba      	ldr	r2, [r7, #24]
 8001a78:	4013      	ands	r3, r2
 8001a7a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001a7c:	683b      	ldr	r3, [r7, #0]
 8001a7e:	689a      	ldr	r2, [r3, #8]
 8001a80:	69fb      	ldr	r3, [r7, #28]
 8001a82:	005b      	lsls	r3, r3, #1
 8001a84:	fa02 f303 	lsl.w	r3, r2, r3
 8001a88:	69ba      	ldr	r2, [r7, #24]
 8001a8a:	4313      	orrs	r3, r2
 8001a8c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	69ba      	ldr	r2, [r7, #24]
 8001a92:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a94:	683b      	ldr	r3, [r7, #0]
 8001a96:	685b      	ldr	r3, [r3, #4]
 8001a98:	f003 0303 	and.w	r3, r3, #3
 8001a9c:	2b02      	cmp	r3, #2
 8001a9e:	d123      	bne.n	8001ae8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001aa0:	69fb      	ldr	r3, [r7, #28]
 8001aa2:	08da      	lsrs	r2, r3, #3
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	3208      	adds	r2, #8
 8001aa8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001aac:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001aae:	69fb      	ldr	r3, [r7, #28]
 8001ab0:	f003 0307 	and.w	r3, r3, #7
 8001ab4:	009b      	lsls	r3, r3, #2
 8001ab6:	220f      	movs	r2, #15
 8001ab8:	fa02 f303 	lsl.w	r3, r2, r3
 8001abc:	43db      	mvns	r3, r3
 8001abe:	69ba      	ldr	r2, [r7, #24]
 8001ac0:	4013      	ands	r3, r2
 8001ac2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001ac4:	683b      	ldr	r3, [r7, #0]
 8001ac6:	691a      	ldr	r2, [r3, #16]
 8001ac8:	69fb      	ldr	r3, [r7, #28]
 8001aca:	f003 0307 	and.w	r3, r3, #7
 8001ace:	009b      	lsls	r3, r3, #2
 8001ad0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ad4:	69ba      	ldr	r2, [r7, #24]
 8001ad6:	4313      	orrs	r3, r2
 8001ad8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001ada:	69fb      	ldr	r3, [r7, #28]
 8001adc:	08da      	lsrs	r2, r3, #3
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	3208      	adds	r2, #8
 8001ae2:	69b9      	ldr	r1, [r7, #24]
 8001ae4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001aee:	69fb      	ldr	r3, [r7, #28]
 8001af0:	005b      	lsls	r3, r3, #1
 8001af2:	2203      	movs	r2, #3
 8001af4:	fa02 f303 	lsl.w	r3, r2, r3
 8001af8:	43db      	mvns	r3, r3
 8001afa:	69ba      	ldr	r2, [r7, #24]
 8001afc:	4013      	ands	r3, r2
 8001afe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001b00:	683b      	ldr	r3, [r7, #0]
 8001b02:	685b      	ldr	r3, [r3, #4]
 8001b04:	f003 0203 	and.w	r2, r3, #3
 8001b08:	69fb      	ldr	r3, [r7, #28]
 8001b0a:	005b      	lsls	r3, r3, #1
 8001b0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b10:	69ba      	ldr	r2, [r7, #24]
 8001b12:	4313      	orrs	r3, r2
 8001b14:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	69ba      	ldr	r2, [r7, #24]
 8001b1a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001b1c:	683b      	ldr	r3, [r7, #0]
 8001b1e:	685b      	ldr	r3, [r3, #4]
 8001b20:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	f000 80a2 	beq.w	8001c6e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	60fb      	str	r3, [r7, #12]
 8001b2e:	4b57      	ldr	r3, [pc, #348]	; (8001c8c <HAL_GPIO_Init+0x2e8>)
 8001b30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b32:	4a56      	ldr	r2, [pc, #344]	; (8001c8c <HAL_GPIO_Init+0x2e8>)
 8001b34:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b38:	6453      	str	r3, [r2, #68]	; 0x44
 8001b3a:	4b54      	ldr	r3, [pc, #336]	; (8001c8c <HAL_GPIO_Init+0x2e8>)
 8001b3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b3e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b42:	60fb      	str	r3, [r7, #12]
 8001b44:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001b46:	4a52      	ldr	r2, [pc, #328]	; (8001c90 <HAL_GPIO_Init+0x2ec>)
 8001b48:	69fb      	ldr	r3, [r7, #28]
 8001b4a:	089b      	lsrs	r3, r3, #2
 8001b4c:	3302      	adds	r3, #2
 8001b4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b52:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001b54:	69fb      	ldr	r3, [r7, #28]
 8001b56:	f003 0303 	and.w	r3, r3, #3
 8001b5a:	009b      	lsls	r3, r3, #2
 8001b5c:	220f      	movs	r2, #15
 8001b5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b62:	43db      	mvns	r3, r3
 8001b64:	69ba      	ldr	r2, [r7, #24]
 8001b66:	4013      	ands	r3, r2
 8001b68:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	4a49      	ldr	r2, [pc, #292]	; (8001c94 <HAL_GPIO_Init+0x2f0>)
 8001b6e:	4293      	cmp	r3, r2
 8001b70:	d019      	beq.n	8001ba6 <HAL_GPIO_Init+0x202>
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	4a48      	ldr	r2, [pc, #288]	; (8001c98 <HAL_GPIO_Init+0x2f4>)
 8001b76:	4293      	cmp	r3, r2
 8001b78:	d013      	beq.n	8001ba2 <HAL_GPIO_Init+0x1fe>
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	4a47      	ldr	r2, [pc, #284]	; (8001c9c <HAL_GPIO_Init+0x2f8>)
 8001b7e:	4293      	cmp	r3, r2
 8001b80:	d00d      	beq.n	8001b9e <HAL_GPIO_Init+0x1fa>
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	4a46      	ldr	r2, [pc, #280]	; (8001ca0 <HAL_GPIO_Init+0x2fc>)
 8001b86:	4293      	cmp	r3, r2
 8001b88:	d007      	beq.n	8001b9a <HAL_GPIO_Init+0x1f6>
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	4a45      	ldr	r2, [pc, #276]	; (8001ca4 <HAL_GPIO_Init+0x300>)
 8001b8e:	4293      	cmp	r3, r2
 8001b90:	d101      	bne.n	8001b96 <HAL_GPIO_Init+0x1f2>
 8001b92:	2304      	movs	r3, #4
 8001b94:	e008      	b.n	8001ba8 <HAL_GPIO_Init+0x204>
 8001b96:	2307      	movs	r3, #7
 8001b98:	e006      	b.n	8001ba8 <HAL_GPIO_Init+0x204>
 8001b9a:	2303      	movs	r3, #3
 8001b9c:	e004      	b.n	8001ba8 <HAL_GPIO_Init+0x204>
 8001b9e:	2302      	movs	r3, #2
 8001ba0:	e002      	b.n	8001ba8 <HAL_GPIO_Init+0x204>
 8001ba2:	2301      	movs	r3, #1
 8001ba4:	e000      	b.n	8001ba8 <HAL_GPIO_Init+0x204>
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	69fa      	ldr	r2, [r7, #28]
 8001baa:	f002 0203 	and.w	r2, r2, #3
 8001bae:	0092      	lsls	r2, r2, #2
 8001bb0:	4093      	lsls	r3, r2
 8001bb2:	69ba      	ldr	r2, [r7, #24]
 8001bb4:	4313      	orrs	r3, r2
 8001bb6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001bb8:	4935      	ldr	r1, [pc, #212]	; (8001c90 <HAL_GPIO_Init+0x2ec>)
 8001bba:	69fb      	ldr	r3, [r7, #28]
 8001bbc:	089b      	lsrs	r3, r3, #2
 8001bbe:	3302      	adds	r3, #2
 8001bc0:	69ba      	ldr	r2, [r7, #24]
 8001bc2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001bc6:	4b38      	ldr	r3, [pc, #224]	; (8001ca8 <HAL_GPIO_Init+0x304>)
 8001bc8:	689b      	ldr	r3, [r3, #8]
 8001bca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001bcc:	693b      	ldr	r3, [r7, #16]
 8001bce:	43db      	mvns	r3, r3
 8001bd0:	69ba      	ldr	r2, [r7, #24]
 8001bd2:	4013      	ands	r3, r2
 8001bd4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001bd6:	683b      	ldr	r3, [r7, #0]
 8001bd8:	685b      	ldr	r3, [r3, #4]
 8001bda:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d003      	beq.n	8001bea <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001be2:	69ba      	ldr	r2, [r7, #24]
 8001be4:	693b      	ldr	r3, [r7, #16]
 8001be6:	4313      	orrs	r3, r2
 8001be8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001bea:	4a2f      	ldr	r2, [pc, #188]	; (8001ca8 <HAL_GPIO_Init+0x304>)
 8001bec:	69bb      	ldr	r3, [r7, #24]
 8001bee:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001bf0:	4b2d      	ldr	r3, [pc, #180]	; (8001ca8 <HAL_GPIO_Init+0x304>)
 8001bf2:	68db      	ldr	r3, [r3, #12]
 8001bf4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001bf6:	693b      	ldr	r3, [r7, #16]
 8001bf8:	43db      	mvns	r3, r3
 8001bfa:	69ba      	ldr	r2, [r7, #24]
 8001bfc:	4013      	ands	r3, r2
 8001bfe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001c00:	683b      	ldr	r3, [r7, #0]
 8001c02:	685b      	ldr	r3, [r3, #4]
 8001c04:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d003      	beq.n	8001c14 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001c0c:	69ba      	ldr	r2, [r7, #24]
 8001c0e:	693b      	ldr	r3, [r7, #16]
 8001c10:	4313      	orrs	r3, r2
 8001c12:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001c14:	4a24      	ldr	r2, [pc, #144]	; (8001ca8 <HAL_GPIO_Init+0x304>)
 8001c16:	69bb      	ldr	r3, [r7, #24]
 8001c18:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001c1a:	4b23      	ldr	r3, [pc, #140]	; (8001ca8 <HAL_GPIO_Init+0x304>)
 8001c1c:	685b      	ldr	r3, [r3, #4]
 8001c1e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c20:	693b      	ldr	r3, [r7, #16]
 8001c22:	43db      	mvns	r3, r3
 8001c24:	69ba      	ldr	r2, [r7, #24]
 8001c26:	4013      	ands	r3, r2
 8001c28:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001c2a:	683b      	ldr	r3, [r7, #0]
 8001c2c:	685b      	ldr	r3, [r3, #4]
 8001c2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d003      	beq.n	8001c3e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001c36:	69ba      	ldr	r2, [r7, #24]
 8001c38:	693b      	ldr	r3, [r7, #16]
 8001c3a:	4313      	orrs	r3, r2
 8001c3c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001c3e:	4a1a      	ldr	r2, [pc, #104]	; (8001ca8 <HAL_GPIO_Init+0x304>)
 8001c40:	69bb      	ldr	r3, [r7, #24]
 8001c42:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001c44:	4b18      	ldr	r3, [pc, #96]	; (8001ca8 <HAL_GPIO_Init+0x304>)
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c4a:	693b      	ldr	r3, [r7, #16]
 8001c4c:	43db      	mvns	r3, r3
 8001c4e:	69ba      	ldr	r2, [r7, #24]
 8001c50:	4013      	ands	r3, r2
 8001c52:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001c54:	683b      	ldr	r3, [r7, #0]
 8001c56:	685b      	ldr	r3, [r3, #4]
 8001c58:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d003      	beq.n	8001c68 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001c60:	69ba      	ldr	r2, [r7, #24]
 8001c62:	693b      	ldr	r3, [r7, #16]
 8001c64:	4313      	orrs	r3, r2
 8001c66:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001c68:	4a0f      	ldr	r2, [pc, #60]	; (8001ca8 <HAL_GPIO_Init+0x304>)
 8001c6a:	69bb      	ldr	r3, [r7, #24]
 8001c6c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c6e:	69fb      	ldr	r3, [r7, #28]
 8001c70:	3301      	adds	r3, #1
 8001c72:	61fb      	str	r3, [r7, #28]
 8001c74:	69fb      	ldr	r3, [r7, #28]
 8001c76:	2b0f      	cmp	r3, #15
 8001c78:	f67f aea2 	bls.w	80019c0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001c7c:	bf00      	nop
 8001c7e:	bf00      	nop
 8001c80:	3724      	adds	r7, #36	; 0x24
 8001c82:	46bd      	mov	sp, r7
 8001c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c88:	4770      	bx	lr
 8001c8a:	bf00      	nop
 8001c8c:	40023800 	.word	0x40023800
 8001c90:	40013800 	.word	0x40013800
 8001c94:	40020000 	.word	0x40020000
 8001c98:	40020400 	.word	0x40020400
 8001c9c:	40020800 	.word	0x40020800
 8001ca0:	40020c00 	.word	0x40020c00
 8001ca4:	40021000 	.word	0x40021000
 8001ca8:	40013c00 	.word	0x40013c00

08001cac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001cac:	b480      	push	{r7}
 8001cae:	b083      	sub	sp, #12
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]
 8001cb4:	460b      	mov	r3, r1
 8001cb6:	807b      	strh	r3, [r7, #2]
 8001cb8:	4613      	mov	r3, r2
 8001cba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001cbc:	787b      	ldrb	r3, [r7, #1]
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d003      	beq.n	8001cca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001cc2:	887a      	ldrh	r2, [r7, #2]
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001cc8:	e003      	b.n	8001cd2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001cca:	887b      	ldrh	r3, [r7, #2]
 8001ccc:	041a      	lsls	r2, r3, #16
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	619a      	str	r2, [r3, #24]
}
 8001cd2:	bf00      	nop
 8001cd4:	370c      	adds	r7, #12
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cdc:	4770      	bx	lr
	...

08001ce0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b084      	sub	sp, #16
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d101      	bne.n	8001cf2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001cee:	2301      	movs	r3, #1
 8001cf0:	e12b      	b.n	8001f4a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001cf8:	b2db      	uxtb	r3, r3
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d106      	bne.n	8001d0c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	2200      	movs	r2, #0
 8001d02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001d06:	6878      	ldr	r0, [r7, #4]
 8001d08:	f7fe fd14 	bl	8000734 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	2224      	movs	r2, #36	; 0x24
 8001d10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	681a      	ldr	r2, [r3, #0]
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	f022 0201 	bic.w	r2, r2, #1
 8001d22:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	681a      	ldr	r2, [r3, #0]
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001d32:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	681a      	ldr	r2, [r3, #0]
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001d42:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001d44:	f001 fbfc 	bl	8003540 <HAL_RCC_GetPCLK1Freq>
 8001d48:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	685b      	ldr	r3, [r3, #4]
 8001d4e:	4a81      	ldr	r2, [pc, #516]	; (8001f54 <HAL_I2C_Init+0x274>)
 8001d50:	4293      	cmp	r3, r2
 8001d52:	d807      	bhi.n	8001d64 <HAL_I2C_Init+0x84>
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	4a80      	ldr	r2, [pc, #512]	; (8001f58 <HAL_I2C_Init+0x278>)
 8001d58:	4293      	cmp	r3, r2
 8001d5a:	bf94      	ite	ls
 8001d5c:	2301      	movls	r3, #1
 8001d5e:	2300      	movhi	r3, #0
 8001d60:	b2db      	uxtb	r3, r3
 8001d62:	e006      	b.n	8001d72 <HAL_I2C_Init+0x92>
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	4a7d      	ldr	r2, [pc, #500]	; (8001f5c <HAL_I2C_Init+0x27c>)
 8001d68:	4293      	cmp	r3, r2
 8001d6a:	bf94      	ite	ls
 8001d6c:	2301      	movls	r3, #1
 8001d6e:	2300      	movhi	r3, #0
 8001d70:	b2db      	uxtb	r3, r3
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d001      	beq.n	8001d7a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001d76:	2301      	movs	r3, #1
 8001d78:	e0e7      	b.n	8001f4a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	4a78      	ldr	r2, [pc, #480]	; (8001f60 <HAL_I2C_Init+0x280>)
 8001d7e:	fba2 2303 	umull	r2, r3, r2, r3
 8001d82:	0c9b      	lsrs	r3, r3, #18
 8001d84:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	685b      	ldr	r3, [r3, #4]
 8001d8c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	68ba      	ldr	r2, [r7, #8]
 8001d96:	430a      	orrs	r2, r1
 8001d98:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	6a1b      	ldr	r3, [r3, #32]
 8001da0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	685b      	ldr	r3, [r3, #4]
 8001da8:	4a6a      	ldr	r2, [pc, #424]	; (8001f54 <HAL_I2C_Init+0x274>)
 8001daa:	4293      	cmp	r3, r2
 8001dac:	d802      	bhi.n	8001db4 <HAL_I2C_Init+0xd4>
 8001dae:	68bb      	ldr	r3, [r7, #8]
 8001db0:	3301      	adds	r3, #1
 8001db2:	e009      	b.n	8001dc8 <HAL_I2C_Init+0xe8>
 8001db4:	68bb      	ldr	r3, [r7, #8]
 8001db6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001dba:	fb02 f303 	mul.w	r3, r2, r3
 8001dbe:	4a69      	ldr	r2, [pc, #420]	; (8001f64 <HAL_I2C_Init+0x284>)
 8001dc0:	fba2 2303 	umull	r2, r3, r2, r3
 8001dc4:	099b      	lsrs	r3, r3, #6
 8001dc6:	3301      	adds	r3, #1
 8001dc8:	687a      	ldr	r2, [r7, #4]
 8001dca:	6812      	ldr	r2, [r2, #0]
 8001dcc:	430b      	orrs	r3, r1
 8001dce:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	69db      	ldr	r3, [r3, #28]
 8001dd6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001dda:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	685b      	ldr	r3, [r3, #4]
 8001de2:	495c      	ldr	r1, [pc, #368]	; (8001f54 <HAL_I2C_Init+0x274>)
 8001de4:	428b      	cmp	r3, r1
 8001de6:	d819      	bhi.n	8001e1c <HAL_I2C_Init+0x13c>
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	1e59      	subs	r1, r3, #1
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	685b      	ldr	r3, [r3, #4]
 8001df0:	005b      	lsls	r3, r3, #1
 8001df2:	fbb1 f3f3 	udiv	r3, r1, r3
 8001df6:	1c59      	adds	r1, r3, #1
 8001df8:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001dfc:	400b      	ands	r3, r1
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d00a      	beq.n	8001e18 <HAL_I2C_Init+0x138>
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	1e59      	subs	r1, r3, #1
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	685b      	ldr	r3, [r3, #4]
 8001e0a:	005b      	lsls	r3, r3, #1
 8001e0c:	fbb1 f3f3 	udiv	r3, r1, r3
 8001e10:	3301      	adds	r3, #1
 8001e12:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e16:	e051      	b.n	8001ebc <HAL_I2C_Init+0x1dc>
 8001e18:	2304      	movs	r3, #4
 8001e1a:	e04f      	b.n	8001ebc <HAL_I2C_Init+0x1dc>
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	689b      	ldr	r3, [r3, #8]
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d111      	bne.n	8001e48 <HAL_I2C_Init+0x168>
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	1e58      	subs	r0, r3, #1
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	6859      	ldr	r1, [r3, #4]
 8001e2c:	460b      	mov	r3, r1
 8001e2e:	005b      	lsls	r3, r3, #1
 8001e30:	440b      	add	r3, r1
 8001e32:	fbb0 f3f3 	udiv	r3, r0, r3
 8001e36:	3301      	adds	r3, #1
 8001e38:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	bf0c      	ite	eq
 8001e40:	2301      	moveq	r3, #1
 8001e42:	2300      	movne	r3, #0
 8001e44:	b2db      	uxtb	r3, r3
 8001e46:	e012      	b.n	8001e6e <HAL_I2C_Init+0x18e>
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	1e58      	subs	r0, r3, #1
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	6859      	ldr	r1, [r3, #4]
 8001e50:	460b      	mov	r3, r1
 8001e52:	009b      	lsls	r3, r3, #2
 8001e54:	440b      	add	r3, r1
 8001e56:	0099      	lsls	r1, r3, #2
 8001e58:	440b      	add	r3, r1
 8001e5a:	fbb0 f3f3 	udiv	r3, r0, r3
 8001e5e:	3301      	adds	r3, #1
 8001e60:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	bf0c      	ite	eq
 8001e68:	2301      	moveq	r3, #1
 8001e6a:	2300      	movne	r3, #0
 8001e6c:	b2db      	uxtb	r3, r3
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d001      	beq.n	8001e76 <HAL_I2C_Init+0x196>
 8001e72:	2301      	movs	r3, #1
 8001e74:	e022      	b.n	8001ebc <HAL_I2C_Init+0x1dc>
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	689b      	ldr	r3, [r3, #8]
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d10e      	bne.n	8001e9c <HAL_I2C_Init+0x1bc>
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	1e58      	subs	r0, r3, #1
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	6859      	ldr	r1, [r3, #4]
 8001e86:	460b      	mov	r3, r1
 8001e88:	005b      	lsls	r3, r3, #1
 8001e8a:	440b      	add	r3, r1
 8001e8c:	fbb0 f3f3 	udiv	r3, r0, r3
 8001e90:	3301      	adds	r3, #1
 8001e92:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e96:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001e9a:	e00f      	b.n	8001ebc <HAL_I2C_Init+0x1dc>
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	1e58      	subs	r0, r3, #1
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	6859      	ldr	r1, [r3, #4]
 8001ea4:	460b      	mov	r3, r1
 8001ea6:	009b      	lsls	r3, r3, #2
 8001ea8:	440b      	add	r3, r1
 8001eaa:	0099      	lsls	r1, r3, #2
 8001eac:	440b      	add	r3, r1
 8001eae:	fbb0 f3f3 	udiv	r3, r0, r3
 8001eb2:	3301      	adds	r3, #1
 8001eb4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001eb8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001ebc:	6879      	ldr	r1, [r7, #4]
 8001ebe:	6809      	ldr	r1, [r1, #0]
 8001ec0:	4313      	orrs	r3, r2
 8001ec2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	69da      	ldr	r2, [r3, #28]
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	6a1b      	ldr	r3, [r3, #32]
 8001ed6:	431a      	orrs	r2, r3
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	430a      	orrs	r2, r1
 8001ede:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	689b      	ldr	r3, [r3, #8]
 8001ee6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001eea:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001eee:	687a      	ldr	r2, [r7, #4]
 8001ef0:	6911      	ldr	r1, [r2, #16]
 8001ef2:	687a      	ldr	r2, [r7, #4]
 8001ef4:	68d2      	ldr	r2, [r2, #12]
 8001ef6:	4311      	orrs	r1, r2
 8001ef8:	687a      	ldr	r2, [r7, #4]
 8001efa:	6812      	ldr	r2, [r2, #0]
 8001efc:	430b      	orrs	r3, r1
 8001efe:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	68db      	ldr	r3, [r3, #12]
 8001f06:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	695a      	ldr	r2, [r3, #20]
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	699b      	ldr	r3, [r3, #24]
 8001f12:	431a      	orrs	r2, r3
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	430a      	orrs	r2, r1
 8001f1a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	681a      	ldr	r2, [r3, #0]
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f042 0201 	orr.w	r2, r2, #1
 8001f2a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	2200      	movs	r2, #0
 8001f30:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	2220      	movs	r2, #32
 8001f36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	2200      	movs	r2, #0
 8001f44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001f48:	2300      	movs	r3, #0
}
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	3710      	adds	r7, #16
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	bd80      	pop	{r7, pc}
 8001f52:	bf00      	nop
 8001f54:	000186a0 	.word	0x000186a0
 8001f58:	001e847f 	.word	0x001e847f
 8001f5c:	003d08ff 	.word	0x003d08ff
 8001f60:	431bde83 	.word	0x431bde83
 8001f64:	10624dd3 	.word	0x10624dd3

08001f68 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	b088      	sub	sp, #32
 8001f6c:	af02      	add	r7, sp, #8
 8001f6e:	60f8      	str	r0, [r7, #12]
 8001f70:	4608      	mov	r0, r1
 8001f72:	4611      	mov	r1, r2
 8001f74:	461a      	mov	r2, r3
 8001f76:	4603      	mov	r3, r0
 8001f78:	817b      	strh	r3, [r7, #10]
 8001f7a:	460b      	mov	r3, r1
 8001f7c:	813b      	strh	r3, [r7, #8]
 8001f7e:	4613      	mov	r3, r2
 8001f80:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001f82:	f7ff fbf9 	bl	8001778 <HAL_GetTick>
 8001f86:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f8e:	b2db      	uxtb	r3, r3
 8001f90:	2b20      	cmp	r3, #32
 8001f92:	f040 80d9 	bne.w	8002148 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001f96:	697b      	ldr	r3, [r7, #20]
 8001f98:	9300      	str	r3, [sp, #0]
 8001f9a:	2319      	movs	r3, #25
 8001f9c:	2201      	movs	r2, #1
 8001f9e:	496d      	ldr	r1, [pc, #436]	; (8002154 <HAL_I2C_Mem_Write+0x1ec>)
 8001fa0:	68f8      	ldr	r0, [r7, #12]
 8001fa2:	f000 fc7f 	bl	80028a4 <I2C_WaitOnFlagUntilTimeout>
 8001fa6:	4603      	mov	r3, r0
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d001      	beq.n	8001fb0 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8001fac:	2302      	movs	r3, #2
 8001fae:	e0cc      	b.n	800214a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001fb6:	2b01      	cmp	r3, #1
 8001fb8:	d101      	bne.n	8001fbe <HAL_I2C_Mem_Write+0x56>
 8001fba:	2302      	movs	r3, #2
 8001fbc:	e0c5      	b.n	800214a <HAL_I2C_Mem_Write+0x1e2>
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	2201      	movs	r2, #1
 8001fc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f003 0301 	and.w	r3, r3, #1
 8001fd0:	2b01      	cmp	r3, #1
 8001fd2:	d007      	beq.n	8001fe4 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	681a      	ldr	r2, [r3, #0]
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f042 0201 	orr.w	r2, r2, #1
 8001fe2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	681a      	ldr	r2, [r3, #0]
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001ff2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	2221      	movs	r2, #33	; 0x21
 8001ff8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	2240      	movs	r2, #64	; 0x40
 8002000:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	2200      	movs	r2, #0
 8002008:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	6a3a      	ldr	r2, [r7, #32]
 800200e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002014:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800201a:	b29a      	uxth	r2, r3
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	4a4d      	ldr	r2, [pc, #308]	; (8002158 <HAL_I2C_Mem_Write+0x1f0>)
 8002024:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002026:	88f8      	ldrh	r0, [r7, #6]
 8002028:	893a      	ldrh	r2, [r7, #8]
 800202a:	8979      	ldrh	r1, [r7, #10]
 800202c:	697b      	ldr	r3, [r7, #20]
 800202e:	9301      	str	r3, [sp, #4]
 8002030:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002032:	9300      	str	r3, [sp, #0]
 8002034:	4603      	mov	r3, r0
 8002036:	68f8      	ldr	r0, [r7, #12]
 8002038:	f000 fab6 	bl	80025a8 <I2C_RequestMemoryWrite>
 800203c:	4603      	mov	r3, r0
 800203e:	2b00      	cmp	r3, #0
 8002040:	d052      	beq.n	80020e8 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002042:	2301      	movs	r3, #1
 8002044:	e081      	b.n	800214a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002046:	697a      	ldr	r2, [r7, #20]
 8002048:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800204a:	68f8      	ldr	r0, [r7, #12]
 800204c:	f000 fd00 	bl	8002a50 <I2C_WaitOnTXEFlagUntilTimeout>
 8002050:	4603      	mov	r3, r0
 8002052:	2b00      	cmp	r3, #0
 8002054:	d00d      	beq.n	8002072 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800205a:	2b04      	cmp	r3, #4
 800205c:	d107      	bne.n	800206e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	681a      	ldr	r2, [r3, #0]
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800206c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800206e:	2301      	movs	r3, #1
 8002070:	e06b      	b.n	800214a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002076:	781a      	ldrb	r2, [r3, #0]
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002082:	1c5a      	adds	r2, r3, #1
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800208c:	3b01      	subs	r3, #1
 800208e:	b29a      	uxth	r2, r3
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002098:	b29b      	uxth	r3, r3
 800209a:	3b01      	subs	r3, #1
 800209c:	b29a      	uxth	r2, r3
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	695b      	ldr	r3, [r3, #20]
 80020a8:	f003 0304 	and.w	r3, r3, #4
 80020ac:	2b04      	cmp	r3, #4
 80020ae:	d11b      	bne.n	80020e8 <HAL_I2C_Mem_Write+0x180>
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d017      	beq.n	80020e8 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020bc:	781a      	ldrb	r2, [r3, #0]
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020c8:	1c5a      	adds	r2, r3, #1
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020d2:	3b01      	subs	r3, #1
 80020d4:	b29a      	uxth	r2, r3
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020de:	b29b      	uxth	r3, r3
 80020e0:	3b01      	subs	r3, #1
 80020e2:	b29a      	uxth	r2, r3
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d1aa      	bne.n	8002046 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80020f0:	697a      	ldr	r2, [r7, #20]
 80020f2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80020f4:	68f8      	ldr	r0, [r7, #12]
 80020f6:	f000 fcec 	bl	8002ad2 <I2C_WaitOnBTFFlagUntilTimeout>
 80020fa:	4603      	mov	r3, r0
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d00d      	beq.n	800211c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002104:	2b04      	cmp	r3, #4
 8002106:	d107      	bne.n	8002118 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	681a      	ldr	r2, [r3, #0]
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002116:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002118:	2301      	movs	r3, #1
 800211a:	e016      	b.n	800214a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	681a      	ldr	r2, [r3, #0]
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800212a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	2220      	movs	r2, #32
 8002130:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	2200      	movs	r2, #0
 8002138:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	2200      	movs	r2, #0
 8002140:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002144:	2300      	movs	r3, #0
 8002146:	e000      	b.n	800214a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002148:	2302      	movs	r3, #2
  }
}
 800214a:	4618      	mov	r0, r3
 800214c:	3718      	adds	r7, #24
 800214e:	46bd      	mov	sp, r7
 8002150:	bd80      	pop	{r7, pc}
 8002152:	bf00      	nop
 8002154:	00100002 	.word	0x00100002
 8002158:	ffff0000 	.word	0xffff0000

0800215c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800215c:	b580      	push	{r7, lr}
 800215e:	b08c      	sub	sp, #48	; 0x30
 8002160:	af02      	add	r7, sp, #8
 8002162:	60f8      	str	r0, [r7, #12]
 8002164:	4608      	mov	r0, r1
 8002166:	4611      	mov	r1, r2
 8002168:	461a      	mov	r2, r3
 800216a:	4603      	mov	r3, r0
 800216c:	817b      	strh	r3, [r7, #10]
 800216e:	460b      	mov	r3, r1
 8002170:	813b      	strh	r3, [r7, #8]
 8002172:	4613      	mov	r3, r2
 8002174:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002176:	f7ff faff 	bl	8001778 <HAL_GetTick>
 800217a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002182:	b2db      	uxtb	r3, r3
 8002184:	2b20      	cmp	r3, #32
 8002186:	f040 8208 	bne.w	800259a <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800218a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800218c:	9300      	str	r3, [sp, #0]
 800218e:	2319      	movs	r3, #25
 8002190:	2201      	movs	r2, #1
 8002192:	497b      	ldr	r1, [pc, #492]	; (8002380 <HAL_I2C_Mem_Read+0x224>)
 8002194:	68f8      	ldr	r0, [r7, #12]
 8002196:	f000 fb85 	bl	80028a4 <I2C_WaitOnFlagUntilTimeout>
 800219a:	4603      	mov	r3, r0
 800219c:	2b00      	cmp	r3, #0
 800219e:	d001      	beq.n	80021a4 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80021a0:	2302      	movs	r3, #2
 80021a2:	e1fb      	b.n	800259c <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80021aa:	2b01      	cmp	r3, #1
 80021ac:	d101      	bne.n	80021b2 <HAL_I2C_Mem_Read+0x56>
 80021ae:	2302      	movs	r3, #2
 80021b0:	e1f4      	b.n	800259c <HAL_I2C_Mem_Read+0x440>
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	2201      	movs	r2, #1
 80021b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f003 0301 	and.w	r3, r3, #1
 80021c4:	2b01      	cmp	r3, #1
 80021c6:	d007      	beq.n	80021d8 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	681a      	ldr	r2, [r3, #0]
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f042 0201 	orr.w	r2, r2, #1
 80021d6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	681a      	ldr	r2, [r3, #0]
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80021e6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	2222      	movs	r2, #34	; 0x22
 80021ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	2240      	movs	r2, #64	; 0x40
 80021f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	2200      	movs	r2, #0
 80021fc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002202:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8002208:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800220e:	b29a      	uxth	r2, r3
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	4a5b      	ldr	r2, [pc, #364]	; (8002384 <HAL_I2C_Mem_Read+0x228>)
 8002218:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800221a:	88f8      	ldrh	r0, [r7, #6]
 800221c:	893a      	ldrh	r2, [r7, #8]
 800221e:	8979      	ldrh	r1, [r7, #10]
 8002220:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002222:	9301      	str	r3, [sp, #4]
 8002224:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002226:	9300      	str	r3, [sp, #0]
 8002228:	4603      	mov	r3, r0
 800222a:	68f8      	ldr	r0, [r7, #12]
 800222c:	f000 fa52 	bl	80026d4 <I2C_RequestMemoryRead>
 8002230:	4603      	mov	r3, r0
 8002232:	2b00      	cmp	r3, #0
 8002234:	d001      	beq.n	800223a <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8002236:	2301      	movs	r3, #1
 8002238:	e1b0      	b.n	800259c <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800223e:	2b00      	cmp	r3, #0
 8002240:	d113      	bne.n	800226a <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002242:	2300      	movs	r3, #0
 8002244:	623b      	str	r3, [r7, #32]
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	695b      	ldr	r3, [r3, #20]
 800224c:	623b      	str	r3, [r7, #32]
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	699b      	ldr	r3, [r3, #24]
 8002254:	623b      	str	r3, [r7, #32]
 8002256:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	681a      	ldr	r2, [r3, #0]
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002266:	601a      	str	r2, [r3, #0]
 8002268:	e184      	b.n	8002574 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800226e:	2b01      	cmp	r3, #1
 8002270:	d11b      	bne.n	80022aa <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	681a      	ldr	r2, [r3, #0]
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002280:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002282:	2300      	movs	r3, #0
 8002284:	61fb      	str	r3, [r7, #28]
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	695b      	ldr	r3, [r3, #20]
 800228c:	61fb      	str	r3, [r7, #28]
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	699b      	ldr	r3, [r3, #24]
 8002294:	61fb      	str	r3, [r7, #28]
 8002296:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	681a      	ldr	r2, [r3, #0]
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80022a6:	601a      	str	r2, [r3, #0]
 80022a8:	e164      	b.n	8002574 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022ae:	2b02      	cmp	r3, #2
 80022b0:	d11b      	bne.n	80022ea <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	681a      	ldr	r2, [r3, #0]
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80022c0:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	681a      	ldr	r2, [r3, #0]
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80022d0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80022d2:	2300      	movs	r3, #0
 80022d4:	61bb      	str	r3, [r7, #24]
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	695b      	ldr	r3, [r3, #20]
 80022dc:	61bb      	str	r3, [r7, #24]
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	699b      	ldr	r3, [r3, #24]
 80022e4:	61bb      	str	r3, [r7, #24]
 80022e6:	69bb      	ldr	r3, [r7, #24]
 80022e8:	e144      	b.n	8002574 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80022ea:	2300      	movs	r3, #0
 80022ec:	617b      	str	r3, [r7, #20]
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	695b      	ldr	r3, [r3, #20]
 80022f4:	617b      	str	r3, [r7, #20]
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	699b      	ldr	r3, [r3, #24]
 80022fc:	617b      	str	r3, [r7, #20]
 80022fe:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002300:	e138      	b.n	8002574 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002306:	2b03      	cmp	r3, #3
 8002308:	f200 80f1 	bhi.w	80024ee <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002310:	2b01      	cmp	r3, #1
 8002312:	d123      	bne.n	800235c <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002314:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002316:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002318:	68f8      	ldr	r0, [r7, #12]
 800231a:	f000 fc1b 	bl	8002b54 <I2C_WaitOnRXNEFlagUntilTimeout>
 800231e:	4603      	mov	r3, r0
 8002320:	2b00      	cmp	r3, #0
 8002322:	d001      	beq.n	8002328 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8002324:	2301      	movs	r3, #1
 8002326:	e139      	b.n	800259c <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	691a      	ldr	r2, [r3, #16]
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002332:	b2d2      	uxtb	r2, r2
 8002334:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800233a:	1c5a      	adds	r2, r3, #1
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002344:	3b01      	subs	r3, #1
 8002346:	b29a      	uxth	r2, r3
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002350:	b29b      	uxth	r3, r3
 8002352:	3b01      	subs	r3, #1
 8002354:	b29a      	uxth	r2, r3
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	855a      	strh	r2, [r3, #42]	; 0x2a
 800235a:	e10b      	b.n	8002574 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002360:	2b02      	cmp	r3, #2
 8002362:	d14e      	bne.n	8002402 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002364:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002366:	9300      	str	r3, [sp, #0]
 8002368:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800236a:	2200      	movs	r2, #0
 800236c:	4906      	ldr	r1, [pc, #24]	; (8002388 <HAL_I2C_Mem_Read+0x22c>)
 800236e:	68f8      	ldr	r0, [r7, #12]
 8002370:	f000 fa98 	bl	80028a4 <I2C_WaitOnFlagUntilTimeout>
 8002374:	4603      	mov	r3, r0
 8002376:	2b00      	cmp	r3, #0
 8002378:	d008      	beq.n	800238c <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800237a:	2301      	movs	r3, #1
 800237c:	e10e      	b.n	800259c <HAL_I2C_Mem_Read+0x440>
 800237e:	bf00      	nop
 8002380:	00100002 	.word	0x00100002
 8002384:	ffff0000 	.word	0xffff0000
 8002388:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	681a      	ldr	r2, [r3, #0]
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800239a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	691a      	ldr	r2, [r3, #16]
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023a6:	b2d2      	uxtb	r2, r2
 80023a8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023ae:	1c5a      	adds	r2, r3, #1
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023b8:	3b01      	subs	r3, #1
 80023ba:	b29a      	uxth	r2, r3
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023c4:	b29b      	uxth	r3, r3
 80023c6:	3b01      	subs	r3, #1
 80023c8:	b29a      	uxth	r2, r3
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	691a      	ldr	r2, [r3, #16]
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023d8:	b2d2      	uxtb	r2, r2
 80023da:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023e0:	1c5a      	adds	r2, r3, #1
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023ea:	3b01      	subs	r3, #1
 80023ec:	b29a      	uxth	r2, r3
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023f6:	b29b      	uxth	r3, r3
 80023f8:	3b01      	subs	r3, #1
 80023fa:	b29a      	uxth	r2, r3
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002400:	e0b8      	b.n	8002574 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002402:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002404:	9300      	str	r3, [sp, #0]
 8002406:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002408:	2200      	movs	r2, #0
 800240a:	4966      	ldr	r1, [pc, #408]	; (80025a4 <HAL_I2C_Mem_Read+0x448>)
 800240c:	68f8      	ldr	r0, [r7, #12]
 800240e:	f000 fa49 	bl	80028a4 <I2C_WaitOnFlagUntilTimeout>
 8002412:	4603      	mov	r3, r0
 8002414:	2b00      	cmp	r3, #0
 8002416:	d001      	beq.n	800241c <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8002418:	2301      	movs	r3, #1
 800241a:	e0bf      	b.n	800259c <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	681a      	ldr	r2, [r3, #0]
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800242a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	691a      	ldr	r2, [r3, #16]
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002436:	b2d2      	uxtb	r2, r2
 8002438:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800243e:	1c5a      	adds	r2, r3, #1
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002448:	3b01      	subs	r3, #1
 800244a:	b29a      	uxth	r2, r3
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002454:	b29b      	uxth	r3, r3
 8002456:	3b01      	subs	r3, #1
 8002458:	b29a      	uxth	r2, r3
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800245e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002460:	9300      	str	r3, [sp, #0]
 8002462:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002464:	2200      	movs	r2, #0
 8002466:	494f      	ldr	r1, [pc, #316]	; (80025a4 <HAL_I2C_Mem_Read+0x448>)
 8002468:	68f8      	ldr	r0, [r7, #12]
 800246a:	f000 fa1b 	bl	80028a4 <I2C_WaitOnFlagUntilTimeout>
 800246e:	4603      	mov	r3, r0
 8002470:	2b00      	cmp	r3, #0
 8002472:	d001      	beq.n	8002478 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8002474:	2301      	movs	r3, #1
 8002476:	e091      	b.n	800259c <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	681a      	ldr	r2, [r3, #0]
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002486:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	691a      	ldr	r2, [r3, #16]
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002492:	b2d2      	uxtb	r2, r2
 8002494:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800249a:	1c5a      	adds	r2, r3, #1
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024a4:	3b01      	subs	r3, #1
 80024a6:	b29a      	uxth	r2, r3
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024b0:	b29b      	uxth	r3, r3
 80024b2:	3b01      	subs	r3, #1
 80024b4:	b29a      	uxth	r2, r3
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	691a      	ldr	r2, [r3, #16]
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024c4:	b2d2      	uxtb	r2, r2
 80024c6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024cc:	1c5a      	adds	r2, r3, #1
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024d6:	3b01      	subs	r3, #1
 80024d8:	b29a      	uxth	r2, r3
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024e2:	b29b      	uxth	r3, r3
 80024e4:	3b01      	subs	r3, #1
 80024e6:	b29a      	uxth	r2, r3
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	855a      	strh	r2, [r3, #42]	; 0x2a
 80024ec:	e042      	b.n	8002574 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80024ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80024f0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80024f2:	68f8      	ldr	r0, [r7, #12]
 80024f4:	f000 fb2e 	bl	8002b54 <I2C_WaitOnRXNEFlagUntilTimeout>
 80024f8:	4603      	mov	r3, r0
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d001      	beq.n	8002502 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80024fe:	2301      	movs	r3, #1
 8002500:	e04c      	b.n	800259c <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	691a      	ldr	r2, [r3, #16]
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800250c:	b2d2      	uxtb	r2, r2
 800250e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002514:	1c5a      	adds	r2, r3, #1
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800251e:	3b01      	subs	r3, #1
 8002520:	b29a      	uxth	r2, r3
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800252a:	b29b      	uxth	r3, r3
 800252c:	3b01      	subs	r3, #1
 800252e:	b29a      	uxth	r2, r3
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	695b      	ldr	r3, [r3, #20]
 800253a:	f003 0304 	and.w	r3, r3, #4
 800253e:	2b04      	cmp	r3, #4
 8002540:	d118      	bne.n	8002574 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	691a      	ldr	r2, [r3, #16]
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800254c:	b2d2      	uxtb	r2, r2
 800254e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002554:	1c5a      	adds	r2, r3, #1
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800255e:	3b01      	subs	r3, #1
 8002560:	b29a      	uxth	r2, r3
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800256a:	b29b      	uxth	r3, r3
 800256c:	3b01      	subs	r3, #1
 800256e:	b29a      	uxth	r2, r3
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002578:	2b00      	cmp	r3, #0
 800257a:	f47f aec2 	bne.w	8002302 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	2220      	movs	r2, #32
 8002582:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	2200      	movs	r2, #0
 800258a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	2200      	movs	r2, #0
 8002592:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002596:	2300      	movs	r3, #0
 8002598:	e000      	b.n	800259c <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 800259a:	2302      	movs	r3, #2
  }
}
 800259c:	4618      	mov	r0, r3
 800259e:	3728      	adds	r7, #40	; 0x28
 80025a0:	46bd      	mov	sp, r7
 80025a2:	bd80      	pop	{r7, pc}
 80025a4:	00010004 	.word	0x00010004

080025a8 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80025a8:	b580      	push	{r7, lr}
 80025aa:	b088      	sub	sp, #32
 80025ac:	af02      	add	r7, sp, #8
 80025ae:	60f8      	str	r0, [r7, #12]
 80025b0:	4608      	mov	r0, r1
 80025b2:	4611      	mov	r1, r2
 80025b4:	461a      	mov	r2, r3
 80025b6:	4603      	mov	r3, r0
 80025b8:	817b      	strh	r3, [r7, #10]
 80025ba:	460b      	mov	r3, r1
 80025bc:	813b      	strh	r3, [r7, #8]
 80025be:	4613      	mov	r3, r2
 80025c0:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	681a      	ldr	r2, [r3, #0]
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80025d0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80025d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025d4:	9300      	str	r3, [sp, #0]
 80025d6:	6a3b      	ldr	r3, [r7, #32]
 80025d8:	2200      	movs	r2, #0
 80025da:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80025de:	68f8      	ldr	r0, [r7, #12]
 80025e0:	f000 f960 	bl	80028a4 <I2C_WaitOnFlagUntilTimeout>
 80025e4:	4603      	mov	r3, r0
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d00d      	beq.n	8002606 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025f4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80025f8:	d103      	bne.n	8002602 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002600:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002602:	2303      	movs	r3, #3
 8002604:	e05f      	b.n	80026c6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002606:	897b      	ldrh	r3, [r7, #10]
 8002608:	b2db      	uxtb	r3, r3
 800260a:	461a      	mov	r2, r3
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002614:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002616:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002618:	6a3a      	ldr	r2, [r7, #32]
 800261a:	492d      	ldr	r1, [pc, #180]	; (80026d0 <I2C_RequestMemoryWrite+0x128>)
 800261c:	68f8      	ldr	r0, [r7, #12]
 800261e:	f000 f998 	bl	8002952 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002622:	4603      	mov	r3, r0
 8002624:	2b00      	cmp	r3, #0
 8002626:	d001      	beq.n	800262c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8002628:	2301      	movs	r3, #1
 800262a:	e04c      	b.n	80026c6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800262c:	2300      	movs	r3, #0
 800262e:	617b      	str	r3, [r7, #20]
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	695b      	ldr	r3, [r3, #20]
 8002636:	617b      	str	r3, [r7, #20]
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	699b      	ldr	r3, [r3, #24]
 800263e:	617b      	str	r3, [r7, #20]
 8002640:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002642:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002644:	6a39      	ldr	r1, [r7, #32]
 8002646:	68f8      	ldr	r0, [r7, #12]
 8002648:	f000 fa02 	bl	8002a50 <I2C_WaitOnTXEFlagUntilTimeout>
 800264c:	4603      	mov	r3, r0
 800264e:	2b00      	cmp	r3, #0
 8002650:	d00d      	beq.n	800266e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002656:	2b04      	cmp	r3, #4
 8002658:	d107      	bne.n	800266a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	681a      	ldr	r2, [r3, #0]
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002668:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800266a:	2301      	movs	r3, #1
 800266c:	e02b      	b.n	80026c6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800266e:	88fb      	ldrh	r3, [r7, #6]
 8002670:	2b01      	cmp	r3, #1
 8002672:	d105      	bne.n	8002680 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002674:	893b      	ldrh	r3, [r7, #8]
 8002676:	b2da      	uxtb	r2, r3
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	611a      	str	r2, [r3, #16]
 800267e:	e021      	b.n	80026c4 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002680:	893b      	ldrh	r3, [r7, #8]
 8002682:	0a1b      	lsrs	r3, r3, #8
 8002684:	b29b      	uxth	r3, r3
 8002686:	b2da      	uxtb	r2, r3
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800268e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002690:	6a39      	ldr	r1, [r7, #32]
 8002692:	68f8      	ldr	r0, [r7, #12]
 8002694:	f000 f9dc 	bl	8002a50 <I2C_WaitOnTXEFlagUntilTimeout>
 8002698:	4603      	mov	r3, r0
 800269a:	2b00      	cmp	r3, #0
 800269c:	d00d      	beq.n	80026ba <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026a2:	2b04      	cmp	r3, #4
 80026a4:	d107      	bne.n	80026b6 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	681a      	ldr	r2, [r3, #0]
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80026b4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80026b6:	2301      	movs	r3, #1
 80026b8:	e005      	b.n	80026c6 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80026ba:	893b      	ldrh	r3, [r7, #8]
 80026bc:	b2da      	uxtb	r2, r3
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80026c4:	2300      	movs	r3, #0
}
 80026c6:	4618      	mov	r0, r3
 80026c8:	3718      	adds	r7, #24
 80026ca:	46bd      	mov	sp, r7
 80026cc:	bd80      	pop	{r7, pc}
 80026ce:	bf00      	nop
 80026d0:	00010002 	.word	0x00010002

080026d4 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80026d4:	b580      	push	{r7, lr}
 80026d6:	b088      	sub	sp, #32
 80026d8:	af02      	add	r7, sp, #8
 80026da:	60f8      	str	r0, [r7, #12]
 80026dc:	4608      	mov	r0, r1
 80026de:	4611      	mov	r1, r2
 80026e0:	461a      	mov	r2, r3
 80026e2:	4603      	mov	r3, r0
 80026e4:	817b      	strh	r3, [r7, #10]
 80026e6:	460b      	mov	r3, r1
 80026e8:	813b      	strh	r3, [r7, #8]
 80026ea:	4613      	mov	r3, r2
 80026ec:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	681a      	ldr	r2, [r3, #0]
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80026fc:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	681a      	ldr	r2, [r3, #0]
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800270c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800270e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002710:	9300      	str	r3, [sp, #0]
 8002712:	6a3b      	ldr	r3, [r7, #32]
 8002714:	2200      	movs	r2, #0
 8002716:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800271a:	68f8      	ldr	r0, [r7, #12]
 800271c:	f000 f8c2 	bl	80028a4 <I2C_WaitOnFlagUntilTimeout>
 8002720:	4603      	mov	r3, r0
 8002722:	2b00      	cmp	r3, #0
 8002724:	d00d      	beq.n	8002742 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002730:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002734:	d103      	bne.n	800273e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	f44f 7200 	mov.w	r2, #512	; 0x200
 800273c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800273e:	2303      	movs	r3, #3
 8002740:	e0aa      	b.n	8002898 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002742:	897b      	ldrh	r3, [r7, #10]
 8002744:	b2db      	uxtb	r3, r3
 8002746:	461a      	mov	r2, r3
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002750:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002752:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002754:	6a3a      	ldr	r2, [r7, #32]
 8002756:	4952      	ldr	r1, [pc, #328]	; (80028a0 <I2C_RequestMemoryRead+0x1cc>)
 8002758:	68f8      	ldr	r0, [r7, #12]
 800275a:	f000 f8fa 	bl	8002952 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800275e:	4603      	mov	r3, r0
 8002760:	2b00      	cmp	r3, #0
 8002762:	d001      	beq.n	8002768 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8002764:	2301      	movs	r3, #1
 8002766:	e097      	b.n	8002898 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002768:	2300      	movs	r3, #0
 800276a:	617b      	str	r3, [r7, #20]
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	695b      	ldr	r3, [r3, #20]
 8002772:	617b      	str	r3, [r7, #20]
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	699b      	ldr	r3, [r3, #24]
 800277a:	617b      	str	r3, [r7, #20]
 800277c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800277e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002780:	6a39      	ldr	r1, [r7, #32]
 8002782:	68f8      	ldr	r0, [r7, #12]
 8002784:	f000 f964 	bl	8002a50 <I2C_WaitOnTXEFlagUntilTimeout>
 8002788:	4603      	mov	r3, r0
 800278a:	2b00      	cmp	r3, #0
 800278c:	d00d      	beq.n	80027aa <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002792:	2b04      	cmp	r3, #4
 8002794:	d107      	bne.n	80027a6 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	681a      	ldr	r2, [r3, #0]
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80027a4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80027a6:	2301      	movs	r3, #1
 80027a8:	e076      	b.n	8002898 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80027aa:	88fb      	ldrh	r3, [r7, #6]
 80027ac:	2b01      	cmp	r3, #1
 80027ae:	d105      	bne.n	80027bc <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80027b0:	893b      	ldrh	r3, [r7, #8]
 80027b2:	b2da      	uxtb	r2, r3
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	611a      	str	r2, [r3, #16]
 80027ba:	e021      	b.n	8002800 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80027bc:	893b      	ldrh	r3, [r7, #8]
 80027be:	0a1b      	lsrs	r3, r3, #8
 80027c0:	b29b      	uxth	r3, r3
 80027c2:	b2da      	uxtb	r2, r3
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80027ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80027cc:	6a39      	ldr	r1, [r7, #32]
 80027ce:	68f8      	ldr	r0, [r7, #12]
 80027d0:	f000 f93e 	bl	8002a50 <I2C_WaitOnTXEFlagUntilTimeout>
 80027d4:	4603      	mov	r3, r0
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d00d      	beq.n	80027f6 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027de:	2b04      	cmp	r3, #4
 80027e0:	d107      	bne.n	80027f2 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	681a      	ldr	r2, [r3, #0]
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80027f0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80027f2:	2301      	movs	r3, #1
 80027f4:	e050      	b.n	8002898 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80027f6:	893b      	ldrh	r3, [r7, #8]
 80027f8:	b2da      	uxtb	r2, r3
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002800:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002802:	6a39      	ldr	r1, [r7, #32]
 8002804:	68f8      	ldr	r0, [r7, #12]
 8002806:	f000 f923 	bl	8002a50 <I2C_WaitOnTXEFlagUntilTimeout>
 800280a:	4603      	mov	r3, r0
 800280c:	2b00      	cmp	r3, #0
 800280e:	d00d      	beq.n	800282c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002814:	2b04      	cmp	r3, #4
 8002816:	d107      	bne.n	8002828 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	681a      	ldr	r2, [r3, #0]
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002826:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002828:	2301      	movs	r3, #1
 800282a:	e035      	b.n	8002898 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	681a      	ldr	r2, [r3, #0]
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800283a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800283c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800283e:	9300      	str	r3, [sp, #0]
 8002840:	6a3b      	ldr	r3, [r7, #32]
 8002842:	2200      	movs	r2, #0
 8002844:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002848:	68f8      	ldr	r0, [r7, #12]
 800284a:	f000 f82b 	bl	80028a4 <I2C_WaitOnFlagUntilTimeout>
 800284e:	4603      	mov	r3, r0
 8002850:	2b00      	cmp	r3, #0
 8002852:	d00d      	beq.n	8002870 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800285e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002862:	d103      	bne.n	800286c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	f44f 7200 	mov.w	r2, #512	; 0x200
 800286a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800286c:	2303      	movs	r3, #3
 800286e:	e013      	b.n	8002898 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002870:	897b      	ldrh	r3, [r7, #10]
 8002872:	b2db      	uxtb	r3, r3
 8002874:	f043 0301 	orr.w	r3, r3, #1
 8002878:	b2da      	uxtb	r2, r3
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002880:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002882:	6a3a      	ldr	r2, [r7, #32]
 8002884:	4906      	ldr	r1, [pc, #24]	; (80028a0 <I2C_RequestMemoryRead+0x1cc>)
 8002886:	68f8      	ldr	r0, [r7, #12]
 8002888:	f000 f863 	bl	8002952 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800288c:	4603      	mov	r3, r0
 800288e:	2b00      	cmp	r3, #0
 8002890:	d001      	beq.n	8002896 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8002892:	2301      	movs	r3, #1
 8002894:	e000      	b.n	8002898 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8002896:	2300      	movs	r3, #0
}
 8002898:	4618      	mov	r0, r3
 800289a:	3718      	adds	r7, #24
 800289c:	46bd      	mov	sp, r7
 800289e:	bd80      	pop	{r7, pc}
 80028a0:	00010002 	.word	0x00010002

080028a4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80028a4:	b580      	push	{r7, lr}
 80028a6:	b084      	sub	sp, #16
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	60f8      	str	r0, [r7, #12]
 80028ac:	60b9      	str	r1, [r7, #8]
 80028ae:	603b      	str	r3, [r7, #0]
 80028b0:	4613      	mov	r3, r2
 80028b2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80028b4:	e025      	b.n	8002902 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80028b6:	683b      	ldr	r3, [r7, #0]
 80028b8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80028bc:	d021      	beq.n	8002902 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80028be:	f7fe ff5b 	bl	8001778 <HAL_GetTick>
 80028c2:	4602      	mov	r2, r0
 80028c4:	69bb      	ldr	r3, [r7, #24]
 80028c6:	1ad3      	subs	r3, r2, r3
 80028c8:	683a      	ldr	r2, [r7, #0]
 80028ca:	429a      	cmp	r2, r3
 80028cc:	d302      	bcc.n	80028d4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80028ce:	683b      	ldr	r3, [r7, #0]
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d116      	bne.n	8002902 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	2200      	movs	r2, #0
 80028d8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	2220      	movs	r2, #32
 80028de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	2200      	movs	r2, #0
 80028e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ee:	f043 0220 	orr.w	r2, r3, #32
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	2200      	movs	r2, #0
 80028fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80028fe:	2301      	movs	r3, #1
 8002900:	e023      	b.n	800294a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002902:	68bb      	ldr	r3, [r7, #8]
 8002904:	0c1b      	lsrs	r3, r3, #16
 8002906:	b2db      	uxtb	r3, r3
 8002908:	2b01      	cmp	r3, #1
 800290a:	d10d      	bne.n	8002928 <I2C_WaitOnFlagUntilTimeout+0x84>
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	695b      	ldr	r3, [r3, #20]
 8002912:	43da      	mvns	r2, r3
 8002914:	68bb      	ldr	r3, [r7, #8]
 8002916:	4013      	ands	r3, r2
 8002918:	b29b      	uxth	r3, r3
 800291a:	2b00      	cmp	r3, #0
 800291c:	bf0c      	ite	eq
 800291e:	2301      	moveq	r3, #1
 8002920:	2300      	movne	r3, #0
 8002922:	b2db      	uxtb	r3, r3
 8002924:	461a      	mov	r2, r3
 8002926:	e00c      	b.n	8002942 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	699b      	ldr	r3, [r3, #24]
 800292e:	43da      	mvns	r2, r3
 8002930:	68bb      	ldr	r3, [r7, #8]
 8002932:	4013      	ands	r3, r2
 8002934:	b29b      	uxth	r3, r3
 8002936:	2b00      	cmp	r3, #0
 8002938:	bf0c      	ite	eq
 800293a:	2301      	moveq	r3, #1
 800293c:	2300      	movne	r3, #0
 800293e:	b2db      	uxtb	r3, r3
 8002940:	461a      	mov	r2, r3
 8002942:	79fb      	ldrb	r3, [r7, #7]
 8002944:	429a      	cmp	r2, r3
 8002946:	d0b6      	beq.n	80028b6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002948:	2300      	movs	r3, #0
}
 800294a:	4618      	mov	r0, r3
 800294c:	3710      	adds	r7, #16
 800294e:	46bd      	mov	sp, r7
 8002950:	bd80      	pop	{r7, pc}

08002952 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002952:	b580      	push	{r7, lr}
 8002954:	b084      	sub	sp, #16
 8002956:	af00      	add	r7, sp, #0
 8002958:	60f8      	str	r0, [r7, #12]
 800295a:	60b9      	str	r1, [r7, #8]
 800295c:	607a      	str	r2, [r7, #4]
 800295e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002960:	e051      	b.n	8002a06 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	695b      	ldr	r3, [r3, #20]
 8002968:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800296c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002970:	d123      	bne.n	80029ba <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	681a      	ldr	r2, [r3, #0]
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002980:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800298a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	2200      	movs	r2, #0
 8002990:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	2220      	movs	r2, #32
 8002996:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	2200      	movs	r2, #0
 800299e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029a6:	f043 0204 	orr.w	r2, r3, #4
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	2200      	movs	r2, #0
 80029b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80029b6:	2301      	movs	r3, #1
 80029b8:	e046      	b.n	8002a48 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80029c0:	d021      	beq.n	8002a06 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80029c2:	f7fe fed9 	bl	8001778 <HAL_GetTick>
 80029c6:	4602      	mov	r2, r0
 80029c8:	683b      	ldr	r3, [r7, #0]
 80029ca:	1ad3      	subs	r3, r2, r3
 80029cc:	687a      	ldr	r2, [r7, #4]
 80029ce:	429a      	cmp	r2, r3
 80029d0:	d302      	bcc.n	80029d8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d116      	bne.n	8002a06 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	2200      	movs	r2, #0
 80029dc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	2220      	movs	r2, #32
 80029e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	2200      	movs	r2, #0
 80029ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029f2:	f043 0220 	orr.w	r2, r3, #32
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	2200      	movs	r2, #0
 80029fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002a02:	2301      	movs	r3, #1
 8002a04:	e020      	b.n	8002a48 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002a06:	68bb      	ldr	r3, [r7, #8]
 8002a08:	0c1b      	lsrs	r3, r3, #16
 8002a0a:	b2db      	uxtb	r3, r3
 8002a0c:	2b01      	cmp	r3, #1
 8002a0e:	d10c      	bne.n	8002a2a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	695b      	ldr	r3, [r3, #20]
 8002a16:	43da      	mvns	r2, r3
 8002a18:	68bb      	ldr	r3, [r7, #8]
 8002a1a:	4013      	ands	r3, r2
 8002a1c:	b29b      	uxth	r3, r3
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	bf14      	ite	ne
 8002a22:	2301      	movne	r3, #1
 8002a24:	2300      	moveq	r3, #0
 8002a26:	b2db      	uxtb	r3, r3
 8002a28:	e00b      	b.n	8002a42 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	699b      	ldr	r3, [r3, #24]
 8002a30:	43da      	mvns	r2, r3
 8002a32:	68bb      	ldr	r3, [r7, #8]
 8002a34:	4013      	ands	r3, r2
 8002a36:	b29b      	uxth	r3, r3
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	bf14      	ite	ne
 8002a3c:	2301      	movne	r3, #1
 8002a3e:	2300      	moveq	r3, #0
 8002a40:	b2db      	uxtb	r3, r3
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d18d      	bne.n	8002962 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002a46:	2300      	movs	r3, #0
}
 8002a48:	4618      	mov	r0, r3
 8002a4a:	3710      	adds	r7, #16
 8002a4c:	46bd      	mov	sp, r7
 8002a4e:	bd80      	pop	{r7, pc}

08002a50 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002a50:	b580      	push	{r7, lr}
 8002a52:	b084      	sub	sp, #16
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	60f8      	str	r0, [r7, #12]
 8002a58:	60b9      	str	r1, [r7, #8]
 8002a5a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002a5c:	e02d      	b.n	8002aba <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002a5e:	68f8      	ldr	r0, [r7, #12]
 8002a60:	f000 f8ce 	bl	8002c00 <I2C_IsAcknowledgeFailed>
 8002a64:	4603      	mov	r3, r0
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d001      	beq.n	8002a6e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002a6a:	2301      	movs	r3, #1
 8002a6c:	e02d      	b.n	8002aca <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a6e:	68bb      	ldr	r3, [r7, #8]
 8002a70:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002a74:	d021      	beq.n	8002aba <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a76:	f7fe fe7f 	bl	8001778 <HAL_GetTick>
 8002a7a:	4602      	mov	r2, r0
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	1ad3      	subs	r3, r2, r3
 8002a80:	68ba      	ldr	r2, [r7, #8]
 8002a82:	429a      	cmp	r2, r3
 8002a84:	d302      	bcc.n	8002a8c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002a86:	68bb      	ldr	r3, [r7, #8]
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d116      	bne.n	8002aba <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	2200      	movs	r2, #0
 8002a90:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	2220      	movs	r2, #32
 8002a96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	2200      	movs	r2, #0
 8002a9e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aa6:	f043 0220 	orr.w	r2, r3, #32
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002ab6:	2301      	movs	r3, #1
 8002ab8:	e007      	b.n	8002aca <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	695b      	ldr	r3, [r3, #20]
 8002ac0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ac4:	2b80      	cmp	r3, #128	; 0x80
 8002ac6:	d1ca      	bne.n	8002a5e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002ac8:	2300      	movs	r3, #0
}
 8002aca:	4618      	mov	r0, r3
 8002acc:	3710      	adds	r7, #16
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	bd80      	pop	{r7, pc}

08002ad2 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002ad2:	b580      	push	{r7, lr}
 8002ad4:	b084      	sub	sp, #16
 8002ad6:	af00      	add	r7, sp, #0
 8002ad8:	60f8      	str	r0, [r7, #12]
 8002ada:	60b9      	str	r1, [r7, #8]
 8002adc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002ade:	e02d      	b.n	8002b3c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002ae0:	68f8      	ldr	r0, [r7, #12]
 8002ae2:	f000 f88d 	bl	8002c00 <I2C_IsAcknowledgeFailed>
 8002ae6:	4603      	mov	r3, r0
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d001      	beq.n	8002af0 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002aec:	2301      	movs	r3, #1
 8002aee:	e02d      	b.n	8002b4c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002af0:	68bb      	ldr	r3, [r7, #8]
 8002af2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002af6:	d021      	beq.n	8002b3c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002af8:	f7fe fe3e 	bl	8001778 <HAL_GetTick>
 8002afc:	4602      	mov	r2, r0
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	1ad3      	subs	r3, r2, r3
 8002b02:	68ba      	ldr	r2, [r7, #8]
 8002b04:	429a      	cmp	r2, r3
 8002b06:	d302      	bcc.n	8002b0e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002b08:	68bb      	ldr	r3, [r7, #8]
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d116      	bne.n	8002b3c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	2200      	movs	r2, #0
 8002b12:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	2220      	movs	r2, #32
 8002b18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	2200      	movs	r2, #0
 8002b20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b28:	f043 0220 	orr.w	r2, r3, #32
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	2200      	movs	r2, #0
 8002b34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002b38:	2301      	movs	r3, #1
 8002b3a:	e007      	b.n	8002b4c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	695b      	ldr	r3, [r3, #20]
 8002b42:	f003 0304 	and.w	r3, r3, #4
 8002b46:	2b04      	cmp	r3, #4
 8002b48:	d1ca      	bne.n	8002ae0 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002b4a:	2300      	movs	r3, #0
}
 8002b4c:	4618      	mov	r0, r3
 8002b4e:	3710      	adds	r7, #16
 8002b50:	46bd      	mov	sp, r7
 8002b52:	bd80      	pop	{r7, pc}

08002b54 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002b54:	b580      	push	{r7, lr}
 8002b56:	b084      	sub	sp, #16
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	60f8      	str	r0, [r7, #12]
 8002b5c:	60b9      	str	r1, [r7, #8]
 8002b5e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002b60:	e042      	b.n	8002be8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	695b      	ldr	r3, [r3, #20]
 8002b68:	f003 0310 	and.w	r3, r3, #16
 8002b6c:	2b10      	cmp	r3, #16
 8002b6e:	d119      	bne.n	8002ba4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f06f 0210 	mvn.w	r2, #16
 8002b78:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	2220      	movs	r2, #32
 8002b84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	2200      	movs	r2, #0
 8002b8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	2200      	movs	r2, #0
 8002b9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002ba0:	2301      	movs	r3, #1
 8002ba2:	e029      	b.n	8002bf8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ba4:	f7fe fde8 	bl	8001778 <HAL_GetTick>
 8002ba8:	4602      	mov	r2, r0
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	1ad3      	subs	r3, r2, r3
 8002bae:	68ba      	ldr	r2, [r7, #8]
 8002bb0:	429a      	cmp	r2, r3
 8002bb2:	d302      	bcc.n	8002bba <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002bb4:	68bb      	ldr	r3, [r7, #8]
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d116      	bne.n	8002be8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	2200      	movs	r2, #0
 8002bbe:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	2220      	movs	r2, #32
 8002bc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	2200      	movs	r2, #0
 8002bcc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bd4:	f043 0220 	orr.w	r2, r3, #32
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	2200      	movs	r2, #0
 8002be0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002be4:	2301      	movs	r3, #1
 8002be6:	e007      	b.n	8002bf8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	695b      	ldr	r3, [r3, #20]
 8002bee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bf2:	2b40      	cmp	r3, #64	; 0x40
 8002bf4:	d1b5      	bne.n	8002b62 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002bf6:	2300      	movs	r3, #0
}
 8002bf8:	4618      	mov	r0, r3
 8002bfa:	3710      	adds	r7, #16
 8002bfc:	46bd      	mov	sp, r7
 8002bfe:	bd80      	pop	{r7, pc}

08002c00 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002c00:	b480      	push	{r7}
 8002c02:	b083      	sub	sp, #12
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	695b      	ldr	r3, [r3, #20]
 8002c0e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c12:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c16:	d11b      	bne.n	8002c50 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002c20:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	2200      	movs	r2, #0
 8002c26:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	2220      	movs	r2, #32
 8002c2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	2200      	movs	r2, #0
 8002c34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c3c:	f043 0204 	orr.w	r2, r3, #4
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	2200      	movs	r2, #0
 8002c48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002c4c:	2301      	movs	r3, #1
 8002c4e:	e000      	b.n	8002c52 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002c50:	2300      	movs	r3, #0
}
 8002c52:	4618      	mov	r0, r3
 8002c54:	370c      	adds	r7, #12
 8002c56:	46bd      	mov	sp, r7
 8002c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5c:	4770      	bx	lr
	...

08002c60 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002c60:	b580      	push	{r7, lr}
 8002c62:	b086      	sub	sp, #24
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d101      	bne.n	8002c72 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002c6e:	2301      	movs	r3, #1
 8002c70:	e267      	b.n	8003142 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f003 0301 	and.w	r3, r3, #1
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d075      	beq.n	8002d6a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002c7e:	4b88      	ldr	r3, [pc, #544]	; (8002ea0 <HAL_RCC_OscConfig+0x240>)
 8002c80:	689b      	ldr	r3, [r3, #8]
 8002c82:	f003 030c 	and.w	r3, r3, #12
 8002c86:	2b04      	cmp	r3, #4
 8002c88:	d00c      	beq.n	8002ca4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002c8a:	4b85      	ldr	r3, [pc, #532]	; (8002ea0 <HAL_RCC_OscConfig+0x240>)
 8002c8c:	689b      	ldr	r3, [r3, #8]
 8002c8e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002c92:	2b08      	cmp	r3, #8
 8002c94:	d112      	bne.n	8002cbc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002c96:	4b82      	ldr	r3, [pc, #520]	; (8002ea0 <HAL_RCC_OscConfig+0x240>)
 8002c98:	685b      	ldr	r3, [r3, #4]
 8002c9a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c9e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002ca2:	d10b      	bne.n	8002cbc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ca4:	4b7e      	ldr	r3, [pc, #504]	; (8002ea0 <HAL_RCC_OscConfig+0x240>)
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d05b      	beq.n	8002d68 <HAL_RCC_OscConfig+0x108>
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	685b      	ldr	r3, [r3, #4]
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d157      	bne.n	8002d68 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002cb8:	2301      	movs	r3, #1
 8002cba:	e242      	b.n	8003142 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	685b      	ldr	r3, [r3, #4]
 8002cc0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002cc4:	d106      	bne.n	8002cd4 <HAL_RCC_OscConfig+0x74>
 8002cc6:	4b76      	ldr	r3, [pc, #472]	; (8002ea0 <HAL_RCC_OscConfig+0x240>)
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	4a75      	ldr	r2, [pc, #468]	; (8002ea0 <HAL_RCC_OscConfig+0x240>)
 8002ccc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002cd0:	6013      	str	r3, [r2, #0]
 8002cd2:	e01d      	b.n	8002d10 <HAL_RCC_OscConfig+0xb0>
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	685b      	ldr	r3, [r3, #4]
 8002cd8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002cdc:	d10c      	bne.n	8002cf8 <HAL_RCC_OscConfig+0x98>
 8002cde:	4b70      	ldr	r3, [pc, #448]	; (8002ea0 <HAL_RCC_OscConfig+0x240>)
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	4a6f      	ldr	r2, [pc, #444]	; (8002ea0 <HAL_RCC_OscConfig+0x240>)
 8002ce4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002ce8:	6013      	str	r3, [r2, #0]
 8002cea:	4b6d      	ldr	r3, [pc, #436]	; (8002ea0 <HAL_RCC_OscConfig+0x240>)
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	4a6c      	ldr	r2, [pc, #432]	; (8002ea0 <HAL_RCC_OscConfig+0x240>)
 8002cf0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002cf4:	6013      	str	r3, [r2, #0]
 8002cf6:	e00b      	b.n	8002d10 <HAL_RCC_OscConfig+0xb0>
 8002cf8:	4b69      	ldr	r3, [pc, #420]	; (8002ea0 <HAL_RCC_OscConfig+0x240>)
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	4a68      	ldr	r2, [pc, #416]	; (8002ea0 <HAL_RCC_OscConfig+0x240>)
 8002cfe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d02:	6013      	str	r3, [r2, #0]
 8002d04:	4b66      	ldr	r3, [pc, #408]	; (8002ea0 <HAL_RCC_OscConfig+0x240>)
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	4a65      	ldr	r2, [pc, #404]	; (8002ea0 <HAL_RCC_OscConfig+0x240>)
 8002d0a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002d0e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	685b      	ldr	r3, [r3, #4]
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d013      	beq.n	8002d40 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d18:	f7fe fd2e 	bl	8001778 <HAL_GetTick>
 8002d1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d1e:	e008      	b.n	8002d32 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002d20:	f7fe fd2a 	bl	8001778 <HAL_GetTick>
 8002d24:	4602      	mov	r2, r0
 8002d26:	693b      	ldr	r3, [r7, #16]
 8002d28:	1ad3      	subs	r3, r2, r3
 8002d2a:	2b64      	cmp	r3, #100	; 0x64
 8002d2c:	d901      	bls.n	8002d32 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002d2e:	2303      	movs	r3, #3
 8002d30:	e207      	b.n	8003142 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d32:	4b5b      	ldr	r3, [pc, #364]	; (8002ea0 <HAL_RCC_OscConfig+0x240>)
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d0f0      	beq.n	8002d20 <HAL_RCC_OscConfig+0xc0>
 8002d3e:	e014      	b.n	8002d6a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d40:	f7fe fd1a 	bl	8001778 <HAL_GetTick>
 8002d44:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d46:	e008      	b.n	8002d5a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002d48:	f7fe fd16 	bl	8001778 <HAL_GetTick>
 8002d4c:	4602      	mov	r2, r0
 8002d4e:	693b      	ldr	r3, [r7, #16]
 8002d50:	1ad3      	subs	r3, r2, r3
 8002d52:	2b64      	cmp	r3, #100	; 0x64
 8002d54:	d901      	bls.n	8002d5a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002d56:	2303      	movs	r3, #3
 8002d58:	e1f3      	b.n	8003142 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d5a:	4b51      	ldr	r3, [pc, #324]	; (8002ea0 <HAL_RCC_OscConfig+0x240>)
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d1f0      	bne.n	8002d48 <HAL_RCC_OscConfig+0xe8>
 8002d66:	e000      	b.n	8002d6a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d68:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f003 0302 	and.w	r3, r3, #2
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d063      	beq.n	8002e3e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002d76:	4b4a      	ldr	r3, [pc, #296]	; (8002ea0 <HAL_RCC_OscConfig+0x240>)
 8002d78:	689b      	ldr	r3, [r3, #8]
 8002d7a:	f003 030c 	and.w	r3, r3, #12
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d00b      	beq.n	8002d9a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002d82:	4b47      	ldr	r3, [pc, #284]	; (8002ea0 <HAL_RCC_OscConfig+0x240>)
 8002d84:	689b      	ldr	r3, [r3, #8]
 8002d86:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002d8a:	2b08      	cmp	r3, #8
 8002d8c:	d11c      	bne.n	8002dc8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002d8e:	4b44      	ldr	r3, [pc, #272]	; (8002ea0 <HAL_RCC_OscConfig+0x240>)
 8002d90:	685b      	ldr	r3, [r3, #4]
 8002d92:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d116      	bne.n	8002dc8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d9a:	4b41      	ldr	r3, [pc, #260]	; (8002ea0 <HAL_RCC_OscConfig+0x240>)
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f003 0302 	and.w	r3, r3, #2
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d005      	beq.n	8002db2 <HAL_RCC_OscConfig+0x152>
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	68db      	ldr	r3, [r3, #12]
 8002daa:	2b01      	cmp	r3, #1
 8002dac:	d001      	beq.n	8002db2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002dae:	2301      	movs	r3, #1
 8002db0:	e1c7      	b.n	8003142 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002db2:	4b3b      	ldr	r3, [pc, #236]	; (8002ea0 <HAL_RCC_OscConfig+0x240>)
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	691b      	ldr	r3, [r3, #16]
 8002dbe:	00db      	lsls	r3, r3, #3
 8002dc0:	4937      	ldr	r1, [pc, #220]	; (8002ea0 <HAL_RCC_OscConfig+0x240>)
 8002dc2:	4313      	orrs	r3, r2
 8002dc4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002dc6:	e03a      	b.n	8002e3e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	68db      	ldr	r3, [r3, #12]
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d020      	beq.n	8002e12 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002dd0:	4b34      	ldr	r3, [pc, #208]	; (8002ea4 <HAL_RCC_OscConfig+0x244>)
 8002dd2:	2201      	movs	r2, #1
 8002dd4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dd6:	f7fe fccf 	bl	8001778 <HAL_GetTick>
 8002dda:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ddc:	e008      	b.n	8002df0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002dde:	f7fe fccb 	bl	8001778 <HAL_GetTick>
 8002de2:	4602      	mov	r2, r0
 8002de4:	693b      	ldr	r3, [r7, #16]
 8002de6:	1ad3      	subs	r3, r2, r3
 8002de8:	2b02      	cmp	r3, #2
 8002dea:	d901      	bls.n	8002df0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002dec:	2303      	movs	r3, #3
 8002dee:	e1a8      	b.n	8003142 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002df0:	4b2b      	ldr	r3, [pc, #172]	; (8002ea0 <HAL_RCC_OscConfig+0x240>)
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f003 0302 	and.w	r3, r3, #2
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d0f0      	beq.n	8002dde <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002dfc:	4b28      	ldr	r3, [pc, #160]	; (8002ea0 <HAL_RCC_OscConfig+0x240>)
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	691b      	ldr	r3, [r3, #16]
 8002e08:	00db      	lsls	r3, r3, #3
 8002e0a:	4925      	ldr	r1, [pc, #148]	; (8002ea0 <HAL_RCC_OscConfig+0x240>)
 8002e0c:	4313      	orrs	r3, r2
 8002e0e:	600b      	str	r3, [r1, #0]
 8002e10:	e015      	b.n	8002e3e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002e12:	4b24      	ldr	r3, [pc, #144]	; (8002ea4 <HAL_RCC_OscConfig+0x244>)
 8002e14:	2200      	movs	r2, #0
 8002e16:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e18:	f7fe fcae 	bl	8001778 <HAL_GetTick>
 8002e1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e1e:	e008      	b.n	8002e32 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002e20:	f7fe fcaa 	bl	8001778 <HAL_GetTick>
 8002e24:	4602      	mov	r2, r0
 8002e26:	693b      	ldr	r3, [r7, #16]
 8002e28:	1ad3      	subs	r3, r2, r3
 8002e2a:	2b02      	cmp	r3, #2
 8002e2c:	d901      	bls.n	8002e32 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002e2e:	2303      	movs	r3, #3
 8002e30:	e187      	b.n	8003142 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e32:	4b1b      	ldr	r3, [pc, #108]	; (8002ea0 <HAL_RCC_OscConfig+0x240>)
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f003 0302 	and.w	r3, r3, #2
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d1f0      	bne.n	8002e20 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f003 0308 	and.w	r3, r3, #8
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d036      	beq.n	8002eb8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	695b      	ldr	r3, [r3, #20]
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d016      	beq.n	8002e80 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002e52:	4b15      	ldr	r3, [pc, #84]	; (8002ea8 <HAL_RCC_OscConfig+0x248>)
 8002e54:	2201      	movs	r2, #1
 8002e56:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e58:	f7fe fc8e 	bl	8001778 <HAL_GetTick>
 8002e5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e5e:	e008      	b.n	8002e72 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002e60:	f7fe fc8a 	bl	8001778 <HAL_GetTick>
 8002e64:	4602      	mov	r2, r0
 8002e66:	693b      	ldr	r3, [r7, #16]
 8002e68:	1ad3      	subs	r3, r2, r3
 8002e6a:	2b02      	cmp	r3, #2
 8002e6c:	d901      	bls.n	8002e72 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002e6e:	2303      	movs	r3, #3
 8002e70:	e167      	b.n	8003142 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e72:	4b0b      	ldr	r3, [pc, #44]	; (8002ea0 <HAL_RCC_OscConfig+0x240>)
 8002e74:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e76:	f003 0302 	and.w	r3, r3, #2
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d0f0      	beq.n	8002e60 <HAL_RCC_OscConfig+0x200>
 8002e7e:	e01b      	b.n	8002eb8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002e80:	4b09      	ldr	r3, [pc, #36]	; (8002ea8 <HAL_RCC_OscConfig+0x248>)
 8002e82:	2200      	movs	r2, #0
 8002e84:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e86:	f7fe fc77 	bl	8001778 <HAL_GetTick>
 8002e8a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e8c:	e00e      	b.n	8002eac <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002e8e:	f7fe fc73 	bl	8001778 <HAL_GetTick>
 8002e92:	4602      	mov	r2, r0
 8002e94:	693b      	ldr	r3, [r7, #16]
 8002e96:	1ad3      	subs	r3, r2, r3
 8002e98:	2b02      	cmp	r3, #2
 8002e9a:	d907      	bls.n	8002eac <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002e9c:	2303      	movs	r3, #3
 8002e9e:	e150      	b.n	8003142 <HAL_RCC_OscConfig+0x4e2>
 8002ea0:	40023800 	.word	0x40023800
 8002ea4:	42470000 	.word	0x42470000
 8002ea8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002eac:	4b88      	ldr	r3, [pc, #544]	; (80030d0 <HAL_RCC_OscConfig+0x470>)
 8002eae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002eb0:	f003 0302 	and.w	r3, r3, #2
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d1ea      	bne.n	8002e8e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f003 0304 	and.w	r3, r3, #4
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	f000 8097 	beq.w	8002ff4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002ec6:	2300      	movs	r3, #0
 8002ec8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002eca:	4b81      	ldr	r3, [pc, #516]	; (80030d0 <HAL_RCC_OscConfig+0x470>)
 8002ecc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ece:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d10f      	bne.n	8002ef6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ed6:	2300      	movs	r3, #0
 8002ed8:	60bb      	str	r3, [r7, #8]
 8002eda:	4b7d      	ldr	r3, [pc, #500]	; (80030d0 <HAL_RCC_OscConfig+0x470>)
 8002edc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ede:	4a7c      	ldr	r2, [pc, #496]	; (80030d0 <HAL_RCC_OscConfig+0x470>)
 8002ee0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ee4:	6413      	str	r3, [r2, #64]	; 0x40
 8002ee6:	4b7a      	ldr	r3, [pc, #488]	; (80030d0 <HAL_RCC_OscConfig+0x470>)
 8002ee8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002eee:	60bb      	str	r3, [r7, #8]
 8002ef0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002ef2:	2301      	movs	r3, #1
 8002ef4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ef6:	4b77      	ldr	r3, [pc, #476]	; (80030d4 <HAL_RCC_OscConfig+0x474>)
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d118      	bne.n	8002f34 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002f02:	4b74      	ldr	r3, [pc, #464]	; (80030d4 <HAL_RCC_OscConfig+0x474>)
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	4a73      	ldr	r2, [pc, #460]	; (80030d4 <HAL_RCC_OscConfig+0x474>)
 8002f08:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f0c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002f0e:	f7fe fc33 	bl	8001778 <HAL_GetTick>
 8002f12:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f14:	e008      	b.n	8002f28 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f16:	f7fe fc2f 	bl	8001778 <HAL_GetTick>
 8002f1a:	4602      	mov	r2, r0
 8002f1c:	693b      	ldr	r3, [r7, #16]
 8002f1e:	1ad3      	subs	r3, r2, r3
 8002f20:	2b02      	cmp	r3, #2
 8002f22:	d901      	bls.n	8002f28 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002f24:	2303      	movs	r3, #3
 8002f26:	e10c      	b.n	8003142 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f28:	4b6a      	ldr	r3, [pc, #424]	; (80030d4 <HAL_RCC_OscConfig+0x474>)
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d0f0      	beq.n	8002f16 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	689b      	ldr	r3, [r3, #8]
 8002f38:	2b01      	cmp	r3, #1
 8002f3a:	d106      	bne.n	8002f4a <HAL_RCC_OscConfig+0x2ea>
 8002f3c:	4b64      	ldr	r3, [pc, #400]	; (80030d0 <HAL_RCC_OscConfig+0x470>)
 8002f3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f40:	4a63      	ldr	r2, [pc, #396]	; (80030d0 <HAL_RCC_OscConfig+0x470>)
 8002f42:	f043 0301 	orr.w	r3, r3, #1
 8002f46:	6713      	str	r3, [r2, #112]	; 0x70
 8002f48:	e01c      	b.n	8002f84 <HAL_RCC_OscConfig+0x324>
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	689b      	ldr	r3, [r3, #8]
 8002f4e:	2b05      	cmp	r3, #5
 8002f50:	d10c      	bne.n	8002f6c <HAL_RCC_OscConfig+0x30c>
 8002f52:	4b5f      	ldr	r3, [pc, #380]	; (80030d0 <HAL_RCC_OscConfig+0x470>)
 8002f54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f56:	4a5e      	ldr	r2, [pc, #376]	; (80030d0 <HAL_RCC_OscConfig+0x470>)
 8002f58:	f043 0304 	orr.w	r3, r3, #4
 8002f5c:	6713      	str	r3, [r2, #112]	; 0x70
 8002f5e:	4b5c      	ldr	r3, [pc, #368]	; (80030d0 <HAL_RCC_OscConfig+0x470>)
 8002f60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f62:	4a5b      	ldr	r2, [pc, #364]	; (80030d0 <HAL_RCC_OscConfig+0x470>)
 8002f64:	f043 0301 	orr.w	r3, r3, #1
 8002f68:	6713      	str	r3, [r2, #112]	; 0x70
 8002f6a:	e00b      	b.n	8002f84 <HAL_RCC_OscConfig+0x324>
 8002f6c:	4b58      	ldr	r3, [pc, #352]	; (80030d0 <HAL_RCC_OscConfig+0x470>)
 8002f6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f70:	4a57      	ldr	r2, [pc, #348]	; (80030d0 <HAL_RCC_OscConfig+0x470>)
 8002f72:	f023 0301 	bic.w	r3, r3, #1
 8002f76:	6713      	str	r3, [r2, #112]	; 0x70
 8002f78:	4b55      	ldr	r3, [pc, #340]	; (80030d0 <HAL_RCC_OscConfig+0x470>)
 8002f7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f7c:	4a54      	ldr	r2, [pc, #336]	; (80030d0 <HAL_RCC_OscConfig+0x470>)
 8002f7e:	f023 0304 	bic.w	r3, r3, #4
 8002f82:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	689b      	ldr	r3, [r3, #8]
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d015      	beq.n	8002fb8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f8c:	f7fe fbf4 	bl	8001778 <HAL_GetTick>
 8002f90:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f92:	e00a      	b.n	8002faa <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002f94:	f7fe fbf0 	bl	8001778 <HAL_GetTick>
 8002f98:	4602      	mov	r2, r0
 8002f9a:	693b      	ldr	r3, [r7, #16]
 8002f9c:	1ad3      	subs	r3, r2, r3
 8002f9e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fa2:	4293      	cmp	r3, r2
 8002fa4:	d901      	bls.n	8002faa <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002fa6:	2303      	movs	r3, #3
 8002fa8:	e0cb      	b.n	8003142 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002faa:	4b49      	ldr	r3, [pc, #292]	; (80030d0 <HAL_RCC_OscConfig+0x470>)
 8002fac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fae:	f003 0302 	and.w	r3, r3, #2
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d0ee      	beq.n	8002f94 <HAL_RCC_OscConfig+0x334>
 8002fb6:	e014      	b.n	8002fe2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002fb8:	f7fe fbde 	bl	8001778 <HAL_GetTick>
 8002fbc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002fbe:	e00a      	b.n	8002fd6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002fc0:	f7fe fbda 	bl	8001778 <HAL_GetTick>
 8002fc4:	4602      	mov	r2, r0
 8002fc6:	693b      	ldr	r3, [r7, #16]
 8002fc8:	1ad3      	subs	r3, r2, r3
 8002fca:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fce:	4293      	cmp	r3, r2
 8002fd0:	d901      	bls.n	8002fd6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002fd2:	2303      	movs	r3, #3
 8002fd4:	e0b5      	b.n	8003142 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002fd6:	4b3e      	ldr	r3, [pc, #248]	; (80030d0 <HAL_RCC_OscConfig+0x470>)
 8002fd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fda:	f003 0302 	and.w	r3, r3, #2
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d1ee      	bne.n	8002fc0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002fe2:	7dfb      	ldrb	r3, [r7, #23]
 8002fe4:	2b01      	cmp	r3, #1
 8002fe6:	d105      	bne.n	8002ff4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002fe8:	4b39      	ldr	r3, [pc, #228]	; (80030d0 <HAL_RCC_OscConfig+0x470>)
 8002fea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fec:	4a38      	ldr	r2, [pc, #224]	; (80030d0 <HAL_RCC_OscConfig+0x470>)
 8002fee:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ff2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	699b      	ldr	r3, [r3, #24]
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	f000 80a1 	beq.w	8003140 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002ffe:	4b34      	ldr	r3, [pc, #208]	; (80030d0 <HAL_RCC_OscConfig+0x470>)
 8003000:	689b      	ldr	r3, [r3, #8]
 8003002:	f003 030c 	and.w	r3, r3, #12
 8003006:	2b08      	cmp	r3, #8
 8003008:	d05c      	beq.n	80030c4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	699b      	ldr	r3, [r3, #24]
 800300e:	2b02      	cmp	r3, #2
 8003010:	d141      	bne.n	8003096 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003012:	4b31      	ldr	r3, [pc, #196]	; (80030d8 <HAL_RCC_OscConfig+0x478>)
 8003014:	2200      	movs	r2, #0
 8003016:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003018:	f7fe fbae 	bl	8001778 <HAL_GetTick>
 800301c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800301e:	e008      	b.n	8003032 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003020:	f7fe fbaa 	bl	8001778 <HAL_GetTick>
 8003024:	4602      	mov	r2, r0
 8003026:	693b      	ldr	r3, [r7, #16]
 8003028:	1ad3      	subs	r3, r2, r3
 800302a:	2b02      	cmp	r3, #2
 800302c:	d901      	bls.n	8003032 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800302e:	2303      	movs	r3, #3
 8003030:	e087      	b.n	8003142 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003032:	4b27      	ldr	r3, [pc, #156]	; (80030d0 <HAL_RCC_OscConfig+0x470>)
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800303a:	2b00      	cmp	r3, #0
 800303c:	d1f0      	bne.n	8003020 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	69da      	ldr	r2, [r3, #28]
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	6a1b      	ldr	r3, [r3, #32]
 8003046:	431a      	orrs	r2, r3
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800304c:	019b      	lsls	r3, r3, #6
 800304e:	431a      	orrs	r2, r3
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003054:	085b      	lsrs	r3, r3, #1
 8003056:	3b01      	subs	r3, #1
 8003058:	041b      	lsls	r3, r3, #16
 800305a:	431a      	orrs	r2, r3
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003060:	061b      	lsls	r3, r3, #24
 8003062:	491b      	ldr	r1, [pc, #108]	; (80030d0 <HAL_RCC_OscConfig+0x470>)
 8003064:	4313      	orrs	r3, r2
 8003066:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003068:	4b1b      	ldr	r3, [pc, #108]	; (80030d8 <HAL_RCC_OscConfig+0x478>)
 800306a:	2201      	movs	r2, #1
 800306c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800306e:	f7fe fb83 	bl	8001778 <HAL_GetTick>
 8003072:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003074:	e008      	b.n	8003088 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003076:	f7fe fb7f 	bl	8001778 <HAL_GetTick>
 800307a:	4602      	mov	r2, r0
 800307c:	693b      	ldr	r3, [r7, #16]
 800307e:	1ad3      	subs	r3, r2, r3
 8003080:	2b02      	cmp	r3, #2
 8003082:	d901      	bls.n	8003088 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003084:	2303      	movs	r3, #3
 8003086:	e05c      	b.n	8003142 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003088:	4b11      	ldr	r3, [pc, #68]	; (80030d0 <HAL_RCC_OscConfig+0x470>)
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003090:	2b00      	cmp	r3, #0
 8003092:	d0f0      	beq.n	8003076 <HAL_RCC_OscConfig+0x416>
 8003094:	e054      	b.n	8003140 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003096:	4b10      	ldr	r3, [pc, #64]	; (80030d8 <HAL_RCC_OscConfig+0x478>)
 8003098:	2200      	movs	r2, #0
 800309a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800309c:	f7fe fb6c 	bl	8001778 <HAL_GetTick>
 80030a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030a2:	e008      	b.n	80030b6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80030a4:	f7fe fb68 	bl	8001778 <HAL_GetTick>
 80030a8:	4602      	mov	r2, r0
 80030aa:	693b      	ldr	r3, [r7, #16]
 80030ac:	1ad3      	subs	r3, r2, r3
 80030ae:	2b02      	cmp	r3, #2
 80030b0:	d901      	bls.n	80030b6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80030b2:	2303      	movs	r3, #3
 80030b4:	e045      	b.n	8003142 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030b6:	4b06      	ldr	r3, [pc, #24]	; (80030d0 <HAL_RCC_OscConfig+0x470>)
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d1f0      	bne.n	80030a4 <HAL_RCC_OscConfig+0x444>
 80030c2:	e03d      	b.n	8003140 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	699b      	ldr	r3, [r3, #24]
 80030c8:	2b01      	cmp	r3, #1
 80030ca:	d107      	bne.n	80030dc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80030cc:	2301      	movs	r3, #1
 80030ce:	e038      	b.n	8003142 <HAL_RCC_OscConfig+0x4e2>
 80030d0:	40023800 	.word	0x40023800
 80030d4:	40007000 	.word	0x40007000
 80030d8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80030dc:	4b1b      	ldr	r3, [pc, #108]	; (800314c <HAL_RCC_OscConfig+0x4ec>)
 80030de:	685b      	ldr	r3, [r3, #4]
 80030e0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	699b      	ldr	r3, [r3, #24]
 80030e6:	2b01      	cmp	r3, #1
 80030e8:	d028      	beq.n	800313c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80030f4:	429a      	cmp	r2, r3
 80030f6:	d121      	bne.n	800313c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003102:	429a      	cmp	r2, r3
 8003104:	d11a      	bne.n	800313c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003106:	68fa      	ldr	r2, [r7, #12]
 8003108:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800310c:	4013      	ands	r3, r2
 800310e:	687a      	ldr	r2, [r7, #4]
 8003110:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003112:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003114:	4293      	cmp	r3, r2
 8003116:	d111      	bne.n	800313c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003122:	085b      	lsrs	r3, r3, #1
 8003124:	3b01      	subs	r3, #1
 8003126:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003128:	429a      	cmp	r2, r3
 800312a:	d107      	bne.n	800313c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003136:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003138:	429a      	cmp	r2, r3
 800313a:	d001      	beq.n	8003140 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800313c:	2301      	movs	r3, #1
 800313e:	e000      	b.n	8003142 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003140:	2300      	movs	r3, #0
}
 8003142:	4618      	mov	r0, r3
 8003144:	3718      	adds	r7, #24
 8003146:	46bd      	mov	sp, r7
 8003148:	bd80      	pop	{r7, pc}
 800314a:	bf00      	nop
 800314c:	40023800 	.word	0x40023800

08003150 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003150:	b580      	push	{r7, lr}
 8003152:	b084      	sub	sp, #16
 8003154:	af00      	add	r7, sp, #0
 8003156:	6078      	str	r0, [r7, #4]
 8003158:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	2b00      	cmp	r3, #0
 800315e:	d101      	bne.n	8003164 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003160:	2301      	movs	r3, #1
 8003162:	e0cc      	b.n	80032fe <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003164:	4b68      	ldr	r3, [pc, #416]	; (8003308 <HAL_RCC_ClockConfig+0x1b8>)
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f003 0307 	and.w	r3, r3, #7
 800316c:	683a      	ldr	r2, [r7, #0]
 800316e:	429a      	cmp	r2, r3
 8003170:	d90c      	bls.n	800318c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003172:	4b65      	ldr	r3, [pc, #404]	; (8003308 <HAL_RCC_ClockConfig+0x1b8>)
 8003174:	683a      	ldr	r2, [r7, #0]
 8003176:	b2d2      	uxtb	r2, r2
 8003178:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800317a:	4b63      	ldr	r3, [pc, #396]	; (8003308 <HAL_RCC_ClockConfig+0x1b8>)
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f003 0307 	and.w	r3, r3, #7
 8003182:	683a      	ldr	r2, [r7, #0]
 8003184:	429a      	cmp	r2, r3
 8003186:	d001      	beq.n	800318c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003188:	2301      	movs	r3, #1
 800318a:	e0b8      	b.n	80032fe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	f003 0302 	and.w	r3, r3, #2
 8003194:	2b00      	cmp	r3, #0
 8003196:	d020      	beq.n	80031da <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f003 0304 	and.w	r3, r3, #4
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d005      	beq.n	80031b0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80031a4:	4b59      	ldr	r3, [pc, #356]	; (800330c <HAL_RCC_ClockConfig+0x1bc>)
 80031a6:	689b      	ldr	r3, [r3, #8]
 80031a8:	4a58      	ldr	r2, [pc, #352]	; (800330c <HAL_RCC_ClockConfig+0x1bc>)
 80031aa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80031ae:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	f003 0308 	and.w	r3, r3, #8
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d005      	beq.n	80031c8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80031bc:	4b53      	ldr	r3, [pc, #332]	; (800330c <HAL_RCC_ClockConfig+0x1bc>)
 80031be:	689b      	ldr	r3, [r3, #8]
 80031c0:	4a52      	ldr	r2, [pc, #328]	; (800330c <HAL_RCC_ClockConfig+0x1bc>)
 80031c2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80031c6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80031c8:	4b50      	ldr	r3, [pc, #320]	; (800330c <HAL_RCC_ClockConfig+0x1bc>)
 80031ca:	689b      	ldr	r3, [r3, #8]
 80031cc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	689b      	ldr	r3, [r3, #8]
 80031d4:	494d      	ldr	r1, [pc, #308]	; (800330c <HAL_RCC_ClockConfig+0x1bc>)
 80031d6:	4313      	orrs	r3, r2
 80031d8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f003 0301 	and.w	r3, r3, #1
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d044      	beq.n	8003270 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	685b      	ldr	r3, [r3, #4]
 80031ea:	2b01      	cmp	r3, #1
 80031ec:	d107      	bne.n	80031fe <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031ee:	4b47      	ldr	r3, [pc, #284]	; (800330c <HAL_RCC_ClockConfig+0x1bc>)
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d119      	bne.n	800322e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80031fa:	2301      	movs	r3, #1
 80031fc:	e07f      	b.n	80032fe <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	685b      	ldr	r3, [r3, #4]
 8003202:	2b02      	cmp	r3, #2
 8003204:	d003      	beq.n	800320e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800320a:	2b03      	cmp	r3, #3
 800320c:	d107      	bne.n	800321e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800320e:	4b3f      	ldr	r3, [pc, #252]	; (800330c <HAL_RCC_ClockConfig+0x1bc>)
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003216:	2b00      	cmp	r3, #0
 8003218:	d109      	bne.n	800322e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800321a:	2301      	movs	r3, #1
 800321c:	e06f      	b.n	80032fe <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800321e:	4b3b      	ldr	r3, [pc, #236]	; (800330c <HAL_RCC_ClockConfig+0x1bc>)
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f003 0302 	and.w	r3, r3, #2
 8003226:	2b00      	cmp	r3, #0
 8003228:	d101      	bne.n	800322e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800322a:	2301      	movs	r3, #1
 800322c:	e067      	b.n	80032fe <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800322e:	4b37      	ldr	r3, [pc, #220]	; (800330c <HAL_RCC_ClockConfig+0x1bc>)
 8003230:	689b      	ldr	r3, [r3, #8]
 8003232:	f023 0203 	bic.w	r2, r3, #3
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	685b      	ldr	r3, [r3, #4]
 800323a:	4934      	ldr	r1, [pc, #208]	; (800330c <HAL_RCC_ClockConfig+0x1bc>)
 800323c:	4313      	orrs	r3, r2
 800323e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003240:	f7fe fa9a 	bl	8001778 <HAL_GetTick>
 8003244:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003246:	e00a      	b.n	800325e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003248:	f7fe fa96 	bl	8001778 <HAL_GetTick>
 800324c:	4602      	mov	r2, r0
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	1ad3      	subs	r3, r2, r3
 8003252:	f241 3288 	movw	r2, #5000	; 0x1388
 8003256:	4293      	cmp	r3, r2
 8003258:	d901      	bls.n	800325e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800325a:	2303      	movs	r3, #3
 800325c:	e04f      	b.n	80032fe <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800325e:	4b2b      	ldr	r3, [pc, #172]	; (800330c <HAL_RCC_ClockConfig+0x1bc>)
 8003260:	689b      	ldr	r3, [r3, #8]
 8003262:	f003 020c 	and.w	r2, r3, #12
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	685b      	ldr	r3, [r3, #4]
 800326a:	009b      	lsls	r3, r3, #2
 800326c:	429a      	cmp	r2, r3
 800326e:	d1eb      	bne.n	8003248 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003270:	4b25      	ldr	r3, [pc, #148]	; (8003308 <HAL_RCC_ClockConfig+0x1b8>)
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f003 0307 	and.w	r3, r3, #7
 8003278:	683a      	ldr	r2, [r7, #0]
 800327a:	429a      	cmp	r2, r3
 800327c:	d20c      	bcs.n	8003298 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800327e:	4b22      	ldr	r3, [pc, #136]	; (8003308 <HAL_RCC_ClockConfig+0x1b8>)
 8003280:	683a      	ldr	r2, [r7, #0]
 8003282:	b2d2      	uxtb	r2, r2
 8003284:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003286:	4b20      	ldr	r3, [pc, #128]	; (8003308 <HAL_RCC_ClockConfig+0x1b8>)
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f003 0307 	and.w	r3, r3, #7
 800328e:	683a      	ldr	r2, [r7, #0]
 8003290:	429a      	cmp	r2, r3
 8003292:	d001      	beq.n	8003298 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003294:	2301      	movs	r3, #1
 8003296:	e032      	b.n	80032fe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f003 0304 	and.w	r3, r3, #4
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d008      	beq.n	80032b6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80032a4:	4b19      	ldr	r3, [pc, #100]	; (800330c <HAL_RCC_ClockConfig+0x1bc>)
 80032a6:	689b      	ldr	r3, [r3, #8]
 80032a8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	68db      	ldr	r3, [r3, #12]
 80032b0:	4916      	ldr	r1, [pc, #88]	; (800330c <HAL_RCC_ClockConfig+0x1bc>)
 80032b2:	4313      	orrs	r3, r2
 80032b4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f003 0308 	and.w	r3, r3, #8
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d009      	beq.n	80032d6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80032c2:	4b12      	ldr	r3, [pc, #72]	; (800330c <HAL_RCC_ClockConfig+0x1bc>)
 80032c4:	689b      	ldr	r3, [r3, #8]
 80032c6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	691b      	ldr	r3, [r3, #16]
 80032ce:	00db      	lsls	r3, r3, #3
 80032d0:	490e      	ldr	r1, [pc, #56]	; (800330c <HAL_RCC_ClockConfig+0x1bc>)
 80032d2:	4313      	orrs	r3, r2
 80032d4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80032d6:	f000 f821 	bl	800331c <HAL_RCC_GetSysClockFreq>
 80032da:	4602      	mov	r2, r0
 80032dc:	4b0b      	ldr	r3, [pc, #44]	; (800330c <HAL_RCC_ClockConfig+0x1bc>)
 80032de:	689b      	ldr	r3, [r3, #8]
 80032e0:	091b      	lsrs	r3, r3, #4
 80032e2:	f003 030f 	and.w	r3, r3, #15
 80032e6:	490a      	ldr	r1, [pc, #40]	; (8003310 <HAL_RCC_ClockConfig+0x1c0>)
 80032e8:	5ccb      	ldrb	r3, [r1, r3]
 80032ea:	fa22 f303 	lsr.w	r3, r2, r3
 80032ee:	4a09      	ldr	r2, [pc, #36]	; (8003314 <HAL_RCC_ClockConfig+0x1c4>)
 80032f0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80032f2:	4b09      	ldr	r3, [pc, #36]	; (8003318 <HAL_RCC_ClockConfig+0x1c8>)
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	4618      	mov	r0, r3
 80032f8:	f7fe f9fa 	bl	80016f0 <HAL_InitTick>

  return HAL_OK;
 80032fc:	2300      	movs	r3, #0
}
 80032fe:	4618      	mov	r0, r3
 8003300:	3710      	adds	r7, #16
 8003302:	46bd      	mov	sp, r7
 8003304:	bd80      	pop	{r7, pc}
 8003306:	bf00      	nop
 8003308:	40023c00 	.word	0x40023c00
 800330c:	40023800 	.word	0x40023800
 8003310:	08004f20 	.word	0x08004f20
 8003314:	20000034 	.word	0x20000034
 8003318:	20000038 	.word	0x20000038

0800331c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800331c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003320:	b094      	sub	sp, #80	; 0x50
 8003322:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003324:	2300      	movs	r3, #0
 8003326:	647b      	str	r3, [r7, #68]	; 0x44
 8003328:	2300      	movs	r3, #0
 800332a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800332c:	2300      	movs	r3, #0
 800332e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003330:	2300      	movs	r3, #0
 8003332:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003334:	4b79      	ldr	r3, [pc, #484]	; (800351c <HAL_RCC_GetSysClockFreq+0x200>)
 8003336:	689b      	ldr	r3, [r3, #8]
 8003338:	f003 030c 	and.w	r3, r3, #12
 800333c:	2b08      	cmp	r3, #8
 800333e:	d00d      	beq.n	800335c <HAL_RCC_GetSysClockFreq+0x40>
 8003340:	2b08      	cmp	r3, #8
 8003342:	f200 80e1 	bhi.w	8003508 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003346:	2b00      	cmp	r3, #0
 8003348:	d002      	beq.n	8003350 <HAL_RCC_GetSysClockFreq+0x34>
 800334a:	2b04      	cmp	r3, #4
 800334c:	d003      	beq.n	8003356 <HAL_RCC_GetSysClockFreq+0x3a>
 800334e:	e0db      	b.n	8003508 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003350:	4b73      	ldr	r3, [pc, #460]	; (8003520 <HAL_RCC_GetSysClockFreq+0x204>)
 8003352:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8003354:	e0db      	b.n	800350e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003356:	4b73      	ldr	r3, [pc, #460]	; (8003524 <HAL_RCC_GetSysClockFreq+0x208>)
 8003358:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800335a:	e0d8      	b.n	800350e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800335c:	4b6f      	ldr	r3, [pc, #444]	; (800351c <HAL_RCC_GetSysClockFreq+0x200>)
 800335e:	685b      	ldr	r3, [r3, #4]
 8003360:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003364:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003366:	4b6d      	ldr	r3, [pc, #436]	; (800351c <HAL_RCC_GetSysClockFreq+0x200>)
 8003368:	685b      	ldr	r3, [r3, #4]
 800336a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800336e:	2b00      	cmp	r3, #0
 8003370:	d063      	beq.n	800343a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003372:	4b6a      	ldr	r3, [pc, #424]	; (800351c <HAL_RCC_GetSysClockFreq+0x200>)
 8003374:	685b      	ldr	r3, [r3, #4]
 8003376:	099b      	lsrs	r3, r3, #6
 8003378:	2200      	movs	r2, #0
 800337a:	63bb      	str	r3, [r7, #56]	; 0x38
 800337c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800337e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003380:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003384:	633b      	str	r3, [r7, #48]	; 0x30
 8003386:	2300      	movs	r3, #0
 8003388:	637b      	str	r3, [r7, #52]	; 0x34
 800338a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800338e:	4622      	mov	r2, r4
 8003390:	462b      	mov	r3, r5
 8003392:	f04f 0000 	mov.w	r0, #0
 8003396:	f04f 0100 	mov.w	r1, #0
 800339a:	0159      	lsls	r1, r3, #5
 800339c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80033a0:	0150      	lsls	r0, r2, #5
 80033a2:	4602      	mov	r2, r0
 80033a4:	460b      	mov	r3, r1
 80033a6:	4621      	mov	r1, r4
 80033a8:	1a51      	subs	r1, r2, r1
 80033aa:	6139      	str	r1, [r7, #16]
 80033ac:	4629      	mov	r1, r5
 80033ae:	eb63 0301 	sbc.w	r3, r3, r1
 80033b2:	617b      	str	r3, [r7, #20]
 80033b4:	f04f 0200 	mov.w	r2, #0
 80033b8:	f04f 0300 	mov.w	r3, #0
 80033bc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80033c0:	4659      	mov	r1, fp
 80033c2:	018b      	lsls	r3, r1, #6
 80033c4:	4651      	mov	r1, sl
 80033c6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80033ca:	4651      	mov	r1, sl
 80033cc:	018a      	lsls	r2, r1, #6
 80033ce:	4651      	mov	r1, sl
 80033d0:	ebb2 0801 	subs.w	r8, r2, r1
 80033d4:	4659      	mov	r1, fp
 80033d6:	eb63 0901 	sbc.w	r9, r3, r1
 80033da:	f04f 0200 	mov.w	r2, #0
 80033de:	f04f 0300 	mov.w	r3, #0
 80033e2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80033e6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80033ea:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80033ee:	4690      	mov	r8, r2
 80033f0:	4699      	mov	r9, r3
 80033f2:	4623      	mov	r3, r4
 80033f4:	eb18 0303 	adds.w	r3, r8, r3
 80033f8:	60bb      	str	r3, [r7, #8]
 80033fa:	462b      	mov	r3, r5
 80033fc:	eb49 0303 	adc.w	r3, r9, r3
 8003400:	60fb      	str	r3, [r7, #12]
 8003402:	f04f 0200 	mov.w	r2, #0
 8003406:	f04f 0300 	mov.w	r3, #0
 800340a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800340e:	4629      	mov	r1, r5
 8003410:	024b      	lsls	r3, r1, #9
 8003412:	4621      	mov	r1, r4
 8003414:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003418:	4621      	mov	r1, r4
 800341a:	024a      	lsls	r2, r1, #9
 800341c:	4610      	mov	r0, r2
 800341e:	4619      	mov	r1, r3
 8003420:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003422:	2200      	movs	r2, #0
 8003424:	62bb      	str	r3, [r7, #40]	; 0x28
 8003426:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003428:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800342c:	f7fc ff30 	bl	8000290 <__aeabi_uldivmod>
 8003430:	4602      	mov	r2, r0
 8003432:	460b      	mov	r3, r1
 8003434:	4613      	mov	r3, r2
 8003436:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003438:	e058      	b.n	80034ec <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800343a:	4b38      	ldr	r3, [pc, #224]	; (800351c <HAL_RCC_GetSysClockFreq+0x200>)
 800343c:	685b      	ldr	r3, [r3, #4]
 800343e:	099b      	lsrs	r3, r3, #6
 8003440:	2200      	movs	r2, #0
 8003442:	4618      	mov	r0, r3
 8003444:	4611      	mov	r1, r2
 8003446:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800344a:	623b      	str	r3, [r7, #32]
 800344c:	2300      	movs	r3, #0
 800344e:	627b      	str	r3, [r7, #36]	; 0x24
 8003450:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003454:	4642      	mov	r2, r8
 8003456:	464b      	mov	r3, r9
 8003458:	f04f 0000 	mov.w	r0, #0
 800345c:	f04f 0100 	mov.w	r1, #0
 8003460:	0159      	lsls	r1, r3, #5
 8003462:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003466:	0150      	lsls	r0, r2, #5
 8003468:	4602      	mov	r2, r0
 800346a:	460b      	mov	r3, r1
 800346c:	4641      	mov	r1, r8
 800346e:	ebb2 0a01 	subs.w	sl, r2, r1
 8003472:	4649      	mov	r1, r9
 8003474:	eb63 0b01 	sbc.w	fp, r3, r1
 8003478:	f04f 0200 	mov.w	r2, #0
 800347c:	f04f 0300 	mov.w	r3, #0
 8003480:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003484:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003488:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800348c:	ebb2 040a 	subs.w	r4, r2, sl
 8003490:	eb63 050b 	sbc.w	r5, r3, fp
 8003494:	f04f 0200 	mov.w	r2, #0
 8003498:	f04f 0300 	mov.w	r3, #0
 800349c:	00eb      	lsls	r3, r5, #3
 800349e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80034a2:	00e2      	lsls	r2, r4, #3
 80034a4:	4614      	mov	r4, r2
 80034a6:	461d      	mov	r5, r3
 80034a8:	4643      	mov	r3, r8
 80034aa:	18e3      	adds	r3, r4, r3
 80034ac:	603b      	str	r3, [r7, #0]
 80034ae:	464b      	mov	r3, r9
 80034b0:	eb45 0303 	adc.w	r3, r5, r3
 80034b4:	607b      	str	r3, [r7, #4]
 80034b6:	f04f 0200 	mov.w	r2, #0
 80034ba:	f04f 0300 	mov.w	r3, #0
 80034be:	e9d7 4500 	ldrd	r4, r5, [r7]
 80034c2:	4629      	mov	r1, r5
 80034c4:	028b      	lsls	r3, r1, #10
 80034c6:	4621      	mov	r1, r4
 80034c8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80034cc:	4621      	mov	r1, r4
 80034ce:	028a      	lsls	r2, r1, #10
 80034d0:	4610      	mov	r0, r2
 80034d2:	4619      	mov	r1, r3
 80034d4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80034d6:	2200      	movs	r2, #0
 80034d8:	61bb      	str	r3, [r7, #24]
 80034da:	61fa      	str	r2, [r7, #28]
 80034dc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80034e0:	f7fc fed6 	bl	8000290 <__aeabi_uldivmod>
 80034e4:	4602      	mov	r2, r0
 80034e6:	460b      	mov	r3, r1
 80034e8:	4613      	mov	r3, r2
 80034ea:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80034ec:	4b0b      	ldr	r3, [pc, #44]	; (800351c <HAL_RCC_GetSysClockFreq+0x200>)
 80034ee:	685b      	ldr	r3, [r3, #4]
 80034f0:	0c1b      	lsrs	r3, r3, #16
 80034f2:	f003 0303 	and.w	r3, r3, #3
 80034f6:	3301      	adds	r3, #1
 80034f8:	005b      	lsls	r3, r3, #1
 80034fa:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80034fc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80034fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003500:	fbb2 f3f3 	udiv	r3, r2, r3
 8003504:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003506:	e002      	b.n	800350e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003508:	4b05      	ldr	r3, [pc, #20]	; (8003520 <HAL_RCC_GetSysClockFreq+0x204>)
 800350a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800350c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800350e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003510:	4618      	mov	r0, r3
 8003512:	3750      	adds	r7, #80	; 0x50
 8003514:	46bd      	mov	sp, r7
 8003516:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800351a:	bf00      	nop
 800351c:	40023800 	.word	0x40023800
 8003520:	00f42400 	.word	0x00f42400
 8003524:	007a1200 	.word	0x007a1200

08003528 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003528:	b480      	push	{r7}
 800352a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800352c:	4b03      	ldr	r3, [pc, #12]	; (800353c <HAL_RCC_GetHCLKFreq+0x14>)
 800352e:	681b      	ldr	r3, [r3, #0]
}
 8003530:	4618      	mov	r0, r3
 8003532:	46bd      	mov	sp, r7
 8003534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003538:	4770      	bx	lr
 800353a:	bf00      	nop
 800353c:	20000034 	.word	0x20000034

08003540 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003540:	b580      	push	{r7, lr}
 8003542:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003544:	f7ff fff0 	bl	8003528 <HAL_RCC_GetHCLKFreq>
 8003548:	4602      	mov	r2, r0
 800354a:	4b05      	ldr	r3, [pc, #20]	; (8003560 <HAL_RCC_GetPCLK1Freq+0x20>)
 800354c:	689b      	ldr	r3, [r3, #8]
 800354e:	0a9b      	lsrs	r3, r3, #10
 8003550:	f003 0307 	and.w	r3, r3, #7
 8003554:	4903      	ldr	r1, [pc, #12]	; (8003564 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003556:	5ccb      	ldrb	r3, [r1, r3]
 8003558:	fa22 f303 	lsr.w	r3, r2, r3
}
 800355c:	4618      	mov	r0, r3
 800355e:	bd80      	pop	{r7, pc}
 8003560:	40023800 	.word	0x40023800
 8003564:	08004f30 	.word	0x08004f30

08003568 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003568:	b580      	push	{r7, lr}
 800356a:	b082      	sub	sp, #8
 800356c:	af00      	add	r7, sp, #0
 800356e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	2b00      	cmp	r3, #0
 8003574:	d101      	bne.n	800357a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003576:	2301      	movs	r3, #1
 8003578:	e041      	b.n	80035fe <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003580:	b2db      	uxtb	r3, r3
 8003582:	2b00      	cmp	r3, #0
 8003584:	d106      	bne.n	8003594 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	2200      	movs	r2, #0
 800358a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800358e:	6878      	ldr	r0, [r7, #4]
 8003590:	f7fe f80a 	bl	80015a8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	2202      	movs	r2, #2
 8003598:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681a      	ldr	r2, [r3, #0]
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	3304      	adds	r3, #4
 80035a4:	4619      	mov	r1, r3
 80035a6:	4610      	mov	r0, r2
 80035a8:	f000 f9a0 	bl	80038ec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	2201      	movs	r2, #1
 80035b0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	2201      	movs	r2, #1
 80035b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	2201      	movs	r2, #1
 80035c0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	2201      	movs	r2, #1
 80035c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	2201      	movs	r2, #1
 80035d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	2201      	movs	r2, #1
 80035d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	2201      	movs	r2, #1
 80035e0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	2201      	movs	r2, #1
 80035e8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	2201      	movs	r2, #1
 80035f0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	2201      	movs	r2, #1
 80035f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80035fc:	2300      	movs	r3, #0
}
 80035fe:	4618      	mov	r0, r3
 8003600:	3708      	adds	r7, #8
 8003602:	46bd      	mov	sp, r7
 8003604:	bd80      	pop	{r7, pc}
	...

08003608 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003608:	b580      	push	{r7, lr}
 800360a:	b084      	sub	sp, #16
 800360c:	af00      	add	r7, sp, #0
 800360e:	6078      	str	r0, [r7, #4]
 8003610:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003612:	683b      	ldr	r3, [r7, #0]
 8003614:	2b00      	cmp	r3, #0
 8003616:	d109      	bne.n	800362c <HAL_TIM_PWM_Start+0x24>
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800361e:	b2db      	uxtb	r3, r3
 8003620:	2b01      	cmp	r3, #1
 8003622:	bf14      	ite	ne
 8003624:	2301      	movne	r3, #1
 8003626:	2300      	moveq	r3, #0
 8003628:	b2db      	uxtb	r3, r3
 800362a:	e022      	b.n	8003672 <HAL_TIM_PWM_Start+0x6a>
 800362c:	683b      	ldr	r3, [r7, #0]
 800362e:	2b04      	cmp	r3, #4
 8003630:	d109      	bne.n	8003646 <HAL_TIM_PWM_Start+0x3e>
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003638:	b2db      	uxtb	r3, r3
 800363a:	2b01      	cmp	r3, #1
 800363c:	bf14      	ite	ne
 800363e:	2301      	movne	r3, #1
 8003640:	2300      	moveq	r3, #0
 8003642:	b2db      	uxtb	r3, r3
 8003644:	e015      	b.n	8003672 <HAL_TIM_PWM_Start+0x6a>
 8003646:	683b      	ldr	r3, [r7, #0]
 8003648:	2b08      	cmp	r3, #8
 800364a:	d109      	bne.n	8003660 <HAL_TIM_PWM_Start+0x58>
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003652:	b2db      	uxtb	r3, r3
 8003654:	2b01      	cmp	r3, #1
 8003656:	bf14      	ite	ne
 8003658:	2301      	movne	r3, #1
 800365a:	2300      	moveq	r3, #0
 800365c:	b2db      	uxtb	r3, r3
 800365e:	e008      	b.n	8003672 <HAL_TIM_PWM_Start+0x6a>
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003666:	b2db      	uxtb	r3, r3
 8003668:	2b01      	cmp	r3, #1
 800366a:	bf14      	ite	ne
 800366c:	2301      	movne	r3, #1
 800366e:	2300      	moveq	r3, #0
 8003670:	b2db      	uxtb	r3, r3
 8003672:	2b00      	cmp	r3, #0
 8003674:	d001      	beq.n	800367a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003676:	2301      	movs	r3, #1
 8003678:	e068      	b.n	800374c <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800367a:	683b      	ldr	r3, [r7, #0]
 800367c:	2b00      	cmp	r3, #0
 800367e:	d104      	bne.n	800368a <HAL_TIM_PWM_Start+0x82>
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	2202      	movs	r2, #2
 8003684:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003688:	e013      	b.n	80036b2 <HAL_TIM_PWM_Start+0xaa>
 800368a:	683b      	ldr	r3, [r7, #0]
 800368c:	2b04      	cmp	r3, #4
 800368e:	d104      	bne.n	800369a <HAL_TIM_PWM_Start+0x92>
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	2202      	movs	r2, #2
 8003694:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003698:	e00b      	b.n	80036b2 <HAL_TIM_PWM_Start+0xaa>
 800369a:	683b      	ldr	r3, [r7, #0]
 800369c:	2b08      	cmp	r3, #8
 800369e:	d104      	bne.n	80036aa <HAL_TIM_PWM_Start+0xa2>
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	2202      	movs	r2, #2
 80036a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80036a8:	e003      	b.n	80036b2 <HAL_TIM_PWM_Start+0xaa>
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	2202      	movs	r2, #2
 80036ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	2201      	movs	r2, #1
 80036b8:	6839      	ldr	r1, [r7, #0]
 80036ba:	4618      	mov	r0, r3
 80036bc:	f000 fb22 	bl	8003d04 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	4a23      	ldr	r2, [pc, #140]	; (8003754 <HAL_TIM_PWM_Start+0x14c>)
 80036c6:	4293      	cmp	r3, r2
 80036c8:	d107      	bne.n	80036da <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80036d8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	4a1d      	ldr	r2, [pc, #116]	; (8003754 <HAL_TIM_PWM_Start+0x14c>)
 80036e0:	4293      	cmp	r3, r2
 80036e2:	d018      	beq.n	8003716 <HAL_TIM_PWM_Start+0x10e>
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80036ec:	d013      	beq.n	8003716 <HAL_TIM_PWM_Start+0x10e>
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	4a19      	ldr	r2, [pc, #100]	; (8003758 <HAL_TIM_PWM_Start+0x150>)
 80036f4:	4293      	cmp	r3, r2
 80036f6:	d00e      	beq.n	8003716 <HAL_TIM_PWM_Start+0x10e>
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	4a17      	ldr	r2, [pc, #92]	; (800375c <HAL_TIM_PWM_Start+0x154>)
 80036fe:	4293      	cmp	r3, r2
 8003700:	d009      	beq.n	8003716 <HAL_TIM_PWM_Start+0x10e>
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	4a16      	ldr	r2, [pc, #88]	; (8003760 <HAL_TIM_PWM_Start+0x158>)
 8003708:	4293      	cmp	r3, r2
 800370a:	d004      	beq.n	8003716 <HAL_TIM_PWM_Start+0x10e>
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	4a14      	ldr	r2, [pc, #80]	; (8003764 <HAL_TIM_PWM_Start+0x15c>)
 8003712:	4293      	cmp	r3, r2
 8003714:	d111      	bne.n	800373a <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	689b      	ldr	r3, [r3, #8]
 800371c:	f003 0307 	and.w	r3, r3, #7
 8003720:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	2b06      	cmp	r3, #6
 8003726:	d010      	beq.n	800374a <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	681a      	ldr	r2, [r3, #0]
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f042 0201 	orr.w	r2, r2, #1
 8003736:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003738:	e007      	b.n	800374a <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	681a      	ldr	r2, [r3, #0]
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f042 0201 	orr.w	r2, r2, #1
 8003748:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800374a:	2300      	movs	r3, #0
}
 800374c:	4618      	mov	r0, r3
 800374e:	3710      	adds	r7, #16
 8003750:	46bd      	mov	sp, r7
 8003752:	bd80      	pop	{r7, pc}
 8003754:	40010000 	.word	0x40010000
 8003758:	40000400 	.word	0x40000400
 800375c:	40000800 	.word	0x40000800
 8003760:	40000c00 	.word	0x40000c00
 8003764:	40014000 	.word	0x40014000

08003768 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003768:	b580      	push	{r7, lr}
 800376a:	b086      	sub	sp, #24
 800376c:	af00      	add	r7, sp, #0
 800376e:	60f8      	str	r0, [r7, #12]
 8003770:	60b9      	str	r1, [r7, #8]
 8003772:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003774:	2300      	movs	r3, #0
 8003776:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800377e:	2b01      	cmp	r3, #1
 8003780:	d101      	bne.n	8003786 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003782:	2302      	movs	r3, #2
 8003784:	e0ae      	b.n	80038e4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	2201      	movs	r2, #1
 800378a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	2b0c      	cmp	r3, #12
 8003792:	f200 809f 	bhi.w	80038d4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003796:	a201      	add	r2, pc, #4	; (adr r2, 800379c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003798:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800379c:	080037d1 	.word	0x080037d1
 80037a0:	080038d5 	.word	0x080038d5
 80037a4:	080038d5 	.word	0x080038d5
 80037a8:	080038d5 	.word	0x080038d5
 80037ac:	08003811 	.word	0x08003811
 80037b0:	080038d5 	.word	0x080038d5
 80037b4:	080038d5 	.word	0x080038d5
 80037b8:	080038d5 	.word	0x080038d5
 80037bc:	08003853 	.word	0x08003853
 80037c0:	080038d5 	.word	0x080038d5
 80037c4:	080038d5 	.word	0x080038d5
 80037c8:	080038d5 	.word	0x080038d5
 80037cc:	08003893 	.word	0x08003893
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	68b9      	ldr	r1, [r7, #8]
 80037d6:	4618      	mov	r0, r3
 80037d8:	f000 f908 	bl	80039ec <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	699a      	ldr	r2, [r3, #24]
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f042 0208 	orr.w	r2, r2, #8
 80037ea:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	699a      	ldr	r2, [r3, #24]
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	f022 0204 	bic.w	r2, r2, #4
 80037fa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	6999      	ldr	r1, [r3, #24]
 8003802:	68bb      	ldr	r3, [r7, #8]
 8003804:	691a      	ldr	r2, [r3, #16]
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	430a      	orrs	r2, r1
 800380c:	619a      	str	r2, [r3, #24]
      break;
 800380e:	e064      	b.n	80038da <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	68b9      	ldr	r1, [r7, #8]
 8003816:	4618      	mov	r0, r3
 8003818:	f000 f94e 	bl	8003ab8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	699a      	ldr	r2, [r3, #24]
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800382a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	699a      	ldr	r2, [r3, #24]
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800383a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	6999      	ldr	r1, [r3, #24]
 8003842:	68bb      	ldr	r3, [r7, #8]
 8003844:	691b      	ldr	r3, [r3, #16]
 8003846:	021a      	lsls	r2, r3, #8
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	430a      	orrs	r2, r1
 800384e:	619a      	str	r2, [r3, #24]
      break;
 8003850:	e043      	b.n	80038da <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	68b9      	ldr	r1, [r7, #8]
 8003858:	4618      	mov	r0, r3
 800385a:	f000 f999 	bl	8003b90 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	69da      	ldr	r2, [r3, #28]
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f042 0208 	orr.w	r2, r2, #8
 800386c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	69da      	ldr	r2, [r3, #28]
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	f022 0204 	bic.w	r2, r2, #4
 800387c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	69d9      	ldr	r1, [r3, #28]
 8003884:	68bb      	ldr	r3, [r7, #8]
 8003886:	691a      	ldr	r2, [r3, #16]
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	430a      	orrs	r2, r1
 800388e:	61da      	str	r2, [r3, #28]
      break;
 8003890:	e023      	b.n	80038da <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	68b9      	ldr	r1, [r7, #8]
 8003898:	4618      	mov	r0, r3
 800389a:	f000 f9e3 	bl	8003c64 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	69da      	ldr	r2, [r3, #28]
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80038ac:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	69da      	ldr	r2, [r3, #28]
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80038bc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	69d9      	ldr	r1, [r3, #28]
 80038c4:	68bb      	ldr	r3, [r7, #8]
 80038c6:	691b      	ldr	r3, [r3, #16]
 80038c8:	021a      	lsls	r2, r3, #8
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	430a      	orrs	r2, r1
 80038d0:	61da      	str	r2, [r3, #28]
      break;
 80038d2:	e002      	b.n	80038da <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80038d4:	2301      	movs	r3, #1
 80038d6:	75fb      	strb	r3, [r7, #23]
      break;
 80038d8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	2200      	movs	r2, #0
 80038de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80038e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80038e4:	4618      	mov	r0, r3
 80038e6:	3718      	adds	r7, #24
 80038e8:	46bd      	mov	sp, r7
 80038ea:	bd80      	pop	{r7, pc}

080038ec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80038ec:	b480      	push	{r7}
 80038ee:	b085      	sub	sp, #20
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	6078      	str	r0, [r7, #4]
 80038f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	4a34      	ldr	r2, [pc, #208]	; (80039d0 <TIM_Base_SetConfig+0xe4>)
 8003900:	4293      	cmp	r3, r2
 8003902:	d00f      	beq.n	8003924 <TIM_Base_SetConfig+0x38>
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800390a:	d00b      	beq.n	8003924 <TIM_Base_SetConfig+0x38>
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	4a31      	ldr	r2, [pc, #196]	; (80039d4 <TIM_Base_SetConfig+0xe8>)
 8003910:	4293      	cmp	r3, r2
 8003912:	d007      	beq.n	8003924 <TIM_Base_SetConfig+0x38>
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	4a30      	ldr	r2, [pc, #192]	; (80039d8 <TIM_Base_SetConfig+0xec>)
 8003918:	4293      	cmp	r3, r2
 800391a:	d003      	beq.n	8003924 <TIM_Base_SetConfig+0x38>
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	4a2f      	ldr	r2, [pc, #188]	; (80039dc <TIM_Base_SetConfig+0xf0>)
 8003920:	4293      	cmp	r3, r2
 8003922:	d108      	bne.n	8003936 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800392a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800392c:	683b      	ldr	r3, [r7, #0]
 800392e:	685b      	ldr	r3, [r3, #4]
 8003930:	68fa      	ldr	r2, [r7, #12]
 8003932:	4313      	orrs	r3, r2
 8003934:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	4a25      	ldr	r2, [pc, #148]	; (80039d0 <TIM_Base_SetConfig+0xe4>)
 800393a:	4293      	cmp	r3, r2
 800393c:	d01b      	beq.n	8003976 <TIM_Base_SetConfig+0x8a>
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003944:	d017      	beq.n	8003976 <TIM_Base_SetConfig+0x8a>
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	4a22      	ldr	r2, [pc, #136]	; (80039d4 <TIM_Base_SetConfig+0xe8>)
 800394a:	4293      	cmp	r3, r2
 800394c:	d013      	beq.n	8003976 <TIM_Base_SetConfig+0x8a>
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	4a21      	ldr	r2, [pc, #132]	; (80039d8 <TIM_Base_SetConfig+0xec>)
 8003952:	4293      	cmp	r3, r2
 8003954:	d00f      	beq.n	8003976 <TIM_Base_SetConfig+0x8a>
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	4a20      	ldr	r2, [pc, #128]	; (80039dc <TIM_Base_SetConfig+0xf0>)
 800395a:	4293      	cmp	r3, r2
 800395c:	d00b      	beq.n	8003976 <TIM_Base_SetConfig+0x8a>
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	4a1f      	ldr	r2, [pc, #124]	; (80039e0 <TIM_Base_SetConfig+0xf4>)
 8003962:	4293      	cmp	r3, r2
 8003964:	d007      	beq.n	8003976 <TIM_Base_SetConfig+0x8a>
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	4a1e      	ldr	r2, [pc, #120]	; (80039e4 <TIM_Base_SetConfig+0xf8>)
 800396a:	4293      	cmp	r3, r2
 800396c:	d003      	beq.n	8003976 <TIM_Base_SetConfig+0x8a>
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	4a1d      	ldr	r2, [pc, #116]	; (80039e8 <TIM_Base_SetConfig+0xfc>)
 8003972:	4293      	cmp	r3, r2
 8003974:	d108      	bne.n	8003988 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800397c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800397e:	683b      	ldr	r3, [r7, #0]
 8003980:	68db      	ldr	r3, [r3, #12]
 8003982:	68fa      	ldr	r2, [r7, #12]
 8003984:	4313      	orrs	r3, r2
 8003986:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800398e:	683b      	ldr	r3, [r7, #0]
 8003990:	695b      	ldr	r3, [r3, #20]
 8003992:	4313      	orrs	r3, r2
 8003994:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	68fa      	ldr	r2, [r7, #12]
 800399a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800399c:	683b      	ldr	r3, [r7, #0]
 800399e:	689a      	ldr	r2, [r3, #8]
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80039a4:	683b      	ldr	r3, [r7, #0]
 80039a6:	681a      	ldr	r2, [r3, #0]
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	4a08      	ldr	r2, [pc, #32]	; (80039d0 <TIM_Base_SetConfig+0xe4>)
 80039b0:	4293      	cmp	r3, r2
 80039b2:	d103      	bne.n	80039bc <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80039b4:	683b      	ldr	r3, [r7, #0]
 80039b6:	691a      	ldr	r2, [r3, #16]
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	2201      	movs	r2, #1
 80039c0:	615a      	str	r2, [r3, #20]
}
 80039c2:	bf00      	nop
 80039c4:	3714      	adds	r7, #20
 80039c6:	46bd      	mov	sp, r7
 80039c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039cc:	4770      	bx	lr
 80039ce:	bf00      	nop
 80039d0:	40010000 	.word	0x40010000
 80039d4:	40000400 	.word	0x40000400
 80039d8:	40000800 	.word	0x40000800
 80039dc:	40000c00 	.word	0x40000c00
 80039e0:	40014000 	.word	0x40014000
 80039e4:	40014400 	.word	0x40014400
 80039e8:	40014800 	.word	0x40014800

080039ec <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80039ec:	b480      	push	{r7}
 80039ee:	b087      	sub	sp, #28
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	6078      	str	r0, [r7, #4]
 80039f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	6a1b      	ldr	r3, [r3, #32]
 80039fa:	f023 0201 	bic.w	r2, r3, #1
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	6a1b      	ldr	r3, [r3, #32]
 8003a06:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	685b      	ldr	r3, [r3, #4]
 8003a0c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	699b      	ldr	r3, [r3, #24]
 8003a12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a1a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	f023 0303 	bic.w	r3, r3, #3
 8003a22:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003a24:	683b      	ldr	r3, [r7, #0]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	68fa      	ldr	r2, [r7, #12]
 8003a2a:	4313      	orrs	r3, r2
 8003a2c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003a2e:	697b      	ldr	r3, [r7, #20]
 8003a30:	f023 0302 	bic.w	r3, r3, #2
 8003a34:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003a36:	683b      	ldr	r3, [r7, #0]
 8003a38:	689b      	ldr	r3, [r3, #8]
 8003a3a:	697a      	ldr	r2, [r7, #20]
 8003a3c:	4313      	orrs	r3, r2
 8003a3e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	4a1c      	ldr	r2, [pc, #112]	; (8003ab4 <TIM_OC1_SetConfig+0xc8>)
 8003a44:	4293      	cmp	r3, r2
 8003a46:	d10c      	bne.n	8003a62 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003a48:	697b      	ldr	r3, [r7, #20]
 8003a4a:	f023 0308 	bic.w	r3, r3, #8
 8003a4e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003a50:	683b      	ldr	r3, [r7, #0]
 8003a52:	68db      	ldr	r3, [r3, #12]
 8003a54:	697a      	ldr	r2, [r7, #20]
 8003a56:	4313      	orrs	r3, r2
 8003a58:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003a5a:	697b      	ldr	r3, [r7, #20]
 8003a5c:	f023 0304 	bic.w	r3, r3, #4
 8003a60:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	4a13      	ldr	r2, [pc, #76]	; (8003ab4 <TIM_OC1_SetConfig+0xc8>)
 8003a66:	4293      	cmp	r3, r2
 8003a68:	d111      	bne.n	8003a8e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003a6a:	693b      	ldr	r3, [r7, #16]
 8003a6c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003a70:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003a72:	693b      	ldr	r3, [r7, #16]
 8003a74:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003a78:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003a7a:	683b      	ldr	r3, [r7, #0]
 8003a7c:	695b      	ldr	r3, [r3, #20]
 8003a7e:	693a      	ldr	r2, [r7, #16]
 8003a80:	4313      	orrs	r3, r2
 8003a82:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003a84:	683b      	ldr	r3, [r7, #0]
 8003a86:	699b      	ldr	r3, [r3, #24]
 8003a88:	693a      	ldr	r2, [r7, #16]
 8003a8a:	4313      	orrs	r3, r2
 8003a8c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	693a      	ldr	r2, [r7, #16]
 8003a92:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	68fa      	ldr	r2, [r7, #12]
 8003a98:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003a9a:	683b      	ldr	r3, [r7, #0]
 8003a9c:	685a      	ldr	r2, [r3, #4]
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	697a      	ldr	r2, [r7, #20]
 8003aa6:	621a      	str	r2, [r3, #32]
}
 8003aa8:	bf00      	nop
 8003aaa:	371c      	adds	r7, #28
 8003aac:	46bd      	mov	sp, r7
 8003aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab2:	4770      	bx	lr
 8003ab4:	40010000 	.word	0x40010000

08003ab8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003ab8:	b480      	push	{r7}
 8003aba:	b087      	sub	sp, #28
 8003abc:	af00      	add	r7, sp, #0
 8003abe:	6078      	str	r0, [r7, #4]
 8003ac0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	6a1b      	ldr	r3, [r3, #32]
 8003ac6:	f023 0210 	bic.w	r2, r3, #16
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	6a1b      	ldr	r3, [r3, #32]
 8003ad2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	685b      	ldr	r3, [r3, #4]
 8003ad8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	699b      	ldr	r3, [r3, #24]
 8003ade:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003ae6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003aee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003af0:	683b      	ldr	r3, [r7, #0]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	021b      	lsls	r3, r3, #8
 8003af6:	68fa      	ldr	r2, [r7, #12]
 8003af8:	4313      	orrs	r3, r2
 8003afa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003afc:	697b      	ldr	r3, [r7, #20]
 8003afe:	f023 0320 	bic.w	r3, r3, #32
 8003b02:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003b04:	683b      	ldr	r3, [r7, #0]
 8003b06:	689b      	ldr	r3, [r3, #8]
 8003b08:	011b      	lsls	r3, r3, #4
 8003b0a:	697a      	ldr	r2, [r7, #20]
 8003b0c:	4313      	orrs	r3, r2
 8003b0e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	4a1e      	ldr	r2, [pc, #120]	; (8003b8c <TIM_OC2_SetConfig+0xd4>)
 8003b14:	4293      	cmp	r3, r2
 8003b16:	d10d      	bne.n	8003b34 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003b18:	697b      	ldr	r3, [r7, #20]
 8003b1a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003b1e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003b20:	683b      	ldr	r3, [r7, #0]
 8003b22:	68db      	ldr	r3, [r3, #12]
 8003b24:	011b      	lsls	r3, r3, #4
 8003b26:	697a      	ldr	r2, [r7, #20]
 8003b28:	4313      	orrs	r3, r2
 8003b2a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003b2c:	697b      	ldr	r3, [r7, #20]
 8003b2e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003b32:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	4a15      	ldr	r2, [pc, #84]	; (8003b8c <TIM_OC2_SetConfig+0xd4>)
 8003b38:	4293      	cmp	r3, r2
 8003b3a:	d113      	bne.n	8003b64 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003b3c:	693b      	ldr	r3, [r7, #16]
 8003b3e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003b42:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003b44:	693b      	ldr	r3, [r7, #16]
 8003b46:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003b4a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003b4c:	683b      	ldr	r3, [r7, #0]
 8003b4e:	695b      	ldr	r3, [r3, #20]
 8003b50:	009b      	lsls	r3, r3, #2
 8003b52:	693a      	ldr	r2, [r7, #16]
 8003b54:	4313      	orrs	r3, r2
 8003b56:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003b58:	683b      	ldr	r3, [r7, #0]
 8003b5a:	699b      	ldr	r3, [r3, #24]
 8003b5c:	009b      	lsls	r3, r3, #2
 8003b5e:	693a      	ldr	r2, [r7, #16]
 8003b60:	4313      	orrs	r3, r2
 8003b62:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	693a      	ldr	r2, [r7, #16]
 8003b68:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	68fa      	ldr	r2, [r7, #12]
 8003b6e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003b70:	683b      	ldr	r3, [r7, #0]
 8003b72:	685a      	ldr	r2, [r3, #4]
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	697a      	ldr	r2, [r7, #20]
 8003b7c:	621a      	str	r2, [r3, #32]
}
 8003b7e:	bf00      	nop
 8003b80:	371c      	adds	r7, #28
 8003b82:	46bd      	mov	sp, r7
 8003b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b88:	4770      	bx	lr
 8003b8a:	bf00      	nop
 8003b8c:	40010000 	.word	0x40010000

08003b90 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003b90:	b480      	push	{r7}
 8003b92:	b087      	sub	sp, #28
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	6078      	str	r0, [r7, #4]
 8003b98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	6a1b      	ldr	r3, [r3, #32]
 8003b9e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	6a1b      	ldr	r3, [r3, #32]
 8003baa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	685b      	ldr	r3, [r3, #4]
 8003bb0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	69db      	ldr	r3, [r3, #28]
 8003bb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003bbe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	f023 0303 	bic.w	r3, r3, #3
 8003bc6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003bc8:	683b      	ldr	r3, [r7, #0]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	68fa      	ldr	r2, [r7, #12]
 8003bce:	4313      	orrs	r3, r2
 8003bd0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003bd2:	697b      	ldr	r3, [r7, #20]
 8003bd4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003bd8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003bda:	683b      	ldr	r3, [r7, #0]
 8003bdc:	689b      	ldr	r3, [r3, #8]
 8003bde:	021b      	lsls	r3, r3, #8
 8003be0:	697a      	ldr	r2, [r7, #20]
 8003be2:	4313      	orrs	r3, r2
 8003be4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	4a1d      	ldr	r2, [pc, #116]	; (8003c60 <TIM_OC3_SetConfig+0xd0>)
 8003bea:	4293      	cmp	r3, r2
 8003bec:	d10d      	bne.n	8003c0a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003bee:	697b      	ldr	r3, [r7, #20]
 8003bf0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003bf4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003bf6:	683b      	ldr	r3, [r7, #0]
 8003bf8:	68db      	ldr	r3, [r3, #12]
 8003bfa:	021b      	lsls	r3, r3, #8
 8003bfc:	697a      	ldr	r2, [r7, #20]
 8003bfe:	4313      	orrs	r3, r2
 8003c00:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003c02:	697b      	ldr	r3, [r7, #20]
 8003c04:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003c08:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	4a14      	ldr	r2, [pc, #80]	; (8003c60 <TIM_OC3_SetConfig+0xd0>)
 8003c0e:	4293      	cmp	r3, r2
 8003c10:	d113      	bne.n	8003c3a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003c12:	693b      	ldr	r3, [r7, #16]
 8003c14:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003c18:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003c1a:	693b      	ldr	r3, [r7, #16]
 8003c1c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003c20:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003c22:	683b      	ldr	r3, [r7, #0]
 8003c24:	695b      	ldr	r3, [r3, #20]
 8003c26:	011b      	lsls	r3, r3, #4
 8003c28:	693a      	ldr	r2, [r7, #16]
 8003c2a:	4313      	orrs	r3, r2
 8003c2c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003c2e:	683b      	ldr	r3, [r7, #0]
 8003c30:	699b      	ldr	r3, [r3, #24]
 8003c32:	011b      	lsls	r3, r3, #4
 8003c34:	693a      	ldr	r2, [r7, #16]
 8003c36:	4313      	orrs	r3, r2
 8003c38:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	693a      	ldr	r2, [r7, #16]
 8003c3e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	68fa      	ldr	r2, [r7, #12]
 8003c44:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003c46:	683b      	ldr	r3, [r7, #0]
 8003c48:	685a      	ldr	r2, [r3, #4]
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	697a      	ldr	r2, [r7, #20]
 8003c52:	621a      	str	r2, [r3, #32]
}
 8003c54:	bf00      	nop
 8003c56:	371c      	adds	r7, #28
 8003c58:	46bd      	mov	sp, r7
 8003c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c5e:	4770      	bx	lr
 8003c60:	40010000 	.word	0x40010000

08003c64 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003c64:	b480      	push	{r7}
 8003c66:	b087      	sub	sp, #28
 8003c68:	af00      	add	r7, sp, #0
 8003c6a:	6078      	str	r0, [r7, #4]
 8003c6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	6a1b      	ldr	r3, [r3, #32]
 8003c72:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	6a1b      	ldr	r3, [r3, #32]
 8003c7e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	685b      	ldr	r3, [r3, #4]
 8003c84:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	69db      	ldr	r3, [r3, #28]
 8003c8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003c92:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c9a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003c9c:	683b      	ldr	r3, [r7, #0]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	021b      	lsls	r3, r3, #8
 8003ca2:	68fa      	ldr	r2, [r7, #12]
 8003ca4:	4313      	orrs	r3, r2
 8003ca6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003ca8:	693b      	ldr	r3, [r7, #16]
 8003caa:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003cae:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003cb0:	683b      	ldr	r3, [r7, #0]
 8003cb2:	689b      	ldr	r3, [r3, #8]
 8003cb4:	031b      	lsls	r3, r3, #12
 8003cb6:	693a      	ldr	r2, [r7, #16]
 8003cb8:	4313      	orrs	r3, r2
 8003cba:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	4a10      	ldr	r2, [pc, #64]	; (8003d00 <TIM_OC4_SetConfig+0x9c>)
 8003cc0:	4293      	cmp	r3, r2
 8003cc2:	d109      	bne.n	8003cd8 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003cc4:	697b      	ldr	r3, [r7, #20]
 8003cc6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003cca:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003ccc:	683b      	ldr	r3, [r7, #0]
 8003cce:	695b      	ldr	r3, [r3, #20]
 8003cd0:	019b      	lsls	r3, r3, #6
 8003cd2:	697a      	ldr	r2, [r7, #20]
 8003cd4:	4313      	orrs	r3, r2
 8003cd6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	697a      	ldr	r2, [r7, #20]
 8003cdc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	68fa      	ldr	r2, [r7, #12]
 8003ce2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003ce4:	683b      	ldr	r3, [r7, #0]
 8003ce6:	685a      	ldr	r2, [r3, #4]
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	693a      	ldr	r2, [r7, #16]
 8003cf0:	621a      	str	r2, [r3, #32]
}
 8003cf2:	bf00      	nop
 8003cf4:	371c      	adds	r7, #28
 8003cf6:	46bd      	mov	sp, r7
 8003cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cfc:	4770      	bx	lr
 8003cfe:	bf00      	nop
 8003d00:	40010000 	.word	0x40010000

08003d04 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003d04:	b480      	push	{r7}
 8003d06:	b087      	sub	sp, #28
 8003d08:	af00      	add	r7, sp, #0
 8003d0a:	60f8      	str	r0, [r7, #12]
 8003d0c:	60b9      	str	r1, [r7, #8]
 8003d0e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003d10:	68bb      	ldr	r3, [r7, #8]
 8003d12:	f003 031f 	and.w	r3, r3, #31
 8003d16:	2201      	movs	r2, #1
 8003d18:	fa02 f303 	lsl.w	r3, r2, r3
 8003d1c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	6a1a      	ldr	r2, [r3, #32]
 8003d22:	697b      	ldr	r3, [r7, #20]
 8003d24:	43db      	mvns	r3, r3
 8003d26:	401a      	ands	r2, r3
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	6a1a      	ldr	r2, [r3, #32]
 8003d30:	68bb      	ldr	r3, [r7, #8]
 8003d32:	f003 031f 	and.w	r3, r3, #31
 8003d36:	6879      	ldr	r1, [r7, #4]
 8003d38:	fa01 f303 	lsl.w	r3, r1, r3
 8003d3c:	431a      	orrs	r2, r3
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	621a      	str	r2, [r3, #32]
}
 8003d42:	bf00      	nop
 8003d44:	371c      	adds	r7, #28
 8003d46:	46bd      	mov	sp, r7
 8003d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d4c:	4770      	bx	lr
	...

08003d50 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003d50:	b480      	push	{r7}
 8003d52:	b085      	sub	sp, #20
 8003d54:	af00      	add	r7, sp, #0
 8003d56:	6078      	str	r0, [r7, #4]
 8003d58:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d60:	2b01      	cmp	r3, #1
 8003d62:	d101      	bne.n	8003d68 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003d64:	2302      	movs	r3, #2
 8003d66:	e050      	b.n	8003e0a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	2201      	movs	r2, #1
 8003d6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	2202      	movs	r2, #2
 8003d74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	685b      	ldr	r3, [r3, #4]
 8003d7e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	689b      	ldr	r3, [r3, #8]
 8003d86:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d8e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003d90:	683b      	ldr	r3, [r7, #0]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	68fa      	ldr	r2, [r7, #12]
 8003d96:	4313      	orrs	r3, r2
 8003d98:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	68fa      	ldr	r2, [r7, #12]
 8003da0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	4a1c      	ldr	r2, [pc, #112]	; (8003e18 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003da8:	4293      	cmp	r3, r2
 8003daa:	d018      	beq.n	8003dde <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003db4:	d013      	beq.n	8003dde <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	4a18      	ldr	r2, [pc, #96]	; (8003e1c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003dbc:	4293      	cmp	r3, r2
 8003dbe:	d00e      	beq.n	8003dde <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	4a16      	ldr	r2, [pc, #88]	; (8003e20 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003dc6:	4293      	cmp	r3, r2
 8003dc8:	d009      	beq.n	8003dde <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	4a15      	ldr	r2, [pc, #84]	; (8003e24 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003dd0:	4293      	cmp	r3, r2
 8003dd2:	d004      	beq.n	8003dde <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	4a13      	ldr	r2, [pc, #76]	; (8003e28 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8003dda:	4293      	cmp	r3, r2
 8003ddc:	d10c      	bne.n	8003df8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003dde:	68bb      	ldr	r3, [r7, #8]
 8003de0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003de4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003de6:	683b      	ldr	r3, [r7, #0]
 8003de8:	685b      	ldr	r3, [r3, #4]
 8003dea:	68ba      	ldr	r2, [r7, #8]
 8003dec:	4313      	orrs	r3, r2
 8003dee:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	68ba      	ldr	r2, [r7, #8]
 8003df6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	2201      	movs	r2, #1
 8003dfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	2200      	movs	r2, #0
 8003e04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003e08:	2300      	movs	r3, #0
}
 8003e0a:	4618      	mov	r0, r3
 8003e0c:	3714      	adds	r7, #20
 8003e0e:	46bd      	mov	sp, r7
 8003e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e14:	4770      	bx	lr
 8003e16:	bf00      	nop
 8003e18:	40010000 	.word	0x40010000
 8003e1c:	40000400 	.word	0x40000400
 8003e20:	40000800 	.word	0x40000800
 8003e24:	40000c00 	.word	0x40000c00
 8003e28:	40014000 	.word	0x40014000

08003e2c <siprintf>:
 8003e2c:	b40e      	push	{r1, r2, r3}
 8003e2e:	b500      	push	{lr}
 8003e30:	b09c      	sub	sp, #112	; 0x70
 8003e32:	ab1d      	add	r3, sp, #116	; 0x74
 8003e34:	9002      	str	r0, [sp, #8]
 8003e36:	9006      	str	r0, [sp, #24]
 8003e38:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003e3c:	4809      	ldr	r0, [pc, #36]	; (8003e64 <siprintf+0x38>)
 8003e3e:	9107      	str	r1, [sp, #28]
 8003e40:	9104      	str	r1, [sp, #16]
 8003e42:	4909      	ldr	r1, [pc, #36]	; (8003e68 <siprintf+0x3c>)
 8003e44:	f853 2b04 	ldr.w	r2, [r3], #4
 8003e48:	9105      	str	r1, [sp, #20]
 8003e4a:	6800      	ldr	r0, [r0, #0]
 8003e4c:	9301      	str	r3, [sp, #4]
 8003e4e:	a902      	add	r1, sp, #8
 8003e50:	f000 f9ba 	bl	80041c8 <_svfiprintf_r>
 8003e54:	9b02      	ldr	r3, [sp, #8]
 8003e56:	2200      	movs	r2, #0
 8003e58:	701a      	strb	r2, [r3, #0]
 8003e5a:	b01c      	add	sp, #112	; 0x70
 8003e5c:	f85d eb04 	ldr.w	lr, [sp], #4
 8003e60:	b003      	add	sp, #12
 8003e62:	4770      	bx	lr
 8003e64:	20000098 	.word	0x20000098
 8003e68:	ffff0208 	.word	0xffff0208

08003e6c <std>:
 8003e6c:	2300      	movs	r3, #0
 8003e6e:	b510      	push	{r4, lr}
 8003e70:	4604      	mov	r4, r0
 8003e72:	e9c0 3300 	strd	r3, r3, [r0]
 8003e76:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003e7a:	6083      	str	r3, [r0, #8]
 8003e7c:	8181      	strh	r1, [r0, #12]
 8003e7e:	6643      	str	r3, [r0, #100]	; 0x64
 8003e80:	81c2      	strh	r2, [r0, #14]
 8003e82:	6183      	str	r3, [r0, #24]
 8003e84:	4619      	mov	r1, r3
 8003e86:	2208      	movs	r2, #8
 8003e88:	305c      	adds	r0, #92	; 0x5c
 8003e8a:	f000 f90d 	bl	80040a8 <memset>
 8003e8e:	4b0d      	ldr	r3, [pc, #52]	; (8003ec4 <std+0x58>)
 8003e90:	6263      	str	r3, [r4, #36]	; 0x24
 8003e92:	4b0d      	ldr	r3, [pc, #52]	; (8003ec8 <std+0x5c>)
 8003e94:	62a3      	str	r3, [r4, #40]	; 0x28
 8003e96:	4b0d      	ldr	r3, [pc, #52]	; (8003ecc <std+0x60>)
 8003e98:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003e9a:	4b0d      	ldr	r3, [pc, #52]	; (8003ed0 <std+0x64>)
 8003e9c:	6323      	str	r3, [r4, #48]	; 0x30
 8003e9e:	4b0d      	ldr	r3, [pc, #52]	; (8003ed4 <std+0x68>)
 8003ea0:	6224      	str	r4, [r4, #32]
 8003ea2:	429c      	cmp	r4, r3
 8003ea4:	d006      	beq.n	8003eb4 <std+0x48>
 8003ea6:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8003eaa:	4294      	cmp	r4, r2
 8003eac:	d002      	beq.n	8003eb4 <std+0x48>
 8003eae:	33d0      	adds	r3, #208	; 0xd0
 8003eb0:	429c      	cmp	r4, r3
 8003eb2:	d105      	bne.n	8003ec0 <std+0x54>
 8003eb4:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8003eb8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003ebc:	f000 b926 	b.w	800410c <__retarget_lock_init_recursive>
 8003ec0:	bd10      	pop	{r4, pc}
 8003ec2:	bf00      	nop
 8003ec4:	08004999 	.word	0x08004999
 8003ec8:	080049bb 	.word	0x080049bb
 8003ecc:	080049f3 	.word	0x080049f3
 8003ed0:	08004a17 	.word	0x08004a17
 8003ed4:	200001cc 	.word	0x200001cc

08003ed8 <stdio_exit_handler>:
 8003ed8:	4a02      	ldr	r2, [pc, #8]	; (8003ee4 <stdio_exit_handler+0xc>)
 8003eda:	4903      	ldr	r1, [pc, #12]	; (8003ee8 <stdio_exit_handler+0x10>)
 8003edc:	4803      	ldr	r0, [pc, #12]	; (8003eec <stdio_exit_handler+0x14>)
 8003ede:	f000 b869 	b.w	8003fb4 <_fwalk_sglue>
 8003ee2:	bf00      	nop
 8003ee4:	20000040 	.word	0x20000040
 8003ee8:	08004931 	.word	0x08004931
 8003eec:	2000004c 	.word	0x2000004c

08003ef0 <cleanup_stdio>:
 8003ef0:	6841      	ldr	r1, [r0, #4]
 8003ef2:	4b0c      	ldr	r3, [pc, #48]	; (8003f24 <cleanup_stdio+0x34>)
 8003ef4:	4299      	cmp	r1, r3
 8003ef6:	b510      	push	{r4, lr}
 8003ef8:	4604      	mov	r4, r0
 8003efa:	d001      	beq.n	8003f00 <cleanup_stdio+0x10>
 8003efc:	f000 fd18 	bl	8004930 <_fflush_r>
 8003f00:	68a1      	ldr	r1, [r4, #8]
 8003f02:	4b09      	ldr	r3, [pc, #36]	; (8003f28 <cleanup_stdio+0x38>)
 8003f04:	4299      	cmp	r1, r3
 8003f06:	d002      	beq.n	8003f0e <cleanup_stdio+0x1e>
 8003f08:	4620      	mov	r0, r4
 8003f0a:	f000 fd11 	bl	8004930 <_fflush_r>
 8003f0e:	68e1      	ldr	r1, [r4, #12]
 8003f10:	4b06      	ldr	r3, [pc, #24]	; (8003f2c <cleanup_stdio+0x3c>)
 8003f12:	4299      	cmp	r1, r3
 8003f14:	d004      	beq.n	8003f20 <cleanup_stdio+0x30>
 8003f16:	4620      	mov	r0, r4
 8003f18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003f1c:	f000 bd08 	b.w	8004930 <_fflush_r>
 8003f20:	bd10      	pop	{r4, pc}
 8003f22:	bf00      	nop
 8003f24:	200001cc 	.word	0x200001cc
 8003f28:	20000234 	.word	0x20000234
 8003f2c:	2000029c 	.word	0x2000029c

08003f30 <global_stdio_init.part.0>:
 8003f30:	b510      	push	{r4, lr}
 8003f32:	4b0b      	ldr	r3, [pc, #44]	; (8003f60 <global_stdio_init.part.0+0x30>)
 8003f34:	4c0b      	ldr	r4, [pc, #44]	; (8003f64 <global_stdio_init.part.0+0x34>)
 8003f36:	4a0c      	ldr	r2, [pc, #48]	; (8003f68 <global_stdio_init.part.0+0x38>)
 8003f38:	601a      	str	r2, [r3, #0]
 8003f3a:	4620      	mov	r0, r4
 8003f3c:	2200      	movs	r2, #0
 8003f3e:	2104      	movs	r1, #4
 8003f40:	f7ff ff94 	bl	8003e6c <std>
 8003f44:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8003f48:	2201      	movs	r2, #1
 8003f4a:	2109      	movs	r1, #9
 8003f4c:	f7ff ff8e 	bl	8003e6c <std>
 8003f50:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8003f54:	2202      	movs	r2, #2
 8003f56:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003f5a:	2112      	movs	r1, #18
 8003f5c:	f7ff bf86 	b.w	8003e6c <std>
 8003f60:	20000304 	.word	0x20000304
 8003f64:	200001cc 	.word	0x200001cc
 8003f68:	08003ed9 	.word	0x08003ed9

08003f6c <__sfp_lock_acquire>:
 8003f6c:	4801      	ldr	r0, [pc, #4]	; (8003f74 <__sfp_lock_acquire+0x8>)
 8003f6e:	f000 b8ce 	b.w	800410e <__retarget_lock_acquire_recursive>
 8003f72:	bf00      	nop
 8003f74:	20000309 	.word	0x20000309

08003f78 <__sfp_lock_release>:
 8003f78:	4801      	ldr	r0, [pc, #4]	; (8003f80 <__sfp_lock_release+0x8>)
 8003f7a:	f000 b8c9 	b.w	8004110 <__retarget_lock_release_recursive>
 8003f7e:	bf00      	nop
 8003f80:	20000309 	.word	0x20000309

08003f84 <__sinit>:
 8003f84:	b510      	push	{r4, lr}
 8003f86:	4604      	mov	r4, r0
 8003f88:	f7ff fff0 	bl	8003f6c <__sfp_lock_acquire>
 8003f8c:	6a23      	ldr	r3, [r4, #32]
 8003f8e:	b11b      	cbz	r3, 8003f98 <__sinit+0x14>
 8003f90:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003f94:	f7ff bff0 	b.w	8003f78 <__sfp_lock_release>
 8003f98:	4b04      	ldr	r3, [pc, #16]	; (8003fac <__sinit+0x28>)
 8003f9a:	6223      	str	r3, [r4, #32]
 8003f9c:	4b04      	ldr	r3, [pc, #16]	; (8003fb0 <__sinit+0x2c>)
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d1f5      	bne.n	8003f90 <__sinit+0xc>
 8003fa4:	f7ff ffc4 	bl	8003f30 <global_stdio_init.part.0>
 8003fa8:	e7f2      	b.n	8003f90 <__sinit+0xc>
 8003faa:	bf00      	nop
 8003fac:	08003ef1 	.word	0x08003ef1
 8003fb0:	20000304 	.word	0x20000304

08003fb4 <_fwalk_sglue>:
 8003fb4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003fb8:	4607      	mov	r7, r0
 8003fba:	4688      	mov	r8, r1
 8003fbc:	4614      	mov	r4, r2
 8003fbe:	2600      	movs	r6, #0
 8003fc0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003fc4:	f1b9 0901 	subs.w	r9, r9, #1
 8003fc8:	d505      	bpl.n	8003fd6 <_fwalk_sglue+0x22>
 8003fca:	6824      	ldr	r4, [r4, #0]
 8003fcc:	2c00      	cmp	r4, #0
 8003fce:	d1f7      	bne.n	8003fc0 <_fwalk_sglue+0xc>
 8003fd0:	4630      	mov	r0, r6
 8003fd2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003fd6:	89ab      	ldrh	r3, [r5, #12]
 8003fd8:	2b01      	cmp	r3, #1
 8003fda:	d907      	bls.n	8003fec <_fwalk_sglue+0x38>
 8003fdc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003fe0:	3301      	adds	r3, #1
 8003fe2:	d003      	beq.n	8003fec <_fwalk_sglue+0x38>
 8003fe4:	4629      	mov	r1, r5
 8003fe6:	4638      	mov	r0, r7
 8003fe8:	47c0      	blx	r8
 8003fea:	4306      	orrs	r6, r0
 8003fec:	3568      	adds	r5, #104	; 0x68
 8003fee:	e7e9      	b.n	8003fc4 <_fwalk_sglue+0x10>

08003ff0 <_puts_r>:
 8003ff0:	6a03      	ldr	r3, [r0, #32]
 8003ff2:	b570      	push	{r4, r5, r6, lr}
 8003ff4:	6884      	ldr	r4, [r0, #8]
 8003ff6:	4605      	mov	r5, r0
 8003ff8:	460e      	mov	r6, r1
 8003ffa:	b90b      	cbnz	r3, 8004000 <_puts_r+0x10>
 8003ffc:	f7ff ffc2 	bl	8003f84 <__sinit>
 8004000:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004002:	07db      	lsls	r3, r3, #31
 8004004:	d405      	bmi.n	8004012 <_puts_r+0x22>
 8004006:	89a3      	ldrh	r3, [r4, #12]
 8004008:	0598      	lsls	r0, r3, #22
 800400a:	d402      	bmi.n	8004012 <_puts_r+0x22>
 800400c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800400e:	f000 f87e 	bl	800410e <__retarget_lock_acquire_recursive>
 8004012:	89a3      	ldrh	r3, [r4, #12]
 8004014:	0719      	lsls	r1, r3, #28
 8004016:	d513      	bpl.n	8004040 <_puts_r+0x50>
 8004018:	6923      	ldr	r3, [r4, #16]
 800401a:	b18b      	cbz	r3, 8004040 <_puts_r+0x50>
 800401c:	3e01      	subs	r6, #1
 800401e:	68a3      	ldr	r3, [r4, #8]
 8004020:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004024:	3b01      	subs	r3, #1
 8004026:	60a3      	str	r3, [r4, #8]
 8004028:	b9e9      	cbnz	r1, 8004066 <_puts_r+0x76>
 800402a:	2b00      	cmp	r3, #0
 800402c:	da2e      	bge.n	800408c <_puts_r+0x9c>
 800402e:	4622      	mov	r2, r4
 8004030:	210a      	movs	r1, #10
 8004032:	4628      	mov	r0, r5
 8004034:	f000 fd22 	bl	8004a7c <__swbuf_r>
 8004038:	3001      	adds	r0, #1
 800403a:	d007      	beq.n	800404c <_puts_r+0x5c>
 800403c:	250a      	movs	r5, #10
 800403e:	e007      	b.n	8004050 <_puts_r+0x60>
 8004040:	4621      	mov	r1, r4
 8004042:	4628      	mov	r0, r5
 8004044:	f000 fd58 	bl	8004af8 <__swsetup_r>
 8004048:	2800      	cmp	r0, #0
 800404a:	d0e7      	beq.n	800401c <_puts_r+0x2c>
 800404c:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8004050:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004052:	07da      	lsls	r2, r3, #31
 8004054:	d405      	bmi.n	8004062 <_puts_r+0x72>
 8004056:	89a3      	ldrh	r3, [r4, #12]
 8004058:	059b      	lsls	r3, r3, #22
 800405a:	d402      	bmi.n	8004062 <_puts_r+0x72>
 800405c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800405e:	f000 f857 	bl	8004110 <__retarget_lock_release_recursive>
 8004062:	4628      	mov	r0, r5
 8004064:	bd70      	pop	{r4, r5, r6, pc}
 8004066:	2b00      	cmp	r3, #0
 8004068:	da04      	bge.n	8004074 <_puts_r+0x84>
 800406a:	69a2      	ldr	r2, [r4, #24]
 800406c:	429a      	cmp	r2, r3
 800406e:	dc06      	bgt.n	800407e <_puts_r+0x8e>
 8004070:	290a      	cmp	r1, #10
 8004072:	d004      	beq.n	800407e <_puts_r+0x8e>
 8004074:	6823      	ldr	r3, [r4, #0]
 8004076:	1c5a      	adds	r2, r3, #1
 8004078:	6022      	str	r2, [r4, #0]
 800407a:	7019      	strb	r1, [r3, #0]
 800407c:	e7cf      	b.n	800401e <_puts_r+0x2e>
 800407e:	4622      	mov	r2, r4
 8004080:	4628      	mov	r0, r5
 8004082:	f000 fcfb 	bl	8004a7c <__swbuf_r>
 8004086:	3001      	adds	r0, #1
 8004088:	d1c9      	bne.n	800401e <_puts_r+0x2e>
 800408a:	e7df      	b.n	800404c <_puts_r+0x5c>
 800408c:	6823      	ldr	r3, [r4, #0]
 800408e:	250a      	movs	r5, #10
 8004090:	1c5a      	adds	r2, r3, #1
 8004092:	6022      	str	r2, [r4, #0]
 8004094:	701d      	strb	r5, [r3, #0]
 8004096:	e7db      	b.n	8004050 <_puts_r+0x60>

08004098 <puts>:
 8004098:	4b02      	ldr	r3, [pc, #8]	; (80040a4 <puts+0xc>)
 800409a:	4601      	mov	r1, r0
 800409c:	6818      	ldr	r0, [r3, #0]
 800409e:	f7ff bfa7 	b.w	8003ff0 <_puts_r>
 80040a2:	bf00      	nop
 80040a4:	20000098 	.word	0x20000098

080040a8 <memset>:
 80040a8:	4402      	add	r2, r0
 80040aa:	4603      	mov	r3, r0
 80040ac:	4293      	cmp	r3, r2
 80040ae:	d100      	bne.n	80040b2 <memset+0xa>
 80040b0:	4770      	bx	lr
 80040b2:	f803 1b01 	strb.w	r1, [r3], #1
 80040b6:	e7f9      	b.n	80040ac <memset+0x4>

080040b8 <__errno>:
 80040b8:	4b01      	ldr	r3, [pc, #4]	; (80040c0 <__errno+0x8>)
 80040ba:	6818      	ldr	r0, [r3, #0]
 80040bc:	4770      	bx	lr
 80040be:	bf00      	nop
 80040c0:	20000098 	.word	0x20000098

080040c4 <__libc_init_array>:
 80040c4:	b570      	push	{r4, r5, r6, lr}
 80040c6:	4d0d      	ldr	r5, [pc, #52]	; (80040fc <__libc_init_array+0x38>)
 80040c8:	4c0d      	ldr	r4, [pc, #52]	; (8004100 <__libc_init_array+0x3c>)
 80040ca:	1b64      	subs	r4, r4, r5
 80040cc:	10a4      	asrs	r4, r4, #2
 80040ce:	2600      	movs	r6, #0
 80040d0:	42a6      	cmp	r6, r4
 80040d2:	d109      	bne.n	80040e8 <__libc_init_array+0x24>
 80040d4:	4d0b      	ldr	r5, [pc, #44]	; (8004104 <__libc_init_array+0x40>)
 80040d6:	4c0c      	ldr	r4, [pc, #48]	; (8004108 <__libc_init_array+0x44>)
 80040d8:	f000 febc 	bl	8004e54 <_init>
 80040dc:	1b64      	subs	r4, r4, r5
 80040de:	10a4      	asrs	r4, r4, #2
 80040e0:	2600      	movs	r6, #0
 80040e2:	42a6      	cmp	r6, r4
 80040e4:	d105      	bne.n	80040f2 <__libc_init_array+0x2e>
 80040e6:	bd70      	pop	{r4, r5, r6, pc}
 80040e8:	f855 3b04 	ldr.w	r3, [r5], #4
 80040ec:	4798      	blx	r3
 80040ee:	3601      	adds	r6, #1
 80040f0:	e7ee      	b.n	80040d0 <__libc_init_array+0xc>
 80040f2:	f855 3b04 	ldr.w	r3, [r5], #4
 80040f6:	4798      	blx	r3
 80040f8:	3601      	adds	r6, #1
 80040fa:	e7f2      	b.n	80040e2 <__libc_init_array+0x1e>
 80040fc:	08004f74 	.word	0x08004f74
 8004100:	08004f74 	.word	0x08004f74
 8004104:	08004f74 	.word	0x08004f74
 8004108:	08004f78 	.word	0x08004f78

0800410c <__retarget_lock_init_recursive>:
 800410c:	4770      	bx	lr

0800410e <__retarget_lock_acquire_recursive>:
 800410e:	4770      	bx	lr

08004110 <__retarget_lock_release_recursive>:
 8004110:	4770      	bx	lr

08004112 <__ssputs_r>:
 8004112:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004116:	688e      	ldr	r6, [r1, #8]
 8004118:	461f      	mov	r7, r3
 800411a:	42be      	cmp	r6, r7
 800411c:	680b      	ldr	r3, [r1, #0]
 800411e:	4682      	mov	sl, r0
 8004120:	460c      	mov	r4, r1
 8004122:	4690      	mov	r8, r2
 8004124:	d82c      	bhi.n	8004180 <__ssputs_r+0x6e>
 8004126:	898a      	ldrh	r2, [r1, #12]
 8004128:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800412c:	d026      	beq.n	800417c <__ssputs_r+0x6a>
 800412e:	6965      	ldr	r5, [r4, #20]
 8004130:	6909      	ldr	r1, [r1, #16]
 8004132:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004136:	eba3 0901 	sub.w	r9, r3, r1
 800413a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800413e:	1c7b      	adds	r3, r7, #1
 8004140:	444b      	add	r3, r9
 8004142:	106d      	asrs	r5, r5, #1
 8004144:	429d      	cmp	r5, r3
 8004146:	bf38      	it	cc
 8004148:	461d      	movcc	r5, r3
 800414a:	0553      	lsls	r3, r2, #21
 800414c:	d527      	bpl.n	800419e <__ssputs_r+0x8c>
 800414e:	4629      	mov	r1, r5
 8004150:	f000 f958 	bl	8004404 <_malloc_r>
 8004154:	4606      	mov	r6, r0
 8004156:	b360      	cbz	r0, 80041b2 <__ssputs_r+0xa0>
 8004158:	6921      	ldr	r1, [r4, #16]
 800415a:	464a      	mov	r2, r9
 800415c:	f000 fe18 	bl	8004d90 <memcpy>
 8004160:	89a3      	ldrh	r3, [r4, #12]
 8004162:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004166:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800416a:	81a3      	strh	r3, [r4, #12]
 800416c:	6126      	str	r6, [r4, #16]
 800416e:	6165      	str	r5, [r4, #20]
 8004170:	444e      	add	r6, r9
 8004172:	eba5 0509 	sub.w	r5, r5, r9
 8004176:	6026      	str	r6, [r4, #0]
 8004178:	60a5      	str	r5, [r4, #8]
 800417a:	463e      	mov	r6, r7
 800417c:	42be      	cmp	r6, r7
 800417e:	d900      	bls.n	8004182 <__ssputs_r+0x70>
 8004180:	463e      	mov	r6, r7
 8004182:	6820      	ldr	r0, [r4, #0]
 8004184:	4632      	mov	r2, r6
 8004186:	4641      	mov	r1, r8
 8004188:	f000 fd70 	bl	8004c6c <memmove>
 800418c:	68a3      	ldr	r3, [r4, #8]
 800418e:	1b9b      	subs	r3, r3, r6
 8004190:	60a3      	str	r3, [r4, #8]
 8004192:	6823      	ldr	r3, [r4, #0]
 8004194:	4433      	add	r3, r6
 8004196:	6023      	str	r3, [r4, #0]
 8004198:	2000      	movs	r0, #0
 800419a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800419e:	462a      	mov	r2, r5
 80041a0:	f000 fc3d 	bl	8004a1e <_realloc_r>
 80041a4:	4606      	mov	r6, r0
 80041a6:	2800      	cmp	r0, #0
 80041a8:	d1e0      	bne.n	800416c <__ssputs_r+0x5a>
 80041aa:	6921      	ldr	r1, [r4, #16]
 80041ac:	4650      	mov	r0, sl
 80041ae:	f000 fdfd 	bl	8004dac <_free_r>
 80041b2:	230c      	movs	r3, #12
 80041b4:	f8ca 3000 	str.w	r3, [sl]
 80041b8:	89a3      	ldrh	r3, [r4, #12]
 80041ba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80041be:	81a3      	strh	r3, [r4, #12]
 80041c0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80041c4:	e7e9      	b.n	800419a <__ssputs_r+0x88>
	...

080041c8 <_svfiprintf_r>:
 80041c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80041cc:	4698      	mov	r8, r3
 80041ce:	898b      	ldrh	r3, [r1, #12]
 80041d0:	061b      	lsls	r3, r3, #24
 80041d2:	b09d      	sub	sp, #116	; 0x74
 80041d4:	4607      	mov	r7, r0
 80041d6:	460d      	mov	r5, r1
 80041d8:	4614      	mov	r4, r2
 80041da:	d50e      	bpl.n	80041fa <_svfiprintf_r+0x32>
 80041dc:	690b      	ldr	r3, [r1, #16]
 80041de:	b963      	cbnz	r3, 80041fa <_svfiprintf_r+0x32>
 80041e0:	2140      	movs	r1, #64	; 0x40
 80041e2:	f000 f90f 	bl	8004404 <_malloc_r>
 80041e6:	6028      	str	r0, [r5, #0]
 80041e8:	6128      	str	r0, [r5, #16]
 80041ea:	b920      	cbnz	r0, 80041f6 <_svfiprintf_r+0x2e>
 80041ec:	230c      	movs	r3, #12
 80041ee:	603b      	str	r3, [r7, #0]
 80041f0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80041f4:	e0d0      	b.n	8004398 <_svfiprintf_r+0x1d0>
 80041f6:	2340      	movs	r3, #64	; 0x40
 80041f8:	616b      	str	r3, [r5, #20]
 80041fa:	2300      	movs	r3, #0
 80041fc:	9309      	str	r3, [sp, #36]	; 0x24
 80041fe:	2320      	movs	r3, #32
 8004200:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004204:	f8cd 800c 	str.w	r8, [sp, #12]
 8004208:	2330      	movs	r3, #48	; 0x30
 800420a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80043b0 <_svfiprintf_r+0x1e8>
 800420e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004212:	f04f 0901 	mov.w	r9, #1
 8004216:	4623      	mov	r3, r4
 8004218:	469a      	mov	sl, r3
 800421a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800421e:	b10a      	cbz	r2, 8004224 <_svfiprintf_r+0x5c>
 8004220:	2a25      	cmp	r2, #37	; 0x25
 8004222:	d1f9      	bne.n	8004218 <_svfiprintf_r+0x50>
 8004224:	ebba 0b04 	subs.w	fp, sl, r4
 8004228:	d00b      	beq.n	8004242 <_svfiprintf_r+0x7a>
 800422a:	465b      	mov	r3, fp
 800422c:	4622      	mov	r2, r4
 800422e:	4629      	mov	r1, r5
 8004230:	4638      	mov	r0, r7
 8004232:	f7ff ff6e 	bl	8004112 <__ssputs_r>
 8004236:	3001      	adds	r0, #1
 8004238:	f000 80a9 	beq.w	800438e <_svfiprintf_r+0x1c6>
 800423c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800423e:	445a      	add	r2, fp
 8004240:	9209      	str	r2, [sp, #36]	; 0x24
 8004242:	f89a 3000 	ldrb.w	r3, [sl]
 8004246:	2b00      	cmp	r3, #0
 8004248:	f000 80a1 	beq.w	800438e <_svfiprintf_r+0x1c6>
 800424c:	2300      	movs	r3, #0
 800424e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004252:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004256:	f10a 0a01 	add.w	sl, sl, #1
 800425a:	9304      	str	r3, [sp, #16]
 800425c:	9307      	str	r3, [sp, #28]
 800425e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004262:	931a      	str	r3, [sp, #104]	; 0x68
 8004264:	4654      	mov	r4, sl
 8004266:	2205      	movs	r2, #5
 8004268:	f814 1b01 	ldrb.w	r1, [r4], #1
 800426c:	4850      	ldr	r0, [pc, #320]	; (80043b0 <_svfiprintf_r+0x1e8>)
 800426e:	f7fb ffbf 	bl	80001f0 <memchr>
 8004272:	9a04      	ldr	r2, [sp, #16]
 8004274:	b9d8      	cbnz	r0, 80042ae <_svfiprintf_r+0xe6>
 8004276:	06d0      	lsls	r0, r2, #27
 8004278:	bf44      	itt	mi
 800427a:	2320      	movmi	r3, #32
 800427c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004280:	0711      	lsls	r1, r2, #28
 8004282:	bf44      	itt	mi
 8004284:	232b      	movmi	r3, #43	; 0x2b
 8004286:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800428a:	f89a 3000 	ldrb.w	r3, [sl]
 800428e:	2b2a      	cmp	r3, #42	; 0x2a
 8004290:	d015      	beq.n	80042be <_svfiprintf_r+0xf6>
 8004292:	9a07      	ldr	r2, [sp, #28]
 8004294:	4654      	mov	r4, sl
 8004296:	2000      	movs	r0, #0
 8004298:	f04f 0c0a 	mov.w	ip, #10
 800429c:	4621      	mov	r1, r4
 800429e:	f811 3b01 	ldrb.w	r3, [r1], #1
 80042a2:	3b30      	subs	r3, #48	; 0x30
 80042a4:	2b09      	cmp	r3, #9
 80042a6:	d94d      	bls.n	8004344 <_svfiprintf_r+0x17c>
 80042a8:	b1b0      	cbz	r0, 80042d8 <_svfiprintf_r+0x110>
 80042aa:	9207      	str	r2, [sp, #28]
 80042ac:	e014      	b.n	80042d8 <_svfiprintf_r+0x110>
 80042ae:	eba0 0308 	sub.w	r3, r0, r8
 80042b2:	fa09 f303 	lsl.w	r3, r9, r3
 80042b6:	4313      	orrs	r3, r2
 80042b8:	9304      	str	r3, [sp, #16]
 80042ba:	46a2      	mov	sl, r4
 80042bc:	e7d2      	b.n	8004264 <_svfiprintf_r+0x9c>
 80042be:	9b03      	ldr	r3, [sp, #12]
 80042c0:	1d19      	adds	r1, r3, #4
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	9103      	str	r1, [sp, #12]
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	bfbb      	ittet	lt
 80042ca:	425b      	neglt	r3, r3
 80042cc:	f042 0202 	orrlt.w	r2, r2, #2
 80042d0:	9307      	strge	r3, [sp, #28]
 80042d2:	9307      	strlt	r3, [sp, #28]
 80042d4:	bfb8      	it	lt
 80042d6:	9204      	strlt	r2, [sp, #16]
 80042d8:	7823      	ldrb	r3, [r4, #0]
 80042da:	2b2e      	cmp	r3, #46	; 0x2e
 80042dc:	d10c      	bne.n	80042f8 <_svfiprintf_r+0x130>
 80042de:	7863      	ldrb	r3, [r4, #1]
 80042e0:	2b2a      	cmp	r3, #42	; 0x2a
 80042e2:	d134      	bne.n	800434e <_svfiprintf_r+0x186>
 80042e4:	9b03      	ldr	r3, [sp, #12]
 80042e6:	1d1a      	adds	r2, r3, #4
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	9203      	str	r2, [sp, #12]
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	bfb8      	it	lt
 80042f0:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80042f4:	3402      	adds	r4, #2
 80042f6:	9305      	str	r3, [sp, #20]
 80042f8:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 80043c0 <_svfiprintf_r+0x1f8>
 80042fc:	7821      	ldrb	r1, [r4, #0]
 80042fe:	2203      	movs	r2, #3
 8004300:	4650      	mov	r0, sl
 8004302:	f7fb ff75 	bl	80001f0 <memchr>
 8004306:	b138      	cbz	r0, 8004318 <_svfiprintf_r+0x150>
 8004308:	9b04      	ldr	r3, [sp, #16]
 800430a:	eba0 000a 	sub.w	r0, r0, sl
 800430e:	2240      	movs	r2, #64	; 0x40
 8004310:	4082      	lsls	r2, r0
 8004312:	4313      	orrs	r3, r2
 8004314:	3401      	adds	r4, #1
 8004316:	9304      	str	r3, [sp, #16]
 8004318:	f814 1b01 	ldrb.w	r1, [r4], #1
 800431c:	4825      	ldr	r0, [pc, #148]	; (80043b4 <_svfiprintf_r+0x1ec>)
 800431e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004322:	2206      	movs	r2, #6
 8004324:	f7fb ff64 	bl	80001f0 <memchr>
 8004328:	2800      	cmp	r0, #0
 800432a:	d038      	beq.n	800439e <_svfiprintf_r+0x1d6>
 800432c:	4b22      	ldr	r3, [pc, #136]	; (80043b8 <_svfiprintf_r+0x1f0>)
 800432e:	bb1b      	cbnz	r3, 8004378 <_svfiprintf_r+0x1b0>
 8004330:	9b03      	ldr	r3, [sp, #12]
 8004332:	3307      	adds	r3, #7
 8004334:	f023 0307 	bic.w	r3, r3, #7
 8004338:	3308      	adds	r3, #8
 800433a:	9303      	str	r3, [sp, #12]
 800433c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800433e:	4433      	add	r3, r6
 8004340:	9309      	str	r3, [sp, #36]	; 0x24
 8004342:	e768      	b.n	8004216 <_svfiprintf_r+0x4e>
 8004344:	fb0c 3202 	mla	r2, ip, r2, r3
 8004348:	460c      	mov	r4, r1
 800434a:	2001      	movs	r0, #1
 800434c:	e7a6      	b.n	800429c <_svfiprintf_r+0xd4>
 800434e:	2300      	movs	r3, #0
 8004350:	3401      	adds	r4, #1
 8004352:	9305      	str	r3, [sp, #20]
 8004354:	4619      	mov	r1, r3
 8004356:	f04f 0c0a 	mov.w	ip, #10
 800435a:	4620      	mov	r0, r4
 800435c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004360:	3a30      	subs	r2, #48	; 0x30
 8004362:	2a09      	cmp	r2, #9
 8004364:	d903      	bls.n	800436e <_svfiprintf_r+0x1a6>
 8004366:	2b00      	cmp	r3, #0
 8004368:	d0c6      	beq.n	80042f8 <_svfiprintf_r+0x130>
 800436a:	9105      	str	r1, [sp, #20]
 800436c:	e7c4      	b.n	80042f8 <_svfiprintf_r+0x130>
 800436e:	fb0c 2101 	mla	r1, ip, r1, r2
 8004372:	4604      	mov	r4, r0
 8004374:	2301      	movs	r3, #1
 8004376:	e7f0      	b.n	800435a <_svfiprintf_r+0x192>
 8004378:	ab03      	add	r3, sp, #12
 800437a:	9300      	str	r3, [sp, #0]
 800437c:	462a      	mov	r2, r5
 800437e:	4b0f      	ldr	r3, [pc, #60]	; (80043bc <_svfiprintf_r+0x1f4>)
 8004380:	a904      	add	r1, sp, #16
 8004382:	4638      	mov	r0, r7
 8004384:	f3af 8000 	nop.w
 8004388:	1c42      	adds	r2, r0, #1
 800438a:	4606      	mov	r6, r0
 800438c:	d1d6      	bne.n	800433c <_svfiprintf_r+0x174>
 800438e:	89ab      	ldrh	r3, [r5, #12]
 8004390:	065b      	lsls	r3, r3, #25
 8004392:	f53f af2d 	bmi.w	80041f0 <_svfiprintf_r+0x28>
 8004396:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004398:	b01d      	add	sp, #116	; 0x74
 800439a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800439e:	ab03      	add	r3, sp, #12
 80043a0:	9300      	str	r3, [sp, #0]
 80043a2:	462a      	mov	r2, r5
 80043a4:	4b05      	ldr	r3, [pc, #20]	; (80043bc <_svfiprintf_r+0x1f4>)
 80043a6:	a904      	add	r1, sp, #16
 80043a8:	4638      	mov	r0, r7
 80043aa:	f000 f919 	bl	80045e0 <_printf_i>
 80043ae:	e7eb      	b.n	8004388 <_svfiprintf_r+0x1c0>
 80043b0:	08004f38 	.word	0x08004f38
 80043b4:	08004f42 	.word	0x08004f42
 80043b8:	00000000 	.word	0x00000000
 80043bc:	08004113 	.word	0x08004113
 80043c0:	08004f3e 	.word	0x08004f3e

080043c4 <sbrk_aligned>:
 80043c4:	b570      	push	{r4, r5, r6, lr}
 80043c6:	4e0e      	ldr	r6, [pc, #56]	; (8004400 <sbrk_aligned+0x3c>)
 80043c8:	460c      	mov	r4, r1
 80043ca:	6831      	ldr	r1, [r6, #0]
 80043cc:	4605      	mov	r5, r0
 80043ce:	b911      	cbnz	r1, 80043d6 <sbrk_aligned+0x12>
 80043d0:	f000 fcbc 	bl	8004d4c <_sbrk_r>
 80043d4:	6030      	str	r0, [r6, #0]
 80043d6:	4621      	mov	r1, r4
 80043d8:	4628      	mov	r0, r5
 80043da:	f000 fcb7 	bl	8004d4c <_sbrk_r>
 80043de:	1c43      	adds	r3, r0, #1
 80043e0:	d00a      	beq.n	80043f8 <sbrk_aligned+0x34>
 80043e2:	1cc4      	adds	r4, r0, #3
 80043e4:	f024 0403 	bic.w	r4, r4, #3
 80043e8:	42a0      	cmp	r0, r4
 80043ea:	d007      	beq.n	80043fc <sbrk_aligned+0x38>
 80043ec:	1a21      	subs	r1, r4, r0
 80043ee:	4628      	mov	r0, r5
 80043f0:	f000 fcac 	bl	8004d4c <_sbrk_r>
 80043f4:	3001      	adds	r0, #1
 80043f6:	d101      	bne.n	80043fc <sbrk_aligned+0x38>
 80043f8:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80043fc:	4620      	mov	r0, r4
 80043fe:	bd70      	pop	{r4, r5, r6, pc}
 8004400:	20000310 	.word	0x20000310

08004404 <_malloc_r>:
 8004404:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004408:	1ccd      	adds	r5, r1, #3
 800440a:	f025 0503 	bic.w	r5, r5, #3
 800440e:	3508      	adds	r5, #8
 8004410:	2d0c      	cmp	r5, #12
 8004412:	bf38      	it	cc
 8004414:	250c      	movcc	r5, #12
 8004416:	2d00      	cmp	r5, #0
 8004418:	4607      	mov	r7, r0
 800441a:	db01      	blt.n	8004420 <_malloc_r+0x1c>
 800441c:	42a9      	cmp	r1, r5
 800441e:	d905      	bls.n	800442c <_malloc_r+0x28>
 8004420:	230c      	movs	r3, #12
 8004422:	603b      	str	r3, [r7, #0]
 8004424:	2600      	movs	r6, #0
 8004426:	4630      	mov	r0, r6
 8004428:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800442c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8004500 <_malloc_r+0xfc>
 8004430:	f000 faa6 	bl	8004980 <__malloc_lock>
 8004434:	f8d8 3000 	ldr.w	r3, [r8]
 8004438:	461c      	mov	r4, r3
 800443a:	bb5c      	cbnz	r4, 8004494 <_malloc_r+0x90>
 800443c:	4629      	mov	r1, r5
 800443e:	4638      	mov	r0, r7
 8004440:	f7ff ffc0 	bl	80043c4 <sbrk_aligned>
 8004444:	1c43      	adds	r3, r0, #1
 8004446:	4604      	mov	r4, r0
 8004448:	d155      	bne.n	80044f6 <_malloc_r+0xf2>
 800444a:	f8d8 4000 	ldr.w	r4, [r8]
 800444e:	4626      	mov	r6, r4
 8004450:	2e00      	cmp	r6, #0
 8004452:	d145      	bne.n	80044e0 <_malloc_r+0xdc>
 8004454:	2c00      	cmp	r4, #0
 8004456:	d048      	beq.n	80044ea <_malloc_r+0xe6>
 8004458:	6823      	ldr	r3, [r4, #0]
 800445a:	4631      	mov	r1, r6
 800445c:	4638      	mov	r0, r7
 800445e:	eb04 0903 	add.w	r9, r4, r3
 8004462:	f000 fc73 	bl	8004d4c <_sbrk_r>
 8004466:	4581      	cmp	r9, r0
 8004468:	d13f      	bne.n	80044ea <_malloc_r+0xe6>
 800446a:	6821      	ldr	r1, [r4, #0]
 800446c:	1a6d      	subs	r5, r5, r1
 800446e:	4629      	mov	r1, r5
 8004470:	4638      	mov	r0, r7
 8004472:	f7ff ffa7 	bl	80043c4 <sbrk_aligned>
 8004476:	3001      	adds	r0, #1
 8004478:	d037      	beq.n	80044ea <_malloc_r+0xe6>
 800447a:	6823      	ldr	r3, [r4, #0]
 800447c:	442b      	add	r3, r5
 800447e:	6023      	str	r3, [r4, #0]
 8004480:	f8d8 3000 	ldr.w	r3, [r8]
 8004484:	2b00      	cmp	r3, #0
 8004486:	d038      	beq.n	80044fa <_malloc_r+0xf6>
 8004488:	685a      	ldr	r2, [r3, #4]
 800448a:	42a2      	cmp	r2, r4
 800448c:	d12b      	bne.n	80044e6 <_malloc_r+0xe2>
 800448e:	2200      	movs	r2, #0
 8004490:	605a      	str	r2, [r3, #4]
 8004492:	e00f      	b.n	80044b4 <_malloc_r+0xb0>
 8004494:	6822      	ldr	r2, [r4, #0]
 8004496:	1b52      	subs	r2, r2, r5
 8004498:	d41f      	bmi.n	80044da <_malloc_r+0xd6>
 800449a:	2a0b      	cmp	r2, #11
 800449c:	d917      	bls.n	80044ce <_malloc_r+0xca>
 800449e:	1961      	adds	r1, r4, r5
 80044a0:	42a3      	cmp	r3, r4
 80044a2:	6025      	str	r5, [r4, #0]
 80044a4:	bf18      	it	ne
 80044a6:	6059      	strne	r1, [r3, #4]
 80044a8:	6863      	ldr	r3, [r4, #4]
 80044aa:	bf08      	it	eq
 80044ac:	f8c8 1000 	streq.w	r1, [r8]
 80044b0:	5162      	str	r2, [r4, r5]
 80044b2:	604b      	str	r3, [r1, #4]
 80044b4:	4638      	mov	r0, r7
 80044b6:	f104 060b 	add.w	r6, r4, #11
 80044ba:	f000 fa67 	bl	800498c <__malloc_unlock>
 80044be:	f026 0607 	bic.w	r6, r6, #7
 80044c2:	1d23      	adds	r3, r4, #4
 80044c4:	1af2      	subs	r2, r6, r3
 80044c6:	d0ae      	beq.n	8004426 <_malloc_r+0x22>
 80044c8:	1b9b      	subs	r3, r3, r6
 80044ca:	50a3      	str	r3, [r4, r2]
 80044cc:	e7ab      	b.n	8004426 <_malloc_r+0x22>
 80044ce:	42a3      	cmp	r3, r4
 80044d0:	6862      	ldr	r2, [r4, #4]
 80044d2:	d1dd      	bne.n	8004490 <_malloc_r+0x8c>
 80044d4:	f8c8 2000 	str.w	r2, [r8]
 80044d8:	e7ec      	b.n	80044b4 <_malloc_r+0xb0>
 80044da:	4623      	mov	r3, r4
 80044dc:	6864      	ldr	r4, [r4, #4]
 80044de:	e7ac      	b.n	800443a <_malloc_r+0x36>
 80044e0:	4634      	mov	r4, r6
 80044e2:	6876      	ldr	r6, [r6, #4]
 80044e4:	e7b4      	b.n	8004450 <_malloc_r+0x4c>
 80044e6:	4613      	mov	r3, r2
 80044e8:	e7cc      	b.n	8004484 <_malloc_r+0x80>
 80044ea:	230c      	movs	r3, #12
 80044ec:	603b      	str	r3, [r7, #0]
 80044ee:	4638      	mov	r0, r7
 80044f0:	f000 fa4c 	bl	800498c <__malloc_unlock>
 80044f4:	e797      	b.n	8004426 <_malloc_r+0x22>
 80044f6:	6025      	str	r5, [r4, #0]
 80044f8:	e7dc      	b.n	80044b4 <_malloc_r+0xb0>
 80044fa:	605b      	str	r3, [r3, #4]
 80044fc:	deff      	udf	#255	; 0xff
 80044fe:	bf00      	nop
 8004500:	2000030c 	.word	0x2000030c

08004504 <_printf_common>:
 8004504:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004508:	4616      	mov	r6, r2
 800450a:	4699      	mov	r9, r3
 800450c:	688a      	ldr	r2, [r1, #8]
 800450e:	690b      	ldr	r3, [r1, #16]
 8004510:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004514:	4293      	cmp	r3, r2
 8004516:	bfb8      	it	lt
 8004518:	4613      	movlt	r3, r2
 800451a:	6033      	str	r3, [r6, #0]
 800451c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004520:	4607      	mov	r7, r0
 8004522:	460c      	mov	r4, r1
 8004524:	b10a      	cbz	r2, 800452a <_printf_common+0x26>
 8004526:	3301      	adds	r3, #1
 8004528:	6033      	str	r3, [r6, #0]
 800452a:	6823      	ldr	r3, [r4, #0]
 800452c:	0699      	lsls	r1, r3, #26
 800452e:	bf42      	ittt	mi
 8004530:	6833      	ldrmi	r3, [r6, #0]
 8004532:	3302      	addmi	r3, #2
 8004534:	6033      	strmi	r3, [r6, #0]
 8004536:	6825      	ldr	r5, [r4, #0]
 8004538:	f015 0506 	ands.w	r5, r5, #6
 800453c:	d106      	bne.n	800454c <_printf_common+0x48>
 800453e:	f104 0a19 	add.w	sl, r4, #25
 8004542:	68e3      	ldr	r3, [r4, #12]
 8004544:	6832      	ldr	r2, [r6, #0]
 8004546:	1a9b      	subs	r3, r3, r2
 8004548:	42ab      	cmp	r3, r5
 800454a:	dc26      	bgt.n	800459a <_printf_common+0x96>
 800454c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004550:	1e13      	subs	r3, r2, #0
 8004552:	6822      	ldr	r2, [r4, #0]
 8004554:	bf18      	it	ne
 8004556:	2301      	movne	r3, #1
 8004558:	0692      	lsls	r2, r2, #26
 800455a:	d42b      	bmi.n	80045b4 <_printf_common+0xb0>
 800455c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004560:	4649      	mov	r1, r9
 8004562:	4638      	mov	r0, r7
 8004564:	47c0      	blx	r8
 8004566:	3001      	adds	r0, #1
 8004568:	d01e      	beq.n	80045a8 <_printf_common+0xa4>
 800456a:	6823      	ldr	r3, [r4, #0]
 800456c:	6922      	ldr	r2, [r4, #16]
 800456e:	f003 0306 	and.w	r3, r3, #6
 8004572:	2b04      	cmp	r3, #4
 8004574:	bf02      	ittt	eq
 8004576:	68e5      	ldreq	r5, [r4, #12]
 8004578:	6833      	ldreq	r3, [r6, #0]
 800457a:	1aed      	subeq	r5, r5, r3
 800457c:	68a3      	ldr	r3, [r4, #8]
 800457e:	bf0c      	ite	eq
 8004580:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004584:	2500      	movne	r5, #0
 8004586:	4293      	cmp	r3, r2
 8004588:	bfc4      	itt	gt
 800458a:	1a9b      	subgt	r3, r3, r2
 800458c:	18ed      	addgt	r5, r5, r3
 800458e:	2600      	movs	r6, #0
 8004590:	341a      	adds	r4, #26
 8004592:	42b5      	cmp	r5, r6
 8004594:	d11a      	bne.n	80045cc <_printf_common+0xc8>
 8004596:	2000      	movs	r0, #0
 8004598:	e008      	b.n	80045ac <_printf_common+0xa8>
 800459a:	2301      	movs	r3, #1
 800459c:	4652      	mov	r2, sl
 800459e:	4649      	mov	r1, r9
 80045a0:	4638      	mov	r0, r7
 80045a2:	47c0      	blx	r8
 80045a4:	3001      	adds	r0, #1
 80045a6:	d103      	bne.n	80045b0 <_printf_common+0xac>
 80045a8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80045ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80045b0:	3501      	adds	r5, #1
 80045b2:	e7c6      	b.n	8004542 <_printf_common+0x3e>
 80045b4:	18e1      	adds	r1, r4, r3
 80045b6:	1c5a      	adds	r2, r3, #1
 80045b8:	2030      	movs	r0, #48	; 0x30
 80045ba:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80045be:	4422      	add	r2, r4
 80045c0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80045c4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80045c8:	3302      	adds	r3, #2
 80045ca:	e7c7      	b.n	800455c <_printf_common+0x58>
 80045cc:	2301      	movs	r3, #1
 80045ce:	4622      	mov	r2, r4
 80045d0:	4649      	mov	r1, r9
 80045d2:	4638      	mov	r0, r7
 80045d4:	47c0      	blx	r8
 80045d6:	3001      	adds	r0, #1
 80045d8:	d0e6      	beq.n	80045a8 <_printf_common+0xa4>
 80045da:	3601      	adds	r6, #1
 80045dc:	e7d9      	b.n	8004592 <_printf_common+0x8e>
	...

080045e0 <_printf_i>:
 80045e0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80045e4:	7e0f      	ldrb	r7, [r1, #24]
 80045e6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80045e8:	2f78      	cmp	r7, #120	; 0x78
 80045ea:	4691      	mov	r9, r2
 80045ec:	4680      	mov	r8, r0
 80045ee:	460c      	mov	r4, r1
 80045f0:	469a      	mov	sl, r3
 80045f2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80045f6:	d807      	bhi.n	8004608 <_printf_i+0x28>
 80045f8:	2f62      	cmp	r7, #98	; 0x62
 80045fa:	d80a      	bhi.n	8004612 <_printf_i+0x32>
 80045fc:	2f00      	cmp	r7, #0
 80045fe:	f000 80d4 	beq.w	80047aa <_printf_i+0x1ca>
 8004602:	2f58      	cmp	r7, #88	; 0x58
 8004604:	f000 80c0 	beq.w	8004788 <_printf_i+0x1a8>
 8004608:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800460c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004610:	e03a      	b.n	8004688 <_printf_i+0xa8>
 8004612:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004616:	2b15      	cmp	r3, #21
 8004618:	d8f6      	bhi.n	8004608 <_printf_i+0x28>
 800461a:	a101      	add	r1, pc, #4	; (adr r1, 8004620 <_printf_i+0x40>)
 800461c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004620:	08004679 	.word	0x08004679
 8004624:	0800468d 	.word	0x0800468d
 8004628:	08004609 	.word	0x08004609
 800462c:	08004609 	.word	0x08004609
 8004630:	08004609 	.word	0x08004609
 8004634:	08004609 	.word	0x08004609
 8004638:	0800468d 	.word	0x0800468d
 800463c:	08004609 	.word	0x08004609
 8004640:	08004609 	.word	0x08004609
 8004644:	08004609 	.word	0x08004609
 8004648:	08004609 	.word	0x08004609
 800464c:	08004791 	.word	0x08004791
 8004650:	080046b9 	.word	0x080046b9
 8004654:	0800474b 	.word	0x0800474b
 8004658:	08004609 	.word	0x08004609
 800465c:	08004609 	.word	0x08004609
 8004660:	080047b3 	.word	0x080047b3
 8004664:	08004609 	.word	0x08004609
 8004668:	080046b9 	.word	0x080046b9
 800466c:	08004609 	.word	0x08004609
 8004670:	08004609 	.word	0x08004609
 8004674:	08004753 	.word	0x08004753
 8004678:	682b      	ldr	r3, [r5, #0]
 800467a:	1d1a      	adds	r2, r3, #4
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	602a      	str	r2, [r5, #0]
 8004680:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004684:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004688:	2301      	movs	r3, #1
 800468a:	e09f      	b.n	80047cc <_printf_i+0x1ec>
 800468c:	6820      	ldr	r0, [r4, #0]
 800468e:	682b      	ldr	r3, [r5, #0]
 8004690:	0607      	lsls	r7, r0, #24
 8004692:	f103 0104 	add.w	r1, r3, #4
 8004696:	6029      	str	r1, [r5, #0]
 8004698:	d501      	bpl.n	800469e <_printf_i+0xbe>
 800469a:	681e      	ldr	r6, [r3, #0]
 800469c:	e003      	b.n	80046a6 <_printf_i+0xc6>
 800469e:	0646      	lsls	r6, r0, #25
 80046a0:	d5fb      	bpl.n	800469a <_printf_i+0xba>
 80046a2:	f9b3 6000 	ldrsh.w	r6, [r3]
 80046a6:	2e00      	cmp	r6, #0
 80046a8:	da03      	bge.n	80046b2 <_printf_i+0xd2>
 80046aa:	232d      	movs	r3, #45	; 0x2d
 80046ac:	4276      	negs	r6, r6
 80046ae:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80046b2:	485a      	ldr	r0, [pc, #360]	; (800481c <_printf_i+0x23c>)
 80046b4:	230a      	movs	r3, #10
 80046b6:	e012      	b.n	80046de <_printf_i+0xfe>
 80046b8:	682b      	ldr	r3, [r5, #0]
 80046ba:	6820      	ldr	r0, [r4, #0]
 80046bc:	1d19      	adds	r1, r3, #4
 80046be:	6029      	str	r1, [r5, #0]
 80046c0:	0605      	lsls	r5, r0, #24
 80046c2:	d501      	bpl.n	80046c8 <_printf_i+0xe8>
 80046c4:	681e      	ldr	r6, [r3, #0]
 80046c6:	e002      	b.n	80046ce <_printf_i+0xee>
 80046c8:	0641      	lsls	r1, r0, #25
 80046ca:	d5fb      	bpl.n	80046c4 <_printf_i+0xe4>
 80046cc:	881e      	ldrh	r6, [r3, #0]
 80046ce:	4853      	ldr	r0, [pc, #332]	; (800481c <_printf_i+0x23c>)
 80046d0:	2f6f      	cmp	r7, #111	; 0x6f
 80046d2:	bf0c      	ite	eq
 80046d4:	2308      	moveq	r3, #8
 80046d6:	230a      	movne	r3, #10
 80046d8:	2100      	movs	r1, #0
 80046da:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80046de:	6865      	ldr	r5, [r4, #4]
 80046e0:	60a5      	str	r5, [r4, #8]
 80046e2:	2d00      	cmp	r5, #0
 80046e4:	bfa2      	ittt	ge
 80046e6:	6821      	ldrge	r1, [r4, #0]
 80046e8:	f021 0104 	bicge.w	r1, r1, #4
 80046ec:	6021      	strge	r1, [r4, #0]
 80046ee:	b90e      	cbnz	r6, 80046f4 <_printf_i+0x114>
 80046f0:	2d00      	cmp	r5, #0
 80046f2:	d04b      	beq.n	800478c <_printf_i+0x1ac>
 80046f4:	4615      	mov	r5, r2
 80046f6:	fbb6 f1f3 	udiv	r1, r6, r3
 80046fa:	fb03 6711 	mls	r7, r3, r1, r6
 80046fe:	5dc7      	ldrb	r7, [r0, r7]
 8004700:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004704:	4637      	mov	r7, r6
 8004706:	42bb      	cmp	r3, r7
 8004708:	460e      	mov	r6, r1
 800470a:	d9f4      	bls.n	80046f6 <_printf_i+0x116>
 800470c:	2b08      	cmp	r3, #8
 800470e:	d10b      	bne.n	8004728 <_printf_i+0x148>
 8004710:	6823      	ldr	r3, [r4, #0]
 8004712:	07de      	lsls	r6, r3, #31
 8004714:	d508      	bpl.n	8004728 <_printf_i+0x148>
 8004716:	6923      	ldr	r3, [r4, #16]
 8004718:	6861      	ldr	r1, [r4, #4]
 800471a:	4299      	cmp	r1, r3
 800471c:	bfde      	ittt	le
 800471e:	2330      	movle	r3, #48	; 0x30
 8004720:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004724:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8004728:	1b52      	subs	r2, r2, r5
 800472a:	6122      	str	r2, [r4, #16]
 800472c:	f8cd a000 	str.w	sl, [sp]
 8004730:	464b      	mov	r3, r9
 8004732:	aa03      	add	r2, sp, #12
 8004734:	4621      	mov	r1, r4
 8004736:	4640      	mov	r0, r8
 8004738:	f7ff fee4 	bl	8004504 <_printf_common>
 800473c:	3001      	adds	r0, #1
 800473e:	d14a      	bne.n	80047d6 <_printf_i+0x1f6>
 8004740:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004744:	b004      	add	sp, #16
 8004746:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800474a:	6823      	ldr	r3, [r4, #0]
 800474c:	f043 0320 	orr.w	r3, r3, #32
 8004750:	6023      	str	r3, [r4, #0]
 8004752:	4833      	ldr	r0, [pc, #204]	; (8004820 <_printf_i+0x240>)
 8004754:	2778      	movs	r7, #120	; 0x78
 8004756:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800475a:	6823      	ldr	r3, [r4, #0]
 800475c:	6829      	ldr	r1, [r5, #0]
 800475e:	061f      	lsls	r7, r3, #24
 8004760:	f851 6b04 	ldr.w	r6, [r1], #4
 8004764:	d402      	bmi.n	800476c <_printf_i+0x18c>
 8004766:	065f      	lsls	r7, r3, #25
 8004768:	bf48      	it	mi
 800476a:	b2b6      	uxthmi	r6, r6
 800476c:	07df      	lsls	r7, r3, #31
 800476e:	bf48      	it	mi
 8004770:	f043 0320 	orrmi.w	r3, r3, #32
 8004774:	6029      	str	r1, [r5, #0]
 8004776:	bf48      	it	mi
 8004778:	6023      	strmi	r3, [r4, #0]
 800477a:	b91e      	cbnz	r6, 8004784 <_printf_i+0x1a4>
 800477c:	6823      	ldr	r3, [r4, #0]
 800477e:	f023 0320 	bic.w	r3, r3, #32
 8004782:	6023      	str	r3, [r4, #0]
 8004784:	2310      	movs	r3, #16
 8004786:	e7a7      	b.n	80046d8 <_printf_i+0xf8>
 8004788:	4824      	ldr	r0, [pc, #144]	; (800481c <_printf_i+0x23c>)
 800478a:	e7e4      	b.n	8004756 <_printf_i+0x176>
 800478c:	4615      	mov	r5, r2
 800478e:	e7bd      	b.n	800470c <_printf_i+0x12c>
 8004790:	682b      	ldr	r3, [r5, #0]
 8004792:	6826      	ldr	r6, [r4, #0]
 8004794:	6961      	ldr	r1, [r4, #20]
 8004796:	1d18      	adds	r0, r3, #4
 8004798:	6028      	str	r0, [r5, #0]
 800479a:	0635      	lsls	r5, r6, #24
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	d501      	bpl.n	80047a4 <_printf_i+0x1c4>
 80047a0:	6019      	str	r1, [r3, #0]
 80047a2:	e002      	b.n	80047aa <_printf_i+0x1ca>
 80047a4:	0670      	lsls	r0, r6, #25
 80047a6:	d5fb      	bpl.n	80047a0 <_printf_i+0x1c0>
 80047a8:	8019      	strh	r1, [r3, #0]
 80047aa:	2300      	movs	r3, #0
 80047ac:	6123      	str	r3, [r4, #16]
 80047ae:	4615      	mov	r5, r2
 80047b0:	e7bc      	b.n	800472c <_printf_i+0x14c>
 80047b2:	682b      	ldr	r3, [r5, #0]
 80047b4:	1d1a      	adds	r2, r3, #4
 80047b6:	602a      	str	r2, [r5, #0]
 80047b8:	681d      	ldr	r5, [r3, #0]
 80047ba:	6862      	ldr	r2, [r4, #4]
 80047bc:	2100      	movs	r1, #0
 80047be:	4628      	mov	r0, r5
 80047c0:	f7fb fd16 	bl	80001f0 <memchr>
 80047c4:	b108      	cbz	r0, 80047ca <_printf_i+0x1ea>
 80047c6:	1b40      	subs	r0, r0, r5
 80047c8:	6060      	str	r0, [r4, #4]
 80047ca:	6863      	ldr	r3, [r4, #4]
 80047cc:	6123      	str	r3, [r4, #16]
 80047ce:	2300      	movs	r3, #0
 80047d0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80047d4:	e7aa      	b.n	800472c <_printf_i+0x14c>
 80047d6:	6923      	ldr	r3, [r4, #16]
 80047d8:	462a      	mov	r2, r5
 80047da:	4649      	mov	r1, r9
 80047dc:	4640      	mov	r0, r8
 80047de:	47d0      	blx	sl
 80047e0:	3001      	adds	r0, #1
 80047e2:	d0ad      	beq.n	8004740 <_printf_i+0x160>
 80047e4:	6823      	ldr	r3, [r4, #0]
 80047e6:	079b      	lsls	r3, r3, #30
 80047e8:	d413      	bmi.n	8004812 <_printf_i+0x232>
 80047ea:	68e0      	ldr	r0, [r4, #12]
 80047ec:	9b03      	ldr	r3, [sp, #12]
 80047ee:	4298      	cmp	r0, r3
 80047f0:	bfb8      	it	lt
 80047f2:	4618      	movlt	r0, r3
 80047f4:	e7a6      	b.n	8004744 <_printf_i+0x164>
 80047f6:	2301      	movs	r3, #1
 80047f8:	4632      	mov	r2, r6
 80047fa:	4649      	mov	r1, r9
 80047fc:	4640      	mov	r0, r8
 80047fe:	47d0      	blx	sl
 8004800:	3001      	adds	r0, #1
 8004802:	d09d      	beq.n	8004740 <_printf_i+0x160>
 8004804:	3501      	adds	r5, #1
 8004806:	68e3      	ldr	r3, [r4, #12]
 8004808:	9903      	ldr	r1, [sp, #12]
 800480a:	1a5b      	subs	r3, r3, r1
 800480c:	42ab      	cmp	r3, r5
 800480e:	dcf2      	bgt.n	80047f6 <_printf_i+0x216>
 8004810:	e7eb      	b.n	80047ea <_printf_i+0x20a>
 8004812:	2500      	movs	r5, #0
 8004814:	f104 0619 	add.w	r6, r4, #25
 8004818:	e7f5      	b.n	8004806 <_printf_i+0x226>
 800481a:	bf00      	nop
 800481c:	08004f49 	.word	0x08004f49
 8004820:	08004f5a 	.word	0x08004f5a

08004824 <__sflush_r>:
 8004824:	898a      	ldrh	r2, [r1, #12]
 8004826:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800482a:	4605      	mov	r5, r0
 800482c:	0710      	lsls	r0, r2, #28
 800482e:	460c      	mov	r4, r1
 8004830:	d458      	bmi.n	80048e4 <__sflush_r+0xc0>
 8004832:	684b      	ldr	r3, [r1, #4]
 8004834:	2b00      	cmp	r3, #0
 8004836:	dc05      	bgt.n	8004844 <__sflush_r+0x20>
 8004838:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800483a:	2b00      	cmp	r3, #0
 800483c:	dc02      	bgt.n	8004844 <__sflush_r+0x20>
 800483e:	2000      	movs	r0, #0
 8004840:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004844:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004846:	2e00      	cmp	r6, #0
 8004848:	d0f9      	beq.n	800483e <__sflush_r+0x1a>
 800484a:	2300      	movs	r3, #0
 800484c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004850:	682f      	ldr	r7, [r5, #0]
 8004852:	6a21      	ldr	r1, [r4, #32]
 8004854:	602b      	str	r3, [r5, #0]
 8004856:	d032      	beq.n	80048be <__sflush_r+0x9a>
 8004858:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800485a:	89a3      	ldrh	r3, [r4, #12]
 800485c:	075a      	lsls	r2, r3, #29
 800485e:	d505      	bpl.n	800486c <__sflush_r+0x48>
 8004860:	6863      	ldr	r3, [r4, #4]
 8004862:	1ac0      	subs	r0, r0, r3
 8004864:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004866:	b10b      	cbz	r3, 800486c <__sflush_r+0x48>
 8004868:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800486a:	1ac0      	subs	r0, r0, r3
 800486c:	2300      	movs	r3, #0
 800486e:	4602      	mov	r2, r0
 8004870:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004872:	6a21      	ldr	r1, [r4, #32]
 8004874:	4628      	mov	r0, r5
 8004876:	47b0      	blx	r6
 8004878:	1c43      	adds	r3, r0, #1
 800487a:	89a3      	ldrh	r3, [r4, #12]
 800487c:	d106      	bne.n	800488c <__sflush_r+0x68>
 800487e:	6829      	ldr	r1, [r5, #0]
 8004880:	291d      	cmp	r1, #29
 8004882:	d82b      	bhi.n	80048dc <__sflush_r+0xb8>
 8004884:	4a29      	ldr	r2, [pc, #164]	; (800492c <__sflush_r+0x108>)
 8004886:	410a      	asrs	r2, r1
 8004888:	07d6      	lsls	r6, r2, #31
 800488a:	d427      	bmi.n	80048dc <__sflush_r+0xb8>
 800488c:	2200      	movs	r2, #0
 800488e:	6062      	str	r2, [r4, #4]
 8004890:	04d9      	lsls	r1, r3, #19
 8004892:	6922      	ldr	r2, [r4, #16]
 8004894:	6022      	str	r2, [r4, #0]
 8004896:	d504      	bpl.n	80048a2 <__sflush_r+0x7e>
 8004898:	1c42      	adds	r2, r0, #1
 800489a:	d101      	bne.n	80048a0 <__sflush_r+0x7c>
 800489c:	682b      	ldr	r3, [r5, #0]
 800489e:	b903      	cbnz	r3, 80048a2 <__sflush_r+0x7e>
 80048a0:	6560      	str	r0, [r4, #84]	; 0x54
 80048a2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80048a4:	602f      	str	r7, [r5, #0]
 80048a6:	2900      	cmp	r1, #0
 80048a8:	d0c9      	beq.n	800483e <__sflush_r+0x1a>
 80048aa:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80048ae:	4299      	cmp	r1, r3
 80048b0:	d002      	beq.n	80048b8 <__sflush_r+0x94>
 80048b2:	4628      	mov	r0, r5
 80048b4:	f000 fa7a 	bl	8004dac <_free_r>
 80048b8:	2000      	movs	r0, #0
 80048ba:	6360      	str	r0, [r4, #52]	; 0x34
 80048bc:	e7c0      	b.n	8004840 <__sflush_r+0x1c>
 80048be:	2301      	movs	r3, #1
 80048c0:	4628      	mov	r0, r5
 80048c2:	47b0      	blx	r6
 80048c4:	1c41      	adds	r1, r0, #1
 80048c6:	d1c8      	bne.n	800485a <__sflush_r+0x36>
 80048c8:	682b      	ldr	r3, [r5, #0]
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d0c5      	beq.n	800485a <__sflush_r+0x36>
 80048ce:	2b1d      	cmp	r3, #29
 80048d0:	d001      	beq.n	80048d6 <__sflush_r+0xb2>
 80048d2:	2b16      	cmp	r3, #22
 80048d4:	d101      	bne.n	80048da <__sflush_r+0xb6>
 80048d6:	602f      	str	r7, [r5, #0]
 80048d8:	e7b1      	b.n	800483e <__sflush_r+0x1a>
 80048da:	89a3      	ldrh	r3, [r4, #12]
 80048dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80048e0:	81a3      	strh	r3, [r4, #12]
 80048e2:	e7ad      	b.n	8004840 <__sflush_r+0x1c>
 80048e4:	690f      	ldr	r7, [r1, #16]
 80048e6:	2f00      	cmp	r7, #0
 80048e8:	d0a9      	beq.n	800483e <__sflush_r+0x1a>
 80048ea:	0793      	lsls	r3, r2, #30
 80048ec:	680e      	ldr	r6, [r1, #0]
 80048ee:	bf08      	it	eq
 80048f0:	694b      	ldreq	r3, [r1, #20]
 80048f2:	600f      	str	r7, [r1, #0]
 80048f4:	bf18      	it	ne
 80048f6:	2300      	movne	r3, #0
 80048f8:	eba6 0807 	sub.w	r8, r6, r7
 80048fc:	608b      	str	r3, [r1, #8]
 80048fe:	f1b8 0f00 	cmp.w	r8, #0
 8004902:	dd9c      	ble.n	800483e <__sflush_r+0x1a>
 8004904:	6a21      	ldr	r1, [r4, #32]
 8004906:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004908:	4643      	mov	r3, r8
 800490a:	463a      	mov	r2, r7
 800490c:	4628      	mov	r0, r5
 800490e:	47b0      	blx	r6
 8004910:	2800      	cmp	r0, #0
 8004912:	dc06      	bgt.n	8004922 <__sflush_r+0xfe>
 8004914:	89a3      	ldrh	r3, [r4, #12]
 8004916:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800491a:	81a3      	strh	r3, [r4, #12]
 800491c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004920:	e78e      	b.n	8004840 <__sflush_r+0x1c>
 8004922:	4407      	add	r7, r0
 8004924:	eba8 0800 	sub.w	r8, r8, r0
 8004928:	e7e9      	b.n	80048fe <__sflush_r+0xda>
 800492a:	bf00      	nop
 800492c:	dfbffffe 	.word	0xdfbffffe

08004930 <_fflush_r>:
 8004930:	b538      	push	{r3, r4, r5, lr}
 8004932:	690b      	ldr	r3, [r1, #16]
 8004934:	4605      	mov	r5, r0
 8004936:	460c      	mov	r4, r1
 8004938:	b913      	cbnz	r3, 8004940 <_fflush_r+0x10>
 800493a:	2500      	movs	r5, #0
 800493c:	4628      	mov	r0, r5
 800493e:	bd38      	pop	{r3, r4, r5, pc}
 8004940:	b118      	cbz	r0, 800494a <_fflush_r+0x1a>
 8004942:	6a03      	ldr	r3, [r0, #32]
 8004944:	b90b      	cbnz	r3, 800494a <_fflush_r+0x1a>
 8004946:	f7ff fb1d 	bl	8003f84 <__sinit>
 800494a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800494e:	2b00      	cmp	r3, #0
 8004950:	d0f3      	beq.n	800493a <_fflush_r+0xa>
 8004952:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004954:	07d0      	lsls	r0, r2, #31
 8004956:	d404      	bmi.n	8004962 <_fflush_r+0x32>
 8004958:	0599      	lsls	r1, r3, #22
 800495a:	d402      	bmi.n	8004962 <_fflush_r+0x32>
 800495c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800495e:	f7ff fbd6 	bl	800410e <__retarget_lock_acquire_recursive>
 8004962:	4628      	mov	r0, r5
 8004964:	4621      	mov	r1, r4
 8004966:	f7ff ff5d 	bl	8004824 <__sflush_r>
 800496a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800496c:	07da      	lsls	r2, r3, #31
 800496e:	4605      	mov	r5, r0
 8004970:	d4e4      	bmi.n	800493c <_fflush_r+0xc>
 8004972:	89a3      	ldrh	r3, [r4, #12]
 8004974:	059b      	lsls	r3, r3, #22
 8004976:	d4e1      	bmi.n	800493c <_fflush_r+0xc>
 8004978:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800497a:	f7ff fbc9 	bl	8004110 <__retarget_lock_release_recursive>
 800497e:	e7dd      	b.n	800493c <_fflush_r+0xc>

08004980 <__malloc_lock>:
 8004980:	4801      	ldr	r0, [pc, #4]	; (8004988 <__malloc_lock+0x8>)
 8004982:	f7ff bbc4 	b.w	800410e <__retarget_lock_acquire_recursive>
 8004986:	bf00      	nop
 8004988:	20000308 	.word	0x20000308

0800498c <__malloc_unlock>:
 800498c:	4801      	ldr	r0, [pc, #4]	; (8004994 <__malloc_unlock+0x8>)
 800498e:	f7ff bbbf 	b.w	8004110 <__retarget_lock_release_recursive>
 8004992:	bf00      	nop
 8004994:	20000308 	.word	0x20000308

08004998 <__sread>:
 8004998:	b510      	push	{r4, lr}
 800499a:	460c      	mov	r4, r1
 800499c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80049a0:	f000 f9c2 	bl	8004d28 <_read_r>
 80049a4:	2800      	cmp	r0, #0
 80049a6:	bfab      	itete	ge
 80049a8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80049aa:	89a3      	ldrhlt	r3, [r4, #12]
 80049ac:	181b      	addge	r3, r3, r0
 80049ae:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80049b2:	bfac      	ite	ge
 80049b4:	6563      	strge	r3, [r4, #84]	; 0x54
 80049b6:	81a3      	strhlt	r3, [r4, #12]
 80049b8:	bd10      	pop	{r4, pc}

080049ba <__swrite>:
 80049ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80049be:	461f      	mov	r7, r3
 80049c0:	898b      	ldrh	r3, [r1, #12]
 80049c2:	05db      	lsls	r3, r3, #23
 80049c4:	4605      	mov	r5, r0
 80049c6:	460c      	mov	r4, r1
 80049c8:	4616      	mov	r6, r2
 80049ca:	d505      	bpl.n	80049d8 <__swrite+0x1e>
 80049cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80049d0:	2302      	movs	r3, #2
 80049d2:	2200      	movs	r2, #0
 80049d4:	f000 f996 	bl	8004d04 <_lseek_r>
 80049d8:	89a3      	ldrh	r3, [r4, #12]
 80049da:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80049de:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80049e2:	81a3      	strh	r3, [r4, #12]
 80049e4:	4632      	mov	r2, r6
 80049e6:	463b      	mov	r3, r7
 80049e8:	4628      	mov	r0, r5
 80049ea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80049ee:	f000 b9bd 	b.w	8004d6c <_write_r>

080049f2 <__sseek>:
 80049f2:	b510      	push	{r4, lr}
 80049f4:	460c      	mov	r4, r1
 80049f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80049fa:	f000 f983 	bl	8004d04 <_lseek_r>
 80049fe:	1c43      	adds	r3, r0, #1
 8004a00:	89a3      	ldrh	r3, [r4, #12]
 8004a02:	bf15      	itete	ne
 8004a04:	6560      	strne	r0, [r4, #84]	; 0x54
 8004a06:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004a0a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004a0e:	81a3      	strheq	r3, [r4, #12]
 8004a10:	bf18      	it	ne
 8004a12:	81a3      	strhne	r3, [r4, #12]
 8004a14:	bd10      	pop	{r4, pc}

08004a16 <__sclose>:
 8004a16:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004a1a:	f000 b941 	b.w	8004ca0 <_close_r>

08004a1e <_realloc_r>:
 8004a1e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004a22:	4680      	mov	r8, r0
 8004a24:	4614      	mov	r4, r2
 8004a26:	460e      	mov	r6, r1
 8004a28:	b921      	cbnz	r1, 8004a34 <_realloc_r+0x16>
 8004a2a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004a2e:	4611      	mov	r1, r2
 8004a30:	f7ff bce8 	b.w	8004404 <_malloc_r>
 8004a34:	b92a      	cbnz	r2, 8004a42 <_realloc_r+0x24>
 8004a36:	f000 f9b9 	bl	8004dac <_free_r>
 8004a3a:	4625      	mov	r5, r4
 8004a3c:	4628      	mov	r0, r5
 8004a3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004a42:	f000 f9ff 	bl	8004e44 <_malloc_usable_size_r>
 8004a46:	4284      	cmp	r4, r0
 8004a48:	4607      	mov	r7, r0
 8004a4a:	d802      	bhi.n	8004a52 <_realloc_r+0x34>
 8004a4c:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8004a50:	d812      	bhi.n	8004a78 <_realloc_r+0x5a>
 8004a52:	4621      	mov	r1, r4
 8004a54:	4640      	mov	r0, r8
 8004a56:	f7ff fcd5 	bl	8004404 <_malloc_r>
 8004a5a:	4605      	mov	r5, r0
 8004a5c:	2800      	cmp	r0, #0
 8004a5e:	d0ed      	beq.n	8004a3c <_realloc_r+0x1e>
 8004a60:	42bc      	cmp	r4, r7
 8004a62:	4622      	mov	r2, r4
 8004a64:	4631      	mov	r1, r6
 8004a66:	bf28      	it	cs
 8004a68:	463a      	movcs	r2, r7
 8004a6a:	f000 f991 	bl	8004d90 <memcpy>
 8004a6e:	4631      	mov	r1, r6
 8004a70:	4640      	mov	r0, r8
 8004a72:	f000 f99b 	bl	8004dac <_free_r>
 8004a76:	e7e1      	b.n	8004a3c <_realloc_r+0x1e>
 8004a78:	4635      	mov	r5, r6
 8004a7a:	e7df      	b.n	8004a3c <_realloc_r+0x1e>

08004a7c <__swbuf_r>:
 8004a7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a7e:	460e      	mov	r6, r1
 8004a80:	4614      	mov	r4, r2
 8004a82:	4605      	mov	r5, r0
 8004a84:	b118      	cbz	r0, 8004a8e <__swbuf_r+0x12>
 8004a86:	6a03      	ldr	r3, [r0, #32]
 8004a88:	b90b      	cbnz	r3, 8004a8e <__swbuf_r+0x12>
 8004a8a:	f7ff fa7b 	bl	8003f84 <__sinit>
 8004a8e:	69a3      	ldr	r3, [r4, #24]
 8004a90:	60a3      	str	r3, [r4, #8]
 8004a92:	89a3      	ldrh	r3, [r4, #12]
 8004a94:	071a      	lsls	r2, r3, #28
 8004a96:	d525      	bpl.n	8004ae4 <__swbuf_r+0x68>
 8004a98:	6923      	ldr	r3, [r4, #16]
 8004a9a:	b31b      	cbz	r3, 8004ae4 <__swbuf_r+0x68>
 8004a9c:	6823      	ldr	r3, [r4, #0]
 8004a9e:	6922      	ldr	r2, [r4, #16]
 8004aa0:	1a98      	subs	r0, r3, r2
 8004aa2:	6963      	ldr	r3, [r4, #20]
 8004aa4:	b2f6      	uxtb	r6, r6
 8004aa6:	4283      	cmp	r3, r0
 8004aa8:	4637      	mov	r7, r6
 8004aaa:	dc04      	bgt.n	8004ab6 <__swbuf_r+0x3a>
 8004aac:	4621      	mov	r1, r4
 8004aae:	4628      	mov	r0, r5
 8004ab0:	f7ff ff3e 	bl	8004930 <_fflush_r>
 8004ab4:	b9e0      	cbnz	r0, 8004af0 <__swbuf_r+0x74>
 8004ab6:	68a3      	ldr	r3, [r4, #8]
 8004ab8:	3b01      	subs	r3, #1
 8004aba:	60a3      	str	r3, [r4, #8]
 8004abc:	6823      	ldr	r3, [r4, #0]
 8004abe:	1c5a      	adds	r2, r3, #1
 8004ac0:	6022      	str	r2, [r4, #0]
 8004ac2:	701e      	strb	r6, [r3, #0]
 8004ac4:	6962      	ldr	r2, [r4, #20]
 8004ac6:	1c43      	adds	r3, r0, #1
 8004ac8:	429a      	cmp	r2, r3
 8004aca:	d004      	beq.n	8004ad6 <__swbuf_r+0x5a>
 8004acc:	89a3      	ldrh	r3, [r4, #12]
 8004ace:	07db      	lsls	r3, r3, #31
 8004ad0:	d506      	bpl.n	8004ae0 <__swbuf_r+0x64>
 8004ad2:	2e0a      	cmp	r6, #10
 8004ad4:	d104      	bne.n	8004ae0 <__swbuf_r+0x64>
 8004ad6:	4621      	mov	r1, r4
 8004ad8:	4628      	mov	r0, r5
 8004ada:	f7ff ff29 	bl	8004930 <_fflush_r>
 8004ade:	b938      	cbnz	r0, 8004af0 <__swbuf_r+0x74>
 8004ae0:	4638      	mov	r0, r7
 8004ae2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004ae4:	4621      	mov	r1, r4
 8004ae6:	4628      	mov	r0, r5
 8004ae8:	f000 f806 	bl	8004af8 <__swsetup_r>
 8004aec:	2800      	cmp	r0, #0
 8004aee:	d0d5      	beq.n	8004a9c <__swbuf_r+0x20>
 8004af0:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8004af4:	e7f4      	b.n	8004ae0 <__swbuf_r+0x64>
	...

08004af8 <__swsetup_r>:
 8004af8:	b538      	push	{r3, r4, r5, lr}
 8004afa:	4b2a      	ldr	r3, [pc, #168]	; (8004ba4 <__swsetup_r+0xac>)
 8004afc:	4605      	mov	r5, r0
 8004afe:	6818      	ldr	r0, [r3, #0]
 8004b00:	460c      	mov	r4, r1
 8004b02:	b118      	cbz	r0, 8004b0c <__swsetup_r+0x14>
 8004b04:	6a03      	ldr	r3, [r0, #32]
 8004b06:	b90b      	cbnz	r3, 8004b0c <__swsetup_r+0x14>
 8004b08:	f7ff fa3c 	bl	8003f84 <__sinit>
 8004b0c:	89a3      	ldrh	r3, [r4, #12]
 8004b0e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004b12:	0718      	lsls	r0, r3, #28
 8004b14:	d422      	bmi.n	8004b5c <__swsetup_r+0x64>
 8004b16:	06d9      	lsls	r1, r3, #27
 8004b18:	d407      	bmi.n	8004b2a <__swsetup_r+0x32>
 8004b1a:	2309      	movs	r3, #9
 8004b1c:	602b      	str	r3, [r5, #0]
 8004b1e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004b22:	81a3      	strh	r3, [r4, #12]
 8004b24:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004b28:	e034      	b.n	8004b94 <__swsetup_r+0x9c>
 8004b2a:	0758      	lsls	r0, r3, #29
 8004b2c:	d512      	bpl.n	8004b54 <__swsetup_r+0x5c>
 8004b2e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004b30:	b141      	cbz	r1, 8004b44 <__swsetup_r+0x4c>
 8004b32:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004b36:	4299      	cmp	r1, r3
 8004b38:	d002      	beq.n	8004b40 <__swsetup_r+0x48>
 8004b3a:	4628      	mov	r0, r5
 8004b3c:	f000 f936 	bl	8004dac <_free_r>
 8004b40:	2300      	movs	r3, #0
 8004b42:	6363      	str	r3, [r4, #52]	; 0x34
 8004b44:	89a3      	ldrh	r3, [r4, #12]
 8004b46:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004b4a:	81a3      	strh	r3, [r4, #12]
 8004b4c:	2300      	movs	r3, #0
 8004b4e:	6063      	str	r3, [r4, #4]
 8004b50:	6923      	ldr	r3, [r4, #16]
 8004b52:	6023      	str	r3, [r4, #0]
 8004b54:	89a3      	ldrh	r3, [r4, #12]
 8004b56:	f043 0308 	orr.w	r3, r3, #8
 8004b5a:	81a3      	strh	r3, [r4, #12]
 8004b5c:	6923      	ldr	r3, [r4, #16]
 8004b5e:	b94b      	cbnz	r3, 8004b74 <__swsetup_r+0x7c>
 8004b60:	89a3      	ldrh	r3, [r4, #12]
 8004b62:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004b66:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004b6a:	d003      	beq.n	8004b74 <__swsetup_r+0x7c>
 8004b6c:	4621      	mov	r1, r4
 8004b6e:	4628      	mov	r0, r5
 8004b70:	f000 f840 	bl	8004bf4 <__smakebuf_r>
 8004b74:	89a0      	ldrh	r0, [r4, #12]
 8004b76:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004b7a:	f010 0301 	ands.w	r3, r0, #1
 8004b7e:	d00a      	beq.n	8004b96 <__swsetup_r+0x9e>
 8004b80:	2300      	movs	r3, #0
 8004b82:	60a3      	str	r3, [r4, #8]
 8004b84:	6963      	ldr	r3, [r4, #20]
 8004b86:	425b      	negs	r3, r3
 8004b88:	61a3      	str	r3, [r4, #24]
 8004b8a:	6923      	ldr	r3, [r4, #16]
 8004b8c:	b943      	cbnz	r3, 8004ba0 <__swsetup_r+0xa8>
 8004b8e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004b92:	d1c4      	bne.n	8004b1e <__swsetup_r+0x26>
 8004b94:	bd38      	pop	{r3, r4, r5, pc}
 8004b96:	0781      	lsls	r1, r0, #30
 8004b98:	bf58      	it	pl
 8004b9a:	6963      	ldrpl	r3, [r4, #20]
 8004b9c:	60a3      	str	r3, [r4, #8]
 8004b9e:	e7f4      	b.n	8004b8a <__swsetup_r+0x92>
 8004ba0:	2000      	movs	r0, #0
 8004ba2:	e7f7      	b.n	8004b94 <__swsetup_r+0x9c>
 8004ba4:	20000098 	.word	0x20000098

08004ba8 <__swhatbuf_r>:
 8004ba8:	b570      	push	{r4, r5, r6, lr}
 8004baa:	460c      	mov	r4, r1
 8004bac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004bb0:	2900      	cmp	r1, #0
 8004bb2:	b096      	sub	sp, #88	; 0x58
 8004bb4:	4615      	mov	r5, r2
 8004bb6:	461e      	mov	r6, r3
 8004bb8:	da0d      	bge.n	8004bd6 <__swhatbuf_r+0x2e>
 8004bba:	89a3      	ldrh	r3, [r4, #12]
 8004bbc:	f013 0f80 	tst.w	r3, #128	; 0x80
 8004bc0:	f04f 0100 	mov.w	r1, #0
 8004bc4:	bf0c      	ite	eq
 8004bc6:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8004bca:	2340      	movne	r3, #64	; 0x40
 8004bcc:	2000      	movs	r0, #0
 8004bce:	6031      	str	r1, [r6, #0]
 8004bd0:	602b      	str	r3, [r5, #0]
 8004bd2:	b016      	add	sp, #88	; 0x58
 8004bd4:	bd70      	pop	{r4, r5, r6, pc}
 8004bd6:	466a      	mov	r2, sp
 8004bd8:	f000 f872 	bl	8004cc0 <_fstat_r>
 8004bdc:	2800      	cmp	r0, #0
 8004bde:	dbec      	blt.n	8004bba <__swhatbuf_r+0x12>
 8004be0:	9901      	ldr	r1, [sp, #4]
 8004be2:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8004be6:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8004bea:	4259      	negs	r1, r3
 8004bec:	4159      	adcs	r1, r3
 8004bee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004bf2:	e7eb      	b.n	8004bcc <__swhatbuf_r+0x24>

08004bf4 <__smakebuf_r>:
 8004bf4:	898b      	ldrh	r3, [r1, #12]
 8004bf6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004bf8:	079d      	lsls	r5, r3, #30
 8004bfa:	4606      	mov	r6, r0
 8004bfc:	460c      	mov	r4, r1
 8004bfe:	d507      	bpl.n	8004c10 <__smakebuf_r+0x1c>
 8004c00:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004c04:	6023      	str	r3, [r4, #0]
 8004c06:	6123      	str	r3, [r4, #16]
 8004c08:	2301      	movs	r3, #1
 8004c0a:	6163      	str	r3, [r4, #20]
 8004c0c:	b002      	add	sp, #8
 8004c0e:	bd70      	pop	{r4, r5, r6, pc}
 8004c10:	ab01      	add	r3, sp, #4
 8004c12:	466a      	mov	r2, sp
 8004c14:	f7ff ffc8 	bl	8004ba8 <__swhatbuf_r>
 8004c18:	9900      	ldr	r1, [sp, #0]
 8004c1a:	4605      	mov	r5, r0
 8004c1c:	4630      	mov	r0, r6
 8004c1e:	f7ff fbf1 	bl	8004404 <_malloc_r>
 8004c22:	b948      	cbnz	r0, 8004c38 <__smakebuf_r+0x44>
 8004c24:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004c28:	059a      	lsls	r2, r3, #22
 8004c2a:	d4ef      	bmi.n	8004c0c <__smakebuf_r+0x18>
 8004c2c:	f023 0303 	bic.w	r3, r3, #3
 8004c30:	f043 0302 	orr.w	r3, r3, #2
 8004c34:	81a3      	strh	r3, [r4, #12]
 8004c36:	e7e3      	b.n	8004c00 <__smakebuf_r+0xc>
 8004c38:	89a3      	ldrh	r3, [r4, #12]
 8004c3a:	6020      	str	r0, [r4, #0]
 8004c3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c40:	81a3      	strh	r3, [r4, #12]
 8004c42:	9b00      	ldr	r3, [sp, #0]
 8004c44:	6163      	str	r3, [r4, #20]
 8004c46:	9b01      	ldr	r3, [sp, #4]
 8004c48:	6120      	str	r0, [r4, #16]
 8004c4a:	b15b      	cbz	r3, 8004c64 <__smakebuf_r+0x70>
 8004c4c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004c50:	4630      	mov	r0, r6
 8004c52:	f000 f847 	bl	8004ce4 <_isatty_r>
 8004c56:	b128      	cbz	r0, 8004c64 <__smakebuf_r+0x70>
 8004c58:	89a3      	ldrh	r3, [r4, #12]
 8004c5a:	f023 0303 	bic.w	r3, r3, #3
 8004c5e:	f043 0301 	orr.w	r3, r3, #1
 8004c62:	81a3      	strh	r3, [r4, #12]
 8004c64:	89a3      	ldrh	r3, [r4, #12]
 8004c66:	431d      	orrs	r5, r3
 8004c68:	81a5      	strh	r5, [r4, #12]
 8004c6a:	e7cf      	b.n	8004c0c <__smakebuf_r+0x18>

08004c6c <memmove>:
 8004c6c:	4288      	cmp	r0, r1
 8004c6e:	b510      	push	{r4, lr}
 8004c70:	eb01 0402 	add.w	r4, r1, r2
 8004c74:	d902      	bls.n	8004c7c <memmove+0x10>
 8004c76:	4284      	cmp	r4, r0
 8004c78:	4623      	mov	r3, r4
 8004c7a:	d807      	bhi.n	8004c8c <memmove+0x20>
 8004c7c:	1e43      	subs	r3, r0, #1
 8004c7e:	42a1      	cmp	r1, r4
 8004c80:	d008      	beq.n	8004c94 <memmove+0x28>
 8004c82:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004c86:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004c8a:	e7f8      	b.n	8004c7e <memmove+0x12>
 8004c8c:	4402      	add	r2, r0
 8004c8e:	4601      	mov	r1, r0
 8004c90:	428a      	cmp	r2, r1
 8004c92:	d100      	bne.n	8004c96 <memmove+0x2a>
 8004c94:	bd10      	pop	{r4, pc}
 8004c96:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004c9a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004c9e:	e7f7      	b.n	8004c90 <memmove+0x24>

08004ca0 <_close_r>:
 8004ca0:	b538      	push	{r3, r4, r5, lr}
 8004ca2:	4d06      	ldr	r5, [pc, #24]	; (8004cbc <_close_r+0x1c>)
 8004ca4:	2300      	movs	r3, #0
 8004ca6:	4604      	mov	r4, r0
 8004ca8:	4608      	mov	r0, r1
 8004caa:	602b      	str	r3, [r5, #0]
 8004cac:	f7fc fba7 	bl	80013fe <_close>
 8004cb0:	1c43      	adds	r3, r0, #1
 8004cb2:	d102      	bne.n	8004cba <_close_r+0x1a>
 8004cb4:	682b      	ldr	r3, [r5, #0]
 8004cb6:	b103      	cbz	r3, 8004cba <_close_r+0x1a>
 8004cb8:	6023      	str	r3, [r4, #0]
 8004cba:	bd38      	pop	{r3, r4, r5, pc}
 8004cbc:	20000314 	.word	0x20000314

08004cc0 <_fstat_r>:
 8004cc0:	b538      	push	{r3, r4, r5, lr}
 8004cc2:	4d07      	ldr	r5, [pc, #28]	; (8004ce0 <_fstat_r+0x20>)
 8004cc4:	2300      	movs	r3, #0
 8004cc6:	4604      	mov	r4, r0
 8004cc8:	4608      	mov	r0, r1
 8004cca:	4611      	mov	r1, r2
 8004ccc:	602b      	str	r3, [r5, #0]
 8004cce:	f7fc fba2 	bl	8001416 <_fstat>
 8004cd2:	1c43      	adds	r3, r0, #1
 8004cd4:	d102      	bne.n	8004cdc <_fstat_r+0x1c>
 8004cd6:	682b      	ldr	r3, [r5, #0]
 8004cd8:	b103      	cbz	r3, 8004cdc <_fstat_r+0x1c>
 8004cda:	6023      	str	r3, [r4, #0]
 8004cdc:	bd38      	pop	{r3, r4, r5, pc}
 8004cde:	bf00      	nop
 8004ce0:	20000314 	.word	0x20000314

08004ce4 <_isatty_r>:
 8004ce4:	b538      	push	{r3, r4, r5, lr}
 8004ce6:	4d06      	ldr	r5, [pc, #24]	; (8004d00 <_isatty_r+0x1c>)
 8004ce8:	2300      	movs	r3, #0
 8004cea:	4604      	mov	r4, r0
 8004cec:	4608      	mov	r0, r1
 8004cee:	602b      	str	r3, [r5, #0]
 8004cf0:	f7fc fba1 	bl	8001436 <_isatty>
 8004cf4:	1c43      	adds	r3, r0, #1
 8004cf6:	d102      	bne.n	8004cfe <_isatty_r+0x1a>
 8004cf8:	682b      	ldr	r3, [r5, #0]
 8004cfa:	b103      	cbz	r3, 8004cfe <_isatty_r+0x1a>
 8004cfc:	6023      	str	r3, [r4, #0]
 8004cfe:	bd38      	pop	{r3, r4, r5, pc}
 8004d00:	20000314 	.word	0x20000314

08004d04 <_lseek_r>:
 8004d04:	b538      	push	{r3, r4, r5, lr}
 8004d06:	4d07      	ldr	r5, [pc, #28]	; (8004d24 <_lseek_r+0x20>)
 8004d08:	4604      	mov	r4, r0
 8004d0a:	4608      	mov	r0, r1
 8004d0c:	4611      	mov	r1, r2
 8004d0e:	2200      	movs	r2, #0
 8004d10:	602a      	str	r2, [r5, #0]
 8004d12:	461a      	mov	r2, r3
 8004d14:	f7fc fb9a 	bl	800144c <_lseek>
 8004d18:	1c43      	adds	r3, r0, #1
 8004d1a:	d102      	bne.n	8004d22 <_lseek_r+0x1e>
 8004d1c:	682b      	ldr	r3, [r5, #0]
 8004d1e:	b103      	cbz	r3, 8004d22 <_lseek_r+0x1e>
 8004d20:	6023      	str	r3, [r4, #0]
 8004d22:	bd38      	pop	{r3, r4, r5, pc}
 8004d24:	20000314 	.word	0x20000314

08004d28 <_read_r>:
 8004d28:	b538      	push	{r3, r4, r5, lr}
 8004d2a:	4d07      	ldr	r5, [pc, #28]	; (8004d48 <_read_r+0x20>)
 8004d2c:	4604      	mov	r4, r0
 8004d2e:	4608      	mov	r0, r1
 8004d30:	4611      	mov	r1, r2
 8004d32:	2200      	movs	r2, #0
 8004d34:	602a      	str	r2, [r5, #0]
 8004d36:	461a      	mov	r2, r3
 8004d38:	f7fc fb28 	bl	800138c <_read>
 8004d3c:	1c43      	adds	r3, r0, #1
 8004d3e:	d102      	bne.n	8004d46 <_read_r+0x1e>
 8004d40:	682b      	ldr	r3, [r5, #0]
 8004d42:	b103      	cbz	r3, 8004d46 <_read_r+0x1e>
 8004d44:	6023      	str	r3, [r4, #0]
 8004d46:	bd38      	pop	{r3, r4, r5, pc}
 8004d48:	20000314 	.word	0x20000314

08004d4c <_sbrk_r>:
 8004d4c:	b538      	push	{r3, r4, r5, lr}
 8004d4e:	4d06      	ldr	r5, [pc, #24]	; (8004d68 <_sbrk_r+0x1c>)
 8004d50:	2300      	movs	r3, #0
 8004d52:	4604      	mov	r4, r0
 8004d54:	4608      	mov	r0, r1
 8004d56:	602b      	str	r3, [r5, #0]
 8004d58:	f7fc fb86 	bl	8001468 <_sbrk>
 8004d5c:	1c43      	adds	r3, r0, #1
 8004d5e:	d102      	bne.n	8004d66 <_sbrk_r+0x1a>
 8004d60:	682b      	ldr	r3, [r5, #0]
 8004d62:	b103      	cbz	r3, 8004d66 <_sbrk_r+0x1a>
 8004d64:	6023      	str	r3, [r4, #0]
 8004d66:	bd38      	pop	{r3, r4, r5, pc}
 8004d68:	20000314 	.word	0x20000314

08004d6c <_write_r>:
 8004d6c:	b538      	push	{r3, r4, r5, lr}
 8004d6e:	4d07      	ldr	r5, [pc, #28]	; (8004d8c <_write_r+0x20>)
 8004d70:	4604      	mov	r4, r0
 8004d72:	4608      	mov	r0, r1
 8004d74:	4611      	mov	r1, r2
 8004d76:	2200      	movs	r2, #0
 8004d78:	602a      	str	r2, [r5, #0]
 8004d7a:	461a      	mov	r2, r3
 8004d7c:	f7fc fb23 	bl	80013c6 <_write>
 8004d80:	1c43      	adds	r3, r0, #1
 8004d82:	d102      	bne.n	8004d8a <_write_r+0x1e>
 8004d84:	682b      	ldr	r3, [r5, #0]
 8004d86:	b103      	cbz	r3, 8004d8a <_write_r+0x1e>
 8004d88:	6023      	str	r3, [r4, #0]
 8004d8a:	bd38      	pop	{r3, r4, r5, pc}
 8004d8c:	20000314 	.word	0x20000314

08004d90 <memcpy>:
 8004d90:	440a      	add	r2, r1
 8004d92:	4291      	cmp	r1, r2
 8004d94:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8004d98:	d100      	bne.n	8004d9c <memcpy+0xc>
 8004d9a:	4770      	bx	lr
 8004d9c:	b510      	push	{r4, lr}
 8004d9e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004da2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004da6:	4291      	cmp	r1, r2
 8004da8:	d1f9      	bne.n	8004d9e <memcpy+0xe>
 8004daa:	bd10      	pop	{r4, pc}

08004dac <_free_r>:
 8004dac:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004dae:	2900      	cmp	r1, #0
 8004db0:	d044      	beq.n	8004e3c <_free_r+0x90>
 8004db2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004db6:	9001      	str	r0, [sp, #4]
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	f1a1 0404 	sub.w	r4, r1, #4
 8004dbe:	bfb8      	it	lt
 8004dc0:	18e4      	addlt	r4, r4, r3
 8004dc2:	f7ff fddd 	bl	8004980 <__malloc_lock>
 8004dc6:	4a1e      	ldr	r2, [pc, #120]	; (8004e40 <_free_r+0x94>)
 8004dc8:	9801      	ldr	r0, [sp, #4]
 8004dca:	6813      	ldr	r3, [r2, #0]
 8004dcc:	b933      	cbnz	r3, 8004ddc <_free_r+0x30>
 8004dce:	6063      	str	r3, [r4, #4]
 8004dd0:	6014      	str	r4, [r2, #0]
 8004dd2:	b003      	add	sp, #12
 8004dd4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004dd8:	f7ff bdd8 	b.w	800498c <__malloc_unlock>
 8004ddc:	42a3      	cmp	r3, r4
 8004dde:	d908      	bls.n	8004df2 <_free_r+0x46>
 8004de0:	6825      	ldr	r5, [r4, #0]
 8004de2:	1961      	adds	r1, r4, r5
 8004de4:	428b      	cmp	r3, r1
 8004de6:	bf01      	itttt	eq
 8004de8:	6819      	ldreq	r1, [r3, #0]
 8004dea:	685b      	ldreq	r3, [r3, #4]
 8004dec:	1949      	addeq	r1, r1, r5
 8004dee:	6021      	streq	r1, [r4, #0]
 8004df0:	e7ed      	b.n	8004dce <_free_r+0x22>
 8004df2:	461a      	mov	r2, r3
 8004df4:	685b      	ldr	r3, [r3, #4]
 8004df6:	b10b      	cbz	r3, 8004dfc <_free_r+0x50>
 8004df8:	42a3      	cmp	r3, r4
 8004dfa:	d9fa      	bls.n	8004df2 <_free_r+0x46>
 8004dfc:	6811      	ldr	r1, [r2, #0]
 8004dfe:	1855      	adds	r5, r2, r1
 8004e00:	42a5      	cmp	r5, r4
 8004e02:	d10b      	bne.n	8004e1c <_free_r+0x70>
 8004e04:	6824      	ldr	r4, [r4, #0]
 8004e06:	4421      	add	r1, r4
 8004e08:	1854      	adds	r4, r2, r1
 8004e0a:	42a3      	cmp	r3, r4
 8004e0c:	6011      	str	r1, [r2, #0]
 8004e0e:	d1e0      	bne.n	8004dd2 <_free_r+0x26>
 8004e10:	681c      	ldr	r4, [r3, #0]
 8004e12:	685b      	ldr	r3, [r3, #4]
 8004e14:	6053      	str	r3, [r2, #4]
 8004e16:	440c      	add	r4, r1
 8004e18:	6014      	str	r4, [r2, #0]
 8004e1a:	e7da      	b.n	8004dd2 <_free_r+0x26>
 8004e1c:	d902      	bls.n	8004e24 <_free_r+0x78>
 8004e1e:	230c      	movs	r3, #12
 8004e20:	6003      	str	r3, [r0, #0]
 8004e22:	e7d6      	b.n	8004dd2 <_free_r+0x26>
 8004e24:	6825      	ldr	r5, [r4, #0]
 8004e26:	1961      	adds	r1, r4, r5
 8004e28:	428b      	cmp	r3, r1
 8004e2a:	bf04      	itt	eq
 8004e2c:	6819      	ldreq	r1, [r3, #0]
 8004e2e:	685b      	ldreq	r3, [r3, #4]
 8004e30:	6063      	str	r3, [r4, #4]
 8004e32:	bf04      	itt	eq
 8004e34:	1949      	addeq	r1, r1, r5
 8004e36:	6021      	streq	r1, [r4, #0]
 8004e38:	6054      	str	r4, [r2, #4]
 8004e3a:	e7ca      	b.n	8004dd2 <_free_r+0x26>
 8004e3c:	b003      	add	sp, #12
 8004e3e:	bd30      	pop	{r4, r5, pc}
 8004e40:	2000030c 	.word	0x2000030c

08004e44 <_malloc_usable_size_r>:
 8004e44:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004e48:	1f18      	subs	r0, r3, #4
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	bfbc      	itt	lt
 8004e4e:	580b      	ldrlt	r3, [r1, r0]
 8004e50:	18c0      	addlt	r0, r0, r3
 8004e52:	4770      	bx	lr

08004e54 <_init>:
 8004e54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e56:	bf00      	nop
 8004e58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e5a:	bc08      	pop	{r3}
 8004e5c:	469e      	mov	lr, r3
 8004e5e:	4770      	bx	lr

08004e60 <_fini>:
 8004e60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e62:	bf00      	nop
 8004e64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e66:	bc08      	pop	{r3}
 8004e68:	469e      	mov	lr, r3
 8004e6a:	4770      	bx	lr
